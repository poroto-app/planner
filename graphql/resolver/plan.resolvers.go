package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"log"

	"poroto.app/poroto/planner/graphql/model"
	"poroto.app/poroto/planner/internal/domain/models"
	"poroto.app/poroto/planner/internal/domain/services"
)

// CreatePlanByLocation is the resolver for the createPlanByLocation field.
func (r *mutationResolver) CreatePlanByLocation(ctx context.Context, input *model.CreatePlanByLocationInput) ([]*model.Plan, error) {
	service, err := services.NewPlanService()
	if err != nil {
		log.Println(err)
	}

	plans, err := service.CreatePlanByLocation(
		ctx,
		models.GeoLocation{
			Latitude:  input.Latitude,
			Longitude: input.Longitude,
		})
	if err != nil {
		log.Println(err)
	}

	retPlans := make([]*model.Plan, 0)
	for _, plan := range *plans {
		places := make([]*model.Place, 0)
		for _, place := range plan.Places {
			places = append(places, &model.Place{
				Name:   place.Name,
				Photos: place.Photos,
				Location: &model.GeoLocation{
					Latitude:  place.Location.Latitude,
					Longitude: place.Location.Longitude,
				},
			})
		}

		retPlans = append(retPlans, &model.Plan{
			Name:          plan.Name,
			Places:        places,
			TimeInMinutes: plan.TimeInMinutes,
		})
	}
	return retPlans, nil
}

// MatchInterests is the resolver for the matchInterests field.
func (r *queryResolver) MatchInterests(ctx context.Context, input *model.MatchInterestsInput) (*model.InterestCandidate, error) {
	// TODO: 実際に付近の場所のカテゴリを提示する
	return &model.InterestCandidate{
		Categories: []*model.LocationCategory{
			{
				Name:        "spa",
				DisplayName: "温泉",
				Photo:       "https://images.pexels.com/photos/347137/pexels-photo-347137.jpeg",
			},
			{
				Name:        "cafe",
				DisplayName: "カフェ",
				Photo:       "https://images.pexels.com/photos/1402407/pexels-photo-1402407.jpeg",
			},
		},
	}, nil
}
