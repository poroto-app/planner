type Plan {
    id: String!
    name: String!
    places: [Place!]!
    timeInMinutes: Int!
    description: String
    transitions: [Transition!]!
}

type Place {
    id: String!
    name: String!
    location: GeoLocation!
    photos: [String!]!
    estimatedStayDuration: Int!
}

type Transition {
    from: Place
    to: Place!
    duration: Int!
}

type GeoLocation {
    latitude: Float!
    longitude: Float!
}

type LocationCategory {
    name: String!
    displayName: String!
    photo: String!
}

type InterestCandidate {
    categories: [LocationCategory!]!
}

extend type Query {
    plan(id: String!): Plan

    plans(pageKey: String): [Plan!]!

    matchInterests(input: MatchInterestsInput): InterestCandidate!

    # キャッシュされたプラン一覧を取得する
    cachedCreatedPlans(input: CachedCreatedPlansInput!): CachedCreatedPlans!
}

type CachedCreatedPlans {
    plans: [Plan!]
    createdBasedOnCurrentLocation: Boolean!
}

input CachedCreatedPlansInput {
    # CreatePlanByLocationOutputのsession
    session: String!
}

extend type Mutation {
    createPlanByLocation(input: CreatePlanByLocationInput!): CreatePlanByLocationOutput!
    changePlacesOrderInPlanCandidate(input: ChangePlacesOrderInPlanCandidateInput!): ChangePlacesOrderInPlanCandidateOutput!
    savePlanFromCandidate(input: SavePlanFromCandidateInput!): SavePlanFromCandidateOutput!
}

input CreatePlanByLocationInput {
    latitude: Float!
    longitude: Float!
    # ユーザーの興味をOptionalなパラメータとして渡す
    categories: [String!]
    freeTime: Int
    # 現在地から作成されたプランか
    # TODO: 必須パラメータにする
    createdBasedOnCurrentLocation: Boolean
}

type CreatePlanByLocationOutput {
    session: String!
    plans: [Plan!]!
}

input ChangePlacesOrderInPlanCandidateInput {
    session: String!
    planId: String!
    placeIds: [String!]!
    currentLatitude: Float
    currentLongitude: Float
}

type ChangePlacesOrderInPlanCandidateOutput {
    plan: Plan!
}

input SavePlanFromCandidateInput {
    session: String!
    planId: String!
}

type SavePlanFromCandidateOutput {
    plan: Plan!
}

input MatchInterestsInput {
    latitude: Float!
    longitude: Float!
}