type Plan {
    id: String!
    name: String!
    places: [Place!]!
    timeInMinutes: Int!
    description: String
}

type Place {
    name: String!
    location: GeoLocation!
    photos: [String!]
    estimatedStayDuration: Int!
}

type GeoLocation {
    latitude: Float!
    longitude: Float!
}

type LocationCategory {
    name: String!
    displayName: String!
    photo: String!
}

type InterestCandidate {
    categories: [LocationCategory!]!
}

extend type Query {
    matchInterests(input: MatchInterestsInput): InterestCandidate!

    # キャッシュされたプラン一覧を取得する
    cachedCreatedPlans(input: CachedCreatedPlansInput!): CachedCreatedPlans!
}

type CachedCreatedPlans {
    plans: [Plan!]
    # 現在地から作成されたプラン候補か
    createdFromCurrentLocation: Boolean!
}

input CachedCreatedPlansInput {
    # CreatePlanByLocationOutputのsession
    session: String!
}

extend type Mutation {
    createPlanByLocation(input: CreatePlanByLocationInput!): CreatePlanByLocationOutput!
}

input CreatePlanByLocationInput {
    latitude: Float!
    longitude: Float!
    # ユーザーの興味をOptionalなパラメータとして渡す
    categories: [String!]
    freeTime: Int
    # 指定した位置情報をプランに含めるか
    # examples:
    #   True    場所を指定してプランを作成した場合
    #   False   現在地からプランを作成した場合
    # TODO: 必須パラメータにする
    includeLocationToPlan: Boolean
}

type CreatePlanByLocationOutput {
    session: String!
    plans: [Plan!]!
}

input MatchInterestsInput {
    latitude: Float!
    longitude: Float!
}