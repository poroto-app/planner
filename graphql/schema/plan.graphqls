type Plan {
    id: String!
    name: String!
    places: [Place!]!
    timeInMinutes: Int!
    description: String
    transitions: [Transition!]!
    author: User
}

type Place {
    id: String!
    name: String!
    location: GeoLocation!
    photos: [String!]!
    estimatedStayDuration: Int!
}

type Transition {
    from: Place
    to: Place!
    duration: Int!
}

type GeoLocation {
    latitude: Float!
    longitude: Float!
}

type LocationCategory {
    name: String!
    displayName: String!
    # TODO: nullableにする
    photo: String!
    defaultPhotoUrl: String!
}

type InterestCandidate {
    session: String!
    categories: [LocationCategory!]!
}


# TODO: PlanCandidateのQueryとPlanのQueryを分ける
extend type Query {
    plan(id: String!): Plan

    plans(pageKey: String): [Plan!]!

    plansByLocation(input: PlansByLocationInput!): PlansByLocationOutput!

    plansByUser(input: PlansByUserInput!): PlansByUserOutput!

    # TODO: NearByPlaceCategories等のアプリケーションに依存しない名前にする
    matchInterests(input: MatchInterestsInput): InterestCandidate!

    # キャッシュされたプラン一覧を取得する
    cachedCreatedPlans(input: CachedCreatedPlansInput!): CachedCreatedPlans!

    # プランを作成可能な他の場所を取得する
    availablePlacesForPlan(input: AvailablePlacesForPlanInput!): AvailablePlacesForPlan!
}

input PlansByLocationInput {
    latitude: Float!
    longitude: Float!
    limit: Int
    pageKey: String
}

type PlansByLocationOutput {
    plans: [Plan!]!
    pageKey: String
}

input PlansByUserInput {
    userId: String!
}

type PlansByUserOutput {
    plans: [Plan!]!
}

type CachedCreatedPlans {
    plans: [Plan!]
    createdBasedOnCurrentLocation: Boolean!
}

input CachedCreatedPlansInput {
    # CreatePlanByLocationOutputのsession
    session: String!
}

input AvailablePlacesForPlanInput {
    session: String!
}

type AvailablePlacesForPlan {
    places: [Place!]!
}

# TODO: PlanCandidateのMutationとPlanのMutationを分ける
extend type Mutation {
    createPlanByLocation(input: CreatePlanByLocationInput!): CreatePlanByLocationOutput!
    createPlanByPlace(input: CreatePlanByPlaceInput!): CreatePlanByPlaceOutput!
    changePlacesOrderInPlanCandidate(input: ChangePlacesOrderInPlanCandidateInput!): ChangePlacesOrderInPlanCandidateOutput!
    savePlanFromCandidate(input: SavePlanFromCandidateInput!): SavePlanFromCandidateOutput!
}

input CreatePlanByLocationInput {
    session: String
    latitude: Float!
    longitude: Float!
    googlePlaceId: String
    categoriesPreferred: [String!]
    categoriesDisliked: [String!]
    freeTime: Int
    # 現在地から作成されたプランか
    # TODO: 必須パラメータにする
    createdBasedOnCurrentLocation: Boolean
}

type CreatePlanByLocationOutput {
    session: String!
    plans: [Plan!]!
}

input CreatePlanByPlaceInput {
    session: String!
    placeId: String!
}

type CreatePlanByPlaceOutput {
    session: String!
    plan: Plan!
}

input ChangePlacesOrderInPlanCandidateInput {
    session: String!
    planId: String!
    placeIds: [String!]!
    currentLatitude: Float
    currentLongitude: Float
}

type ChangePlacesOrderInPlanCandidateOutput {
    plan: Plan!
}

input SavePlanFromCandidateInput {
    session: String!
    planId: String!
    authToken: String
}

type SavePlanFromCandidateOutput {
    plan: Plan!
}

input MatchInterestsInput {
    latitude: Float!
    longitude: Float!
}