// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooglePlacePhotoReferences(t *testing.T) {
	t.Parallel()

	query := GooglePlacePhotoReferences()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooglePlacePhotoReferencesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacePhotoReferencesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooglePlacePhotoReferences().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacePhotoReferencesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlacePhotoReferenceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacePhotoReferencesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooglePlacePhotoReferenceExists(ctx, tx, o.PhotoReference)
	if err != nil {
		t.Errorf("Unable to check if GooglePlacePhotoReference exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooglePlacePhotoReferenceExists to return true, but got false.")
	}
}

func testGooglePlacePhotoReferencesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	googlePlacePhotoReferenceFound, err := FindGooglePlacePhotoReference(ctx, tx, o.PhotoReference)
	if err != nil {
		t.Error(err)
	}

	if googlePlacePhotoReferenceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooglePlacePhotoReferencesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooglePlacePhotoReferences().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooglePlacePhotoReferencesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooglePlacePhotoReferences().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooglePlacePhotoReferencesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	googlePlacePhotoReferenceOne := &GooglePlacePhotoReference{}
	googlePlacePhotoReferenceTwo := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, googlePlacePhotoReferenceOne, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlacePhotoReferenceTwo, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlacePhotoReferenceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlacePhotoReferenceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlacePhotoReferences().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooglePlacePhotoReferencesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	googlePlacePhotoReferenceOne := &GooglePlacePhotoReference{}
	googlePlacePhotoReferenceTwo := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, googlePlacePhotoReferenceOne, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlacePhotoReferenceTwo, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlacePhotoReferenceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlacePhotoReferenceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func googlePlacePhotoReferenceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func googlePlacePhotoReferenceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
	*o = GooglePlacePhotoReference{}
	return nil
}

func testGooglePlacePhotoReferencesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooglePlacePhotoReference{}
	o := &GooglePlacePhotoReference{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference object: %s", err)
	}

	AddGooglePlacePhotoReferenceHook(boil.BeforeInsertHook, googlePlacePhotoReferenceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceBeforeInsertHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.AfterInsertHook, googlePlacePhotoReferenceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceAfterInsertHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.AfterSelectHook, googlePlacePhotoReferenceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceAfterSelectHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.BeforeUpdateHook, googlePlacePhotoReferenceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceBeforeUpdateHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.AfterUpdateHook, googlePlacePhotoReferenceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceAfterUpdateHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.BeforeDeleteHook, googlePlacePhotoReferenceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceBeforeDeleteHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.AfterDeleteHook, googlePlacePhotoReferenceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceAfterDeleteHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.BeforeUpsertHook, googlePlacePhotoReferenceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceBeforeUpsertHooks = []GooglePlacePhotoReferenceHook{}

	AddGooglePlacePhotoReferenceHook(boil.AfterUpsertHook, googlePlacePhotoReferenceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoReferenceAfterUpsertHooks = []GooglePlacePhotoReferenceHook{}
}

func testGooglePlacePhotoReferencesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlacePhotoReferencesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(googlePlacePhotoReferenceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlacePhotoReferenceToManyPhotoReferenceGooglePlacePhotoAttributions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlacePhotoReference
	var b, c GooglePlacePhotoAttribution

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PhotoReference = a.PhotoReference
	c.PhotoReference = a.PhotoReference

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PhotoReferenceGooglePlacePhotoAttributions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PhotoReference == b.PhotoReference {
			bFound = true
		}
		if v.PhotoReference == c.PhotoReference {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlacePhotoReferenceSlice{&a}
	if err = a.L.LoadPhotoReferenceGooglePlacePhotoAttributions(ctx, tx, false, (*[]*GooglePlacePhotoReference)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PhotoReferenceGooglePlacePhotoAttributions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PhotoReferenceGooglePlacePhotoAttributions = nil
	if err = a.L.LoadPhotoReferenceGooglePlacePhotoAttributions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PhotoReferenceGooglePlacePhotoAttributions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlacePhotoReferenceToManyPhotoReferenceGooglePlacePhotos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlacePhotoReference
	var b, c GooglePlacePhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlacePhotoDBTypes, false, googlePlacePhotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlacePhotoDBTypes, false, googlePlacePhotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PhotoReference = a.PhotoReference
	c.PhotoReference = a.PhotoReference

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PhotoReferenceGooglePlacePhotos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PhotoReference == b.PhotoReference {
			bFound = true
		}
		if v.PhotoReference == c.PhotoReference {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlacePhotoReferenceSlice{&a}
	if err = a.L.LoadPhotoReferenceGooglePlacePhotos(ctx, tx, false, (*[]*GooglePlacePhotoReference)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PhotoReferenceGooglePlacePhotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PhotoReferenceGooglePlacePhotos = nil
	if err = a.L.LoadPhotoReferenceGooglePlacePhotos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PhotoReferenceGooglePlacePhotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlacePhotoReferenceToManyAddOpPhotoReferenceGooglePlacePhotoAttributions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlacePhotoReference
	var b, c, d, e GooglePlacePhotoAttribution

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlacePhotoReferenceDBTypes, false, strmangle.SetComplement(googlePlacePhotoReferencePrimaryKeyColumns, googlePlacePhotoReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlacePhotoAttribution{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlacePhotoAttributionDBTypes, false, strmangle.SetComplement(googlePlacePhotoAttributionPrimaryKeyColumns, googlePlacePhotoAttributionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlacePhotoAttribution{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPhotoReferenceGooglePlacePhotoAttributions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PhotoReference != first.PhotoReference {
			t.Error("foreign key was wrong value", a.PhotoReference, first.PhotoReference)
		}
		if a.PhotoReference != second.PhotoReference {
			t.Error("foreign key was wrong value", a.PhotoReference, second.PhotoReference)
		}

		if first.R.PhotoReferenceGooglePlacePhotoReference != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PhotoReferenceGooglePlacePhotoReference != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PhotoReferenceGooglePlacePhotoAttributions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PhotoReferenceGooglePlacePhotoAttributions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PhotoReferenceGooglePlacePhotoAttributions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlacePhotoReferenceToManyAddOpPhotoReferenceGooglePlacePhotos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlacePhotoReference
	var b, c, d, e GooglePlacePhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlacePhotoReferenceDBTypes, false, strmangle.SetComplement(googlePlacePhotoReferencePrimaryKeyColumns, googlePlacePhotoReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlacePhoto{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlacePhotoDBTypes, false, strmangle.SetComplement(googlePlacePhotoPrimaryKeyColumns, googlePlacePhotoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlacePhoto{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPhotoReferenceGooglePlacePhotos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PhotoReference != first.PhotoReference {
			t.Error("foreign key was wrong value", a.PhotoReference, first.PhotoReference)
		}
		if a.PhotoReference != second.PhotoReference {
			t.Error("foreign key was wrong value", a.PhotoReference, second.PhotoReference)
		}

		if first.R.PhotoReferenceGooglePlacePhotoReference != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PhotoReferenceGooglePlacePhotoReference != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PhotoReferenceGooglePlacePhotos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PhotoReferenceGooglePlacePhotos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PhotoReferenceGooglePlacePhotos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlacePhotoReferenceToOneGooglePlaceUsingGooglePlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GooglePlacePhotoReference
	var foreign GooglePlace

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GooglePlaceID = foreign.GooglePlaceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GooglePlace().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GooglePlaceID != foreign.GooglePlaceID {
		t.Errorf("want: %v, got %v", foreign.GooglePlaceID, check.GooglePlaceID)
	}

	ranAfterSelectHook := false
	AddGooglePlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GooglePlacePhotoReferenceSlice{&local}
	if err = local.L.LoadGooglePlace(ctx, tx, false, (*[]*GooglePlacePhotoReference)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GooglePlace = nil
	if err = local.L.LoadGooglePlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGooglePlacePhotoReferenceToOneSetOpGooglePlaceUsingGooglePlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlacePhotoReference
	var b, c GooglePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlacePhotoReferenceDBTypes, false, strmangle.SetComplement(googlePlacePhotoReferencePrimaryKeyColumns, googlePlacePhotoReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GooglePlace{&b, &c} {
		err = a.SetGooglePlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GooglePlace != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GooglePlacePhotoReferences[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GooglePlaceID))
		reflect.Indirect(reflect.ValueOf(&a.GooglePlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, x.GooglePlaceID)
		}
	}
}

func testGooglePlacePhotoReferencesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlacePhotoReferencesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlacePhotoReferenceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlacePhotoReferencesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlacePhotoReferences().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	googlePlacePhotoReferenceDBTypes = map[string]string{`PhotoReference`: `varchar`, `GooglePlaceID`: `varchar`, `Width`: `int`, `Height`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                                = bytes.MinRead
)

func testGooglePlacePhotoReferencesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(googlePlacePhotoReferencePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(googlePlacePhotoReferenceAllColumns) == len(googlePlacePhotoReferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooglePlacePhotoReferencesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(googlePlacePhotoReferenceAllColumns) == len(googlePlacePhotoReferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlacePhotoReferenceDBTypes, true, googlePlacePhotoReferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(googlePlacePhotoReferenceAllColumns, googlePlacePhotoReferencePrimaryKeyColumns) {
		fields = googlePlacePhotoReferenceAllColumns
	} else {
		fields = strmangle.SetComplement(
			googlePlacePhotoReferenceAllColumns,
			googlePlacePhotoReferencePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooglePlacePhotoReferenceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooglePlacePhotoReferencesUpsert(t *testing.T) {
	t.Parallel()

	if len(googlePlacePhotoReferenceAllColumns) == len(googlePlacePhotoReferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGooglePlacePhotoReferenceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooglePlacePhotoReference{}
	if err = randomize.Struct(seed, &o, googlePlacePhotoReferenceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlacePhotoReference: %s", err)
	}

	count, err := GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlacePhotoReference: %s", err)
	}

	count, err = GooglePlacePhotoReferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
