// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlanCandidateSetMetaDatum is an object representing the database table.
type PlanCandidateSetMetaDatum struct {
	ID                         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlanCandidateSetID         string    `boil:"plan_candidate_set_id" json:"plan_candidate_set_id" toml:"plan_candidate_set_id" yaml:"plan_candidate_set_id"`
	LatitudeStart              float64   `boil:"latitude_start" json:"latitude_start" toml:"latitude_start" yaml:"latitude_start"`
	LongitudeStart             float64   `boil:"longitude_start" json:"longitude_start" toml:"longitude_start" yaml:"longitude_start"`
	CreatedFromCurrentLocation bool      `boil:"created_from_current_location" json:"created_from_current_location" toml:"created_from_current_location" yaml:"created_from_current_location"`
	CreatedAt                  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *planCandidateSetMetaDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planCandidateSetMetaDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanCandidateSetMetaDatumColumns = struct {
	ID                         string
	PlanCandidateSetID         string
	LatitudeStart              string
	LongitudeStart             string
	CreatedFromCurrentLocation string
	CreatedAt                  string
	UpdatedAt                  string
}{
	ID:                         "id",
	PlanCandidateSetID:         "plan_candidate_set_id",
	LatitudeStart:              "latitude_start",
	LongitudeStart:             "longitude_start",
	CreatedFromCurrentLocation: "created_from_current_location",
	CreatedAt:                  "created_at",
	UpdatedAt:                  "updated_at",
}

var PlanCandidateSetMetaDatumTableColumns = struct {
	ID                         string
	PlanCandidateSetID         string
	LatitudeStart              string
	LongitudeStart             string
	CreatedFromCurrentLocation string
	CreatedAt                  string
	UpdatedAt                  string
}{
	ID:                         "plan_candidate_set_meta_data.id",
	PlanCandidateSetID:         "plan_candidate_set_meta_data.plan_candidate_set_id",
	LatitudeStart:              "plan_candidate_set_meta_data.latitude_start",
	LongitudeStart:             "plan_candidate_set_meta_data.longitude_start",
	CreatedFromCurrentLocation: "plan_candidate_set_meta_data.created_from_current_location",
	CreatedAt:                  "plan_candidate_set_meta_data.created_at",
	UpdatedAt:                  "plan_candidate_set_meta_data.updated_at",
}

// Generated where

var PlanCandidateSetMetaDatumWhere = struct {
	ID                         whereHelperstring
	PlanCandidateSetID         whereHelperstring
	LatitudeStart              whereHelperfloat64
	LongitudeStart             whereHelperfloat64
	CreatedFromCurrentLocation whereHelperbool
	CreatedAt                  whereHelpertime_Time
	UpdatedAt                  whereHelpertime_Time
}{
	ID:                         whereHelperstring{field: "`plan_candidate_set_meta_data`.`id`"},
	PlanCandidateSetID:         whereHelperstring{field: "`plan_candidate_set_meta_data`.`plan_candidate_set_id`"},
	LatitudeStart:              whereHelperfloat64{field: "`plan_candidate_set_meta_data`.`latitude_start`"},
	LongitudeStart:             whereHelperfloat64{field: "`plan_candidate_set_meta_data`.`longitude_start`"},
	CreatedFromCurrentLocation: whereHelperbool{field: "`plan_candidate_set_meta_data`.`created_from_current_location`"},
	CreatedAt:                  whereHelpertime_Time{field: "`plan_candidate_set_meta_data`.`created_at`"},
	UpdatedAt:                  whereHelpertime_Time{field: "`plan_candidate_set_meta_data`.`updated_at`"},
}

// PlanCandidateSetMetaDatumRels is where relationship names are stored.
var PlanCandidateSetMetaDatumRels = struct {
	PlanCandidateSet string
}{
	PlanCandidateSet: "PlanCandidateSet",
}

// planCandidateSetMetaDatumR is where relationships are stored.
type planCandidateSetMetaDatumR struct {
	PlanCandidateSet *PlanCandidateSet `boil:"PlanCandidateSet" json:"PlanCandidateSet" toml:"PlanCandidateSet" yaml:"PlanCandidateSet"`
}

// NewStruct creates a new relationship struct
func (*planCandidateSetMetaDatumR) NewStruct() *planCandidateSetMetaDatumR {
	return &planCandidateSetMetaDatumR{}
}

func (r *planCandidateSetMetaDatumR) GetPlanCandidateSet() *PlanCandidateSet {
	if r == nil {
		return nil
	}
	return r.PlanCandidateSet
}

// planCandidateSetMetaDatumL is where Load methods for each relationship are stored.
type planCandidateSetMetaDatumL struct{}

var (
	planCandidateSetMetaDatumAllColumns            = []string{"id", "plan_candidate_set_id", "latitude_start", "longitude_start", "created_from_current_location", "created_at", "updated_at"}
	planCandidateSetMetaDatumColumnsWithoutDefault = []string{"id", "plan_candidate_set_id", "latitude_start", "longitude_start", "created_from_current_location"}
	planCandidateSetMetaDatumColumnsWithDefault    = []string{"created_at", "updated_at"}
	planCandidateSetMetaDatumPrimaryKeyColumns     = []string{"id"}
	planCandidateSetMetaDatumGeneratedColumns      = []string{}
)

type (
	// PlanCandidateSetMetaDatumSlice is an alias for a slice of pointers to PlanCandidateSetMetaDatum.
	// This should almost always be used instead of []PlanCandidateSetMetaDatum.
	PlanCandidateSetMetaDatumSlice []*PlanCandidateSetMetaDatum
	// PlanCandidateSetMetaDatumHook is the signature for custom PlanCandidateSetMetaDatum hook methods
	PlanCandidateSetMetaDatumHook func(context.Context, boil.ContextExecutor, *PlanCandidateSetMetaDatum) error

	planCandidateSetMetaDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planCandidateSetMetaDatumType                 = reflect.TypeOf(&PlanCandidateSetMetaDatum{})
	planCandidateSetMetaDatumMapping              = queries.MakeStructMapping(planCandidateSetMetaDatumType)
	planCandidateSetMetaDatumPrimaryKeyMapping, _ = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, planCandidateSetMetaDatumPrimaryKeyColumns)
	planCandidateSetMetaDatumInsertCacheMut       sync.RWMutex
	planCandidateSetMetaDatumInsertCache          = make(map[string]insertCache)
	planCandidateSetMetaDatumUpdateCacheMut       sync.RWMutex
	planCandidateSetMetaDatumUpdateCache          = make(map[string]updateCache)
	planCandidateSetMetaDatumUpsertCacheMut       sync.RWMutex
	planCandidateSetMetaDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planCandidateSetMetaDatumAfterSelectHooks []PlanCandidateSetMetaDatumHook

var planCandidateSetMetaDatumBeforeInsertHooks []PlanCandidateSetMetaDatumHook
var planCandidateSetMetaDatumAfterInsertHooks []PlanCandidateSetMetaDatumHook

var planCandidateSetMetaDatumBeforeUpdateHooks []PlanCandidateSetMetaDatumHook
var planCandidateSetMetaDatumAfterUpdateHooks []PlanCandidateSetMetaDatumHook

var planCandidateSetMetaDatumBeforeDeleteHooks []PlanCandidateSetMetaDatumHook
var planCandidateSetMetaDatumAfterDeleteHooks []PlanCandidateSetMetaDatumHook

var planCandidateSetMetaDatumBeforeUpsertHooks []PlanCandidateSetMetaDatumHook
var planCandidateSetMetaDatumAfterUpsertHooks []PlanCandidateSetMetaDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlanCandidateSetMetaDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlanCandidateSetMetaDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlanCandidateSetMetaDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlanCandidateSetMetaDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlanCandidateSetMetaDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlanCandidateSetMetaDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlanCandidateSetMetaDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlanCandidateSetMetaDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlanCandidateSetMetaDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanCandidateSetMetaDatumHook registers your hook function for all future operations.
func AddPlanCandidateSetMetaDatumHook(hookPoint boil.HookPoint, planCandidateSetMetaDatumHook PlanCandidateSetMetaDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planCandidateSetMetaDatumAfterSelectHooks = append(planCandidateSetMetaDatumAfterSelectHooks, planCandidateSetMetaDatumHook)
	case boil.BeforeInsertHook:
		planCandidateSetMetaDatumBeforeInsertHooks = append(planCandidateSetMetaDatumBeforeInsertHooks, planCandidateSetMetaDatumHook)
	case boil.AfterInsertHook:
		planCandidateSetMetaDatumAfterInsertHooks = append(planCandidateSetMetaDatumAfterInsertHooks, planCandidateSetMetaDatumHook)
	case boil.BeforeUpdateHook:
		planCandidateSetMetaDatumBeforeUpdateHooks = append(planCandidateSetMetaDatumBeforeUpdateHooks, planCandidateSetMetaDatumHook)
	case boil.AfterUpdateHook:
		planCandidateSetMetaDatumAfterUpdateHooks = append(planCandidateSetMetaDatumAfterUpdateHooks, planCandidateSetMetaDatumHook)
	case boil.BeforeDeleteHook:
		planCandidateSetMetaDatumBeforeDeleteHooks = append(planCandidateSetMetaDatumBeforeDeleteHooks, planCandidateSetMetaDatumHook)
	case boil.AfterDeleteHook:
		planCandidateSetMetaDatumAfterDeleteHooks = append(planCandidateSetMetaDatumAfterDeleteHooks, planCandidateSetMetaDatumHook)
	case boil.BeforeUpsertHook:
		planCandidateSetMetaDatumBeforeUpsertHooks = append(planCandidateSetMetaDatumBeforeUpsertHooks, planCandidateSetMetaDatumHook)
	case boil.AfterUpsertHook:
		planCandidateSetMetaDatumAfterUpsertHooks = append(planCandidateSetMetaDatumAfterUpsertHooks, planCandidateSetMetaDatumHook)
	}
}

// One returns a single planCandidateSetMetaDatum record from the query.
func (q planCandidateSetMetaDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlanCandidateSetMetaDatum, error) {
	o := &PlanCandidateSetMetaDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for plan_candidate_set_meta_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlanCandidateSetMetaDatum records from the query.
func (q planCandidateSetMetaDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanCandidateSetMetaDatumSlice, error) {
	var o []*PlanCandidateSetMetaDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to PlanCandidateSetMetaDatum slice")
	}

	if len(planCandidateSetMetaDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlanCandidateSetMetaDatum records in the query.
func (q planCandidateSetMetaDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count plan_candidate_set_meta_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planCandidateSetMetaDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if plan_candidate_set_meta_data exists")
	}

	return count > 0, nil
}

// PlanCandidateSet pointed to by the foreign key.
func (o *PlanCandidateSetMetaDatum) PlanCandidateSet(mods ...qm.QueryMod) planCandidateSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlanCandidateSetID),
	}

	queryMods = append(queryMods, mods...)

	return PlanCandidateSets(queryMods...)
}

// LoadPlanCandidateSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planCandidateSetMetaDatumL) LoadPlanCandidateSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSetMetaDatum interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSetMetaDatum
	var object *PlanCandidateSetMetaDatum

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSetMetaDatum.(*PlanCandidateSetMetaDatum)
		if !ok {
			object = new(PlanCandidateSetMetaDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSetMetaDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSetMetaDatum))
			}
		}
	} else {
		s, ok := maybePlanCandidateSetMetaDatum.(*[]*PlanCandidateSetMetaDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSetMetaDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSetMetaDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetMetaDatumR{}
		}
		args = append(args, object.PlanCandidateSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetMetaDatumR{}
			}

			for _, a := range args {
				if a == obj.PlanCandidateSetID {
					continue Outer
				}
			}

			args = append(args, obj.PlanCandidateSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`plan_candidate_sets`),
		qm.WhereIn(`plan_candidate_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlanCandidateSet")
	}

	var resultSlice []*PlanCandidateSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlanCandidateSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plan_candidate_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_sets")
	}

	if len(planCandidateSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlanCandidateSet = foreign
		if foreign.R == nil {
			foreign.R = &planCandidateSetR{}
		}
		foreign.R.PlanCandidateSetMetaData = append(foreign.R.PlanCandidateSetMetaData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlanCandidateSetID == foreign.ID {
				local.R.PlanCandidateSet = foreign
				if foreign.R == nil {
					foreign.R = &planCandidateSetR{}
				}
				foreign.R.PlanCandidateSetMetaData = append(foreign.R.PlanCandidateSetMetaData, local)
				break
			}
		}
	}

	return nil
}

// SetPlanCandidateSet of the planCandidateSetMetaDatum to the related item.
// Sets o.R.PlanCandidateSet to related.
// Adds o to related.R.PlanCandidateSetMetaData.
func (o *PlanCandidateSetMetaDatum) SetPlanCandidateSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PlanCandidateSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plan_candidate_set_meta_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
		strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlanCandidateSetID = related.ID
	if o.R == nil {
		o.R = &planCandidateSetMetaDatumR{
			PlanCandidateSet: related,
		}
	} else {
		o.R.PlanCandidateSet = related
	}

	if related.R == nil {
		related.R = &planCandidateSetR{
			PlanCandidateSetMetaData: PlanCandidateSetMetaDatumSlice{o},
		}
	} else {
		related.R.PlanCandidateSetMetaData = append(related.R.PlanCandidateSetMetaData, o)
	}

	return nil
}

// PlanCandidateSetMetaData retrieves all the records using an executor.
func PlanCandidateSetMetaData(mods ...qm.QueryMod) planCandidateSetMetaDatumQuery {
	mods = append(mods, qm.From("`plan_candidate_set_meta_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plan_candidate_set_meta_data`.*"})
	}

	return planCandidateSetMetaDatumQuery{q}
}

// FindPlanCandidateSetMetaDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlanCandidateSetMetaDatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PlanCandidateSetMetaDatum, error) {
	planCandidateSetMetaDatumObj := &PlanCandidateSetMetaDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plan_candidate_set_meta_data` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planCandidateSetMetaDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from plan_candidate_set_meta_data")
	}

	if err = planCandidateSetMetaDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planCandidateSetMetaDatumObj, err
	}

	return planCandidateSetMetaDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlanCandidateSetMetaDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no plan_candidate_set_meta_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetMetaDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planCandidateSetMetaDatumInsertCacheMut.RLock()
	cache, cached := planCandidateSetMetaDatumInsertCache[key]
	planCandidateSetMetaDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planCandidateSetMetaDatumAllColumns,
			planCandidateSetMetaDatumColumnsWithDefault,
			planCandidateSetMetaDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plan_candidate_set_meta_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plan_candidate_set_meta_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plan_candidate_set_meta_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into plan_candidate_set_meta_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for plan_candidate_set_meta_data")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetMetaDatumInsertCacheMut.Lock()
		planCandidateSetMetaDatumInsertCache[key] = cache
		planCandidateSetMetaDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlanCandidateSetMetaDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlanCandidateSetMetaDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planCandidateSetMetaDatumUpdateCacheMut.RLock()
	cache, cached := planCandidateSetMetaDatumUpdateCache[key]
	planCandidateSetMetaDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planCandidateSetMetaDatumAllColumns,
			planCandidateSetMetaDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entities: unable to update plan_candidate_set_meta_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plan_candidate_set_meta_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, append(wl, planCandidateSetMetaDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update plan_candidate_set_meta_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by update for plan_candidate_set_meta_data")
	}

	if !cached {
		planCandidateSetMetaDatumUpdateCacheMut.Lock()
		planCandidateSetMetaDatumUpdateCache[key] = cache
		planCandidateSetMetaDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planCandidateSetMetaDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all for plan_candidate_set_meta_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected for plan_candidate_set_meta_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanCandidateSetMetaDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetMetaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plan_candidate_set_meta_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetMetaDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all in planCandidateSetMetaDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected all in update all planCandidateSetMetaDatum")
	}
	return rowsAff, nil
}

var mySQLPlanCandidateSetMetaDatumUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlanCandidateSetMetaDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no plan_candidate_set_meta_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetMetaDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanCandidateSetMetaDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planCandidateSetMetaDatumUpsertCacheMut.RLock()
	cache, cached := planCandidateSetMetaDatumUpsertCache[key]
	planCandidateSetMetaDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			planCandidateSetMetaDatumAllColumns,
			planCandidateSetMetaDatumColumnsWithDefault,
			planCandidateSetMetaDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planCandidateSetMetaDatumAllColumns,
			planCandidateSetMetaDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entities: unable to upsert plan_candidate_set_meta_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`plan_candidate_set_meta_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plan_candidate_set_meta_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to upsert for plan_candidate_set_meta_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planCandidateSetMetaDatumType, planCandidateSetMetaDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entities: unable to retrieve unique values for plan_candidate_set_meta_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for plan_candidate_set_meta_data")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetMetaDatumUpsertCacheMut.Lock()
		planCandidateSetMetaDatumUpsertCache[key] = cache
		planCandidateSetMetaDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlanCandidateSetMetaDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlanCandidateSetMetaDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entities: no PlanCandidateSetMetaDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planCandidateSetMetaDatumPrimaryKeyMapping)
	sql := "DELETE FROM `plan_candidate_set_meta_data` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete from plan_candidate_set_meta_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by delete for plan_candidate_set_meta_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planCandidateSetMetaDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entities: no planCandidateSetMetaDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from plan_candidate_set_meta_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for plan_candidate_set_meta_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanCandidateSetMetaDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planCandidateSetMetaDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetMetaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plan_candidate_set_meta_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetMetaDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from planCandidateSetMetaDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for plan_candidate_set_meta_data")
	}

	if len(planCandidateSetMetaDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlanCandidateSetMetaDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlanCandidateSetMetaDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanCandidateSetMetaDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanCandidateSetMetaDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetMetaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plan_candidate_set_meta_data`.* FROM `plan_candidate_set_meta_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetMetaDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in PlanCandidateSetMetaDatumSlice")
	}

	*o = slice

	return nil
}

// PlanCandidateSetMetaDatumExists checks if the PlanCandidateSetMetaDatum row exists.
func PlanCandidateSetMetaDatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plan_candidate_set_meta_data` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if plan_candidate_set_meta_data exists")
	}

	return exists, nil
}

// Exists checks if the PlanCandidateSetMetaDatum row exists.
func (o *PlanCandidateSetMetaDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanCandidateSetMetaDatumExists(ctx, exec, o.ID)
}
