// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooglePlaceReviews(t *testing.T) {
	t.Parallel()

	query := GooglePlaceReviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooglePlaceReviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceReviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooglePlaceReviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceReviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceReviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceReviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooglePlaceReviewExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GooglePlaceReview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooglePlaceReviewExists to return true, but got false.")
	}
}

func testGooglePlaceReviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	googlePlaceReviewFound, err := FindGooglePlaceReview(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if googlePlaceReviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooglePlaceReviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooglePlaceReviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceReviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooglePlaceReviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooglePlaceReviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	googlePlaceReviewOne := &GooglePlaceReview{}
	googlePlaceReviewTwo := &GooglePlaceReview{}
	if err = randomize.Struct(seed, googlePlaceReviewOne, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceReviewTwo, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceReviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceReviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaceReviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooglePlaceReviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	googlePlaceReviewOne := &GooglePlaceReview{}
	googlePlaceReviewTwo := &GooglePlaceReview{}
	if err = randomize.Struct(seed, googlePlaceReviewOne, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceReviewTwo, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceReviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceReviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func googlePlaceReviewBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func googlePlaceReviewAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceReview) error {
	*o = GooglePlaceReview{}
	return nil
}

func testGooglePlaceReviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooglePlaceReview{}
	o := &GooglePlaceReview{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview object: %s", err)
	}

	AddGooglePlaceReviewHook(boil.BeforeInsertHook, googlePlaceReviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewBeforeInsertHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.AfterInsertHook, googlePlaceReviewAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewAfterInsertHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.AfterSelectHook, googlePlaceReviewAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewAfterSelectHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.BeforeUpdateHook, googlePlaceReviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewBeforeUpdateHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.AfterUpdateHook, googlePlaceReviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewAfterUpdateHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.BeforeDeleteHook, googlePlaceReviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewBeforeDeleteHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.AfterDeleteHook, googlePlaceReviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewAfterDeleteHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.BeforeUpsertHook, googlePlaceReviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewBeforeUpsertHooks = []GooglePlaceReviewHook{}

	AddGooglePlaceReviewHook(boil.AfterUpsertHook, googlePlaceReviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceReviewAfterUpsertHooks = []GooglePlaceReviewHook{}
}

func testGooglePlaceReviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceReviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(googlePlaceReviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceReviewToOneGooglePlaceUsingGooglePlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GooglePlaceReview
	var foreign GooglePlace

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GooglePlaceID = foreign.GooglePlaceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GooglePlace().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GooglePlaceID != foreign.GooglePlaceID {
		t.Errorf("want: %v, got %v", foreign.GooglePlaceID, check.GooglePlaceID)
	}

	ranAfterSelectHook := false
	AddGooglePlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GooglePlaceReviewSlice{&local}
	if err = local.L.LoadGooglePlace(ctx, tx, false, (*[]*GooglePlaceReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GooglePlace = nil
	if err = local.L.LoadGooglePlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGooglePlaceReviewToOneSetOpGooglePlaceUsingGooglePlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlaceReview
	var b, c GooglePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceReviewDBTypes, false, strmangle.SetComplement(googlePlaceReviewPrimaryKeyColumns, googlePlaceReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GooglePlace{&b, &c} {
		err = a.SetGooglePlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GooglePlace != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GooglePlaceReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GooglePlaceID))
		reflect.Indirect(reflect.ValueOf(&a.GooglePlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, x.GooglePlaceID)
		}
	}
}

func testGooglePlaceReviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceReviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceReviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceReviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaceReviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	googlePlaceReviewDBTypes = map[string]string{`ID`: `char`, `GooglePlaceID`: `varchar`, `AuthorName`: `varchar`, `AuthorURL`: `varchar`, `AuthorProfilePhotoURL`: `varchar`, `Language`: `varchar`, `Rating`: `int`, `Text`: `text`, `Time`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                        = bytes.MinRead
)

func testGooglePlaceReviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(googlePlaceReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(googlePlaceReviewAllColumns) == len(googlePlaceReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooglePlaceReviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(googlePlaceReviewAllColumns) == len(googlePlaceReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceReview{}
	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceReviewDBTypes, true, googlePlaceReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(googlePlaceReviewAllColumns, googlePlaceReviewPrimaryKeyColumns) {
		fields = googlePlaceReviewAllColumns
	} else {
		fields = strmangle.SetComplement(
			googlePlaceReviewAllColumns,
			googlePlaceReviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooglePlaceReviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooglePlaceReviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(googlePlaceReviewAllColumns) == len(googlePlaceReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGooglePlaceReviewUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooglePlaceReview{}
	if err = randomize.Struct(seed, &o, googlePlaceReviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlaceReview: %s", err)
	}

	count, err := GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, googlePlaceReviewDBTypes, false, googlePlaceReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceReview struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlaceReview: %s", err)
	}

	count, err = GooglePlaceReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
