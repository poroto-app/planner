// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooglePlaces(t *testing.T) {
	t.Parallel()

	query := GooglePlaces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooglePlacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooglePlaces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooglePlaceExists(ctx, tx, o.GooglePlaceID)
	if err != nil {
		t.Errorf("Unable to check if GooglePlace exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooglePlaceExists to return true, but got false.")
	}
}

func testGooglePlacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	googlePlaceFound, err := FindGooglePlace(ctx, tx, o.GooglePlaceID)
	if err != nil {
		t.Error(err)
	}

	if googlePlaceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooglePlacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooglePlaces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooglePlacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooglePlaces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooglePlacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	googlePlaceOne := &GooglePlace{}
	googlePlaceTwo := &GooglePlace{}
	if err = randomize.Struct(seed, googlePlaceOne, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceTwo, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooglePlacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	googlePlaceOne := &GooglePlace{}
	googlePlaceTwo := &GooglePlace{}
	if err = randomize.Struct(seed, googlePlaceOne, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceTwo, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func googlePlaceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func googlePlaceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
	*o = GooglePlace{}
	return nil
}

func testGooglePlacesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooglePlace{}
	o := &GooglePlace{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlace object: %s", err)
	}

	AddGooglePlaceHook(boil.BeforeInsertHook, googlePlaceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceBeforeInsertHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.AfterInsertHook, googlePlaceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceAfterInsertHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.AfterSelectHook, googlePlaceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	googlePlaceAfterSelectHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.BeforeUpdateHook, googlePlaceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceBeforeUpdateHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.AfterUpdateHook, googlePlaceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceAfterUpdateHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.BeforeDeleteHook, googlePlaceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceBeforeDeleteHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.AfterDeleteHook, googlePlaceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceAfterDeleteHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.BeforeUpsertHook, googlePlaceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceBeforeUpsertHooks = []GooglePlaceHook{}

	AddGooglePlaceHook(boil.AfterUpsertHook, googlePlaceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceAfterUpsertHooks = []GooglePlaceHook{}
}

func testGooglePlacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(googlePlaceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceToManyGooglePlaceOpeningPeriods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c GooglePlaceOpeningPeriod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GooglePlaceID = a.GooglePlaceID
	c.GooglePlaceID = a.GooglePlaceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlaceOpeningPeriods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GooglePlaceID == b.GooglePlaceID {
			bFound = true
		}
		if v.GooglePlaceID == c.GooglePlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlaceSlice{&a}
	if err = a.L.LoadGooglePlaceOpeningPeriods(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaceOpeningPeriods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlaceOpeningPeriods = nil
	if err = a.L.LoadGooglePlaceOpeningPeriods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaceOpeningPeriods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlaceToManyGooglePlacePhotoAttributions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c GooglePlacePhotoAttribution

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GooglePlaceID = a.GooglePlaceID
	c.GooglePlaceID = a.GooglePlaceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlacePhotoAttributions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GooglePlaceID == b.GooglePlaceID {
			bFound = true
		}
		if v.GooglePlaceID == c.GooglePlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlaceSlice{&a}
	if err = a.L.LoadGooglePlacePhotoAttributions(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlacePhotoAttributions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlacePhotoAttributions = nil
	if err = a.L.LoadGooglePlacePhotoAttributions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlacePhotoAttributions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlaceToManyGooglePlacePhotoReferences(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c GooglePlacePhotoReference

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GooglePlaceID = a.GooglePlaceID
	c.GooglePlaceID = a.GooglePlaceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlacePhotoReferences().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GooglePlaceID == b.GooglePlaceID {
			bFound = true
		}
		if v.GooglePlaceID == c.GooglePlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlaceSlice{&a}
	if err = a.L.LoadGooglePlacePhotoReferences(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlacePhotoReferences); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlacePhotoReferences = nil
	if err = a.L.LoadGooglePlacePhotoReferences(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlacePhotoReferences); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlaceToManyGooglePlacePhotos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c GooglePlacePhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlacePhotoDBTypes, false, googlePlacePhotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlacePhotoDBTypes, false, googlePlacePhotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GooglePlaceID = a.GooglePlaceID
	c.GooglePlaceID = a.GooglePlaceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlacePhotos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GooglePlaceID == b.GooglePlaceID {
			bFound = true
		}
		if v.GooglePlaceID == c.GooglePlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlaceSlice{&a}
	if err = a.L.LoadGooglePlacePhotos(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlacePhotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlacePhotos = nil
	if err = a.L.LoadGooglePlacePhotos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlacePhotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlaceToManyGooglePlaceReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c GooglePlaceReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceReviewDBTypes, false, googlePlaceReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GooglePlaceID = a.GooglePlaceID
	c.GooglePlaceID = a.GooglePlaceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlaceReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GooglePlaceID == b.GooglePlaceID {
			bFound = true
		}
		if v.GooglePlaceID == c.GooglePlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlaceSlice{&a}
	if err = a.L.LoadGooglePlaceReviews(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaceReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlaceReviews = nil
	if err = a.L.LoadGooglePlaceReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaceReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlaceToManyGooglePlaceTypes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c GooglePlaceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GooglePlaceID = a.GooglePlaceID
	c.GooglePlaceID = a.GooglePlaceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlaceTypes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GooglePlaceID == b.GooglePlaceID {
			bFound = true
		}
		if v.GooglePlaceID == c.GooglePlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GooglePlaceSlice{&a}
	if err = a.L.LoadGooglePlaceTypes(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaceTypes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlaceTypes = nil
	if err = a.L.LoadGooglePlaceTypes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaceTypes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGooglePlaceToManyAddOpGooglePlaceOpeningPeriods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c, d, e GooglePlaceOpeningPeriod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlaceOpeningPeriod{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlaceOpeningPeriodDBTypes, false, strmangle.SetComplement(googlePlaceOpeningPeriodPrimaryKeyColumns, googlePlaceOpeningPeriodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlaceOpeningPeriod{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlaceOpeningPeriods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GooglePlaceID != first.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, first.GooglePlaceID)
		}
		if a.GooglePlaceID != second.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, second.GooglePlaceID)
		}

		if first.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlaceOpeningPeriods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlaceOpeningPeriods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlaceOpeningPeriods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlaceToManyAddOpGooglePlacePhotoAttributions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c, d, e GooglePlacePhotoAttribution

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlacePhotoAttribution{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlacePhotoAttributionDBTypes, false, strmangle.SetComplement(googlePlacePhotoAttributionPrimaryKeyColumns, googlePlacePhotoAttributionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlacePhotoAttribution{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlacePhotoAttributions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GooglePlaceID != first.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, first.GooglePlaceID)
		}
		if a.GooglePlaceID != second.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, second.GooglePlaceID)
		}

		if first.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlacePhotoAttributions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlacePhotoAttributions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlacePhotoAttributions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlaceToManyAddOpGooglePlacePhotoReferences(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c, d, e GooglePlacePhotoReference

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlacePhotoReference{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlacePhotoReferenceDBTypes, false, strmangle.SetComplement(googlePlacePhotoReferencePrimaryKeyColumns, googlePlacePhotoReferenceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlacePhotoReference{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlacePhotoReferences(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GooglePlaceID != first.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, first.GooglePlaceID)
		}
		if a.GooglePlaceID != second.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, second.GooglePlaceID)
		}

		if first.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlacePhotoReferences[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlacePhotoReferences[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlacePhotoReferences().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlaceToManyAddOpGooglePlacePhotos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c, d, e GooglePlacePhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlacePhoto{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlacePhotoDBTypes, false, strmangle.SetComplement(googlePlacePhotoPrimaryKeyColumns, googlePlacePhotoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlacePhoto{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlacePhotos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GooglePlaceID != first.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, first.GooglePlaceID)
		}
		if a.GooglePlaceID != second.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, second.GooglePlaceID)
		}

		if first.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlacePhotos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlacePhotos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlacePhotos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlaceToManyAddOpGooglePlaceReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c, d, e GooglePlaceReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlaceReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlaceReviewDBTypes, false, strmangle.SetComplement(googlePlaceReviewPrimaryKeyColumns, googlePlaceReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlaceReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlaceReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GooglePlaceID != first.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, first.GooglePlaceID)
		}
		if a.GooglePlaceID != second.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, second.GooglePlaceID)
		}

		if first.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlaceReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlaceReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlaceReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlaceToManyAddOpGooglePlaceTypes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c, d, e GooglePlaceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlaceType{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlaceTypeDBTypes, false, strmangle.SetComplement(googlePlaceTypePrimaryKeyColumns, googlePlaceTypeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlaceType{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlaceTypes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GooglePlaceID != first.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, first.GooglePlaceID)
		}
		if a.GooglePlaceID != second.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, second.GooglePlaceID)
		}

		if first.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GooglePlace != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlaceTypes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlaceTypes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlaceTypes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGooglePlaceToOnePlaceUsingPlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GooglePlace
	var foreign Place

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Place().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Place) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GooglePlaceSlice{&local}
	if err = local.L.LoadPlace(ctx, tx, false, (*[]*GooglePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Place == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Place = nil
	if err = local.L.LoadPlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Place == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGooglePlaceToOneSetOpPlaceUsingPlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlace
	var b, c Place

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Place{&b, &c} {
		err = a.SetPlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Place != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GooglePlaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlaceID != x.ID {
			t.Error("foreign key was wrong value", a.PlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlaceID))
		reflect.Indirect(reflect.ValueOf(&a.PlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlaceID != x.ID {
			t.Error("foreign key was wrong value", a.PlaceID, x.ID)
		}
	}
}

func testGooglePlacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	googlePlaceDBTypes = map[string]string{`GooglePlaceID`: `varchar`, `PlaceID`: `char`, `Name`: `varchar`, `FormattedAddress`: `varchar`, `Vicinity`: `varchar`, `PriceLevel`: `int`, `Rating`: `float`, `UserRatingsTotal`: `int`, `Latitude`: `double`, `Longitude`: `double`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testGooglePlacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(googlePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(googlePlaceAllColumns) == len(googlePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooglePlacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(googlePlaceAllColumns) == len(googlePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlace{}
	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceDBTypes, true, googlePlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(googlePlaceAllColumns, googlePlacePrimaryKeyColumns) {
		fields = googlePlaceAllColumns
	} else {
		fields = strmangle.SetComplement(
			googlePlaceAllColumns,
			googlePlacePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooglePlaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooglePlacesUpsert(t *testing.T) {
	t.Parallel()

	if len(googlePlaceAllColumns) == len(googlePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGooglePlaceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooglePlace{}
	if err = randomize.Struct(seed, &o, googlePlaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlace: %s", err)
	}

	count, err := GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, googlePlaceDBTypes, false, googlePlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlace: %s", err)
	}

	count, err = GooglePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
