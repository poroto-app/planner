// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooglePlacePhotoAttributions(t *testing.T) {
	t.Parallel()

	query := GooglePlacePhotoAttributions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooglePlacePhotoAttributionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacePhotoAttributionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooglePlacePhotoAttributions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacePhotoAttributionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlacePhotoAttributionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlacePhotoAttributionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooglePlacePhotoAttributionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GooglePlacePhotoAttribution exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooglePlacePhotoAttributionExists to return true, but got false.")
	}
}

func testGooglePlacePhotoAttributionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	googlePlacePhotoAttributionFound, err := FindGooglePlacePhotoAttribution(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if googlePlacePhotoAttributionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooglePlacePhotoAttributionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooglePlacePhotoAttributions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooglePlacePhotoAttributionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooglePlacePhotoAttributions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooglePlacePhotoAttributionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	googlePlacePhotoAttributionOne := &GooglePlacePhotoAttribution{}
	googlePlacePhotoAttributionTwo := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, googlePlacePhotoAttributionOne, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlacePhotoAttributionTwo, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlacePhotoAttributionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlacePhotoAttributionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlacePhotoAttributions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooglePlacePhotoAttributionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	googlePlacePhotoAttributionOne := &GooglePlacePhotoAttribution{}
	googlePlacePhotoAttributionTwo := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, googlePlacePhotoAttributionOne, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlacePhotoAttributionTwo, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlacePhotoAttributionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlacePhotoAttributionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func googlePlacePhotoAttributionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func googlePlacePhotoAttributionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoAttribution) error {
	*o = GooglePlacePhotoAttribution{}
	return nil
}

func testGooglePlacePhotoAttributionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooglePlacePhotoAttribution{}
	o := &GooglePlacePhotoAttribution{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution object: %s", err)
	}

	AddGooglePlacePhotoAttributionHook(boil.BeforeInsertHook, googlePlacePhotoAttributionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionBeforeInsertHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.AfterInsertHook, googlePlacePhotoAttributionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionAfterInsertHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.AfterSelectHook, googlePlacePhotoAttributionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionAfterSelectHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.BeforeUpdateHook, googlePlacePhotoAttributionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionBeforeUpdateHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.AfterUpdateHook, googlePlacePhotoAttributionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionAfterUpdateHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.BeforeDeleteHook, googlePlacePhotoAttributionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionBeforeDeleteHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.AfterDeleteHook, googlePlacePhotoAttributionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionAfterDeleteHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.BeforeUpsertHook, googlePlacePhotoAttributionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionBeforeUpsertHooks = []GooglePlacePhotoAttributionHook{}

	AddGooglePlacePhotoAttributionHook(boil.AfterUpsertHook, googlePlacePhotoAttributionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlacePhotoAttributionAfterUpsertHooks = []GooglePlacePhotoAttributionHook{}
}

func testGooglePlacePhotoAttributionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlacePhotoAttributionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(googlePlacePhotoAttributionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlacePhotoAttributionToOneGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GooglePlacePhotoAttribution
	var foreign GooglePlacePhotoReference

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, googlePlacePhotoReferenceDBTypes, false, googlePlacePhotoReferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoReference struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PhotoReference = foreign.PhotoReference
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PhotoReferenceGooglePlacePhotoReference().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PhotoReference != foreign.PhotoReference {
		t.Errorf("want: %v, got %v", foreign.PhotoReference, check.PhotoReference)
	}

	ranAfterSelectHook := false
	AddGooglePlacePhotoReferenceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *GooglePlacePhotoReference) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GooglePlacePhotoAttributionSlice{&local}
	if err = local.L.LoadPhotoReferenceGooglePlacePhotoReference(ctx, tx, false, (*[]*GooglePlacePhotoAttribution)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PhotoReferenceGooglePlacePhotoReference == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PhotoReferenceGooglePlacePhotoReference = nil
	if err = local.L.LoadPhotoReferenceGooglePlacePhotoReference(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PhotoReferenceGooglePlacePhotoReference == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGooglePlacePhotoAttributionToOneSetOpGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlacePhotoAttribution
	var b, c GooglePlacePhotoReference

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlacePhotoAttributionDBTypes, false, strmangle.SetComplement(googlePlacePhotoAttributionPrimaryKeyColumns, googlePlacePhotoAttributionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, googlePlacePhotoReferenceDBTypes, false, strmangle.SetComplement(googlePlacePhotoReferencePrimaryKeyColumns, googlePlacePhotoReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlacePhotoReferenceDBTypes, false, strmangle.SetComplement(googlePlacePhotoReferencePrimaryKeyColumns, googlePlacePhotoReferenceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GooglePlacePhotoReference{&b, &c} {
		err = a.SetPhotoReferenceGooglePlacePhotoReference(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PhotoReferenceGooglePlacePhotoReference != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PhotoReferenceGooglePlacePhotoAttributions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PhotoReference != x.PhotoReference {
			t.Error("foreign key was wrong value", a.PhotoReference)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PhotoReference))
		reflect.Indirect(reflect.ValueOf(&a.PhotoReference)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PhotoReference != x.PhotoReference {
			t.Error("foreign key was wrong value", a.PhotoReference, x.PhotoReference)
		}
	}
}

func testGooglePlacePhotoAttributionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlacePhotoAttributionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlacePhotoAttributionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlacePhotoAttributionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlacePhotoAttributions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	googlePlacePhotoAttributionDBTypes = map[string]string{`ID`: `char`, `PhotoReference`: `varchar`, `HTMLAttribution`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                                  = bytes.MinRead
)

func testGooglePlacePhotoAttributionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(googlePlacePhotoAttributionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(googlePlacePhotoAttributionAllColumns) == len(googlePlacePhotoAttributionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooglePlacePhotoAttributionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(googlePlacePhotoAttributionAllColumns) == len(googlePlacePhotoAttributionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlacePhotoAttributionDBTypes, true, googlePlacePhotoAttributionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(googlePlacePhotoAttributionAllColumns, googlePlacePhotoAttributionPrimaryKeyColumns) {
		fields = googlePlacePhotoAttributionAllColumns
	} else {
		fields = strmangle.SetComplement(
			googlePlacePhotoAttributionAllColumns,
			googlePlacePhotoAttributionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooglePlacePhotoAttributionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooglePlacePhotoAttributionsUpsert(t *testing.T) {
	t.Parallel()

	if len(googlePlacePhotoAttributionAllColumns) == len(googlePlacePhotoAttributionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGooglePlacePhotoAttributionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooglePlacePhotoAttribution{}
	if err = randomize.Struct(seed, &o, googlePlacePhotoAttributionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlacePhotoAttribution: %s", err)
	}

	count, err := GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, googlePlacePhotoAttributionDBTypes, false, googlePlacePhotoAttributionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlacePhotoAttribution struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlacePhotoAttribution: %s", err)
	}

	count, err = GooglePlacePhotoAttributions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
