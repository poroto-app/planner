// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlanCandidateSetSearchedPlaces(t *testing.T) {
	t.Parallel()

	query := PlanCandidateSetSearchedPlaces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlanCandidateSetSearchedPlacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidateSetSearchedPlacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlanCandidateSetSearchedPlaces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidateSetSearchedPlacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanCandidateSetSearchedPlaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidateSetSearchedPlacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlanCandidateSetSearchedPlaceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PlanCandidateSetSearchedPlace exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlanCandidateSetSearchedPlaceExists to return true, but got false.")
	}
}

func testPlanCandidateSetSearchedPlacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	planCandidateSetSearchedPlaceFound, err := FindPlanCandidateSetSearchedPlace(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if planCandidateSetSearchedPlaceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlanCandidateSetSearchedPlacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlanCandidateSetSearchedPlaces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlanCandidateSetSearchedPlacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlanCandidateSetSearchedPlaces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlanCandidateSetSearchedPlacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	planCandidateSetSearchedPlaceOne := &PlanCandidateSetSearchedPlace{}
	planCandidateSetSearchedPlaceTwo := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, planCandidateSetSearchedPlaceOne, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}
	if err = randomize.Struct(seed, planCandidateSetSearchedPlaceTwo, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planCandidateSetSearchedPlaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planCandidateSetSearchedPlaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlanCandidateSetSearchedPlaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlanCandidateSetSearchedPlacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	planCandidateSetSearchedPlaceOne := &PlanCandidateSetSearchedPlace{}
	planCandidateSetSearchedPlaceTwo := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, planCandidateSetSearchedPlaceOne, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}
	if err = randomize.Struct(seed, planCandidateSetSearchedPlaceTwo, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planCandidateSetSearchedPlaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planCandidateSetSearchedPlaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func planCandidateSetSearchedPlaceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func planCandidateSetSearchedPlaceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSetSearchedPlace) error {
	*o = PlanCandidateSetSearchedPlace{}
	return nil
}

func testPlanCandidateSetSearchedPlacesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PlanCandidateSetSearchedPlace{}
	o := &PlanCandidateSetSearchedPlace{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace object: %s", err)
	}

	AddPlanCandidateSetSearchedPlaceHook(boil.BeforeInsertHook, planCandidateSetSearchedPlaceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceBeforeInsertHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.AfterInsertHook, planCandidateSetSearchedPlaceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceAfterInsertHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.AfterSelectHook, planCandidateSetSearchedPlaceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceAfterSelectHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.BeforeUpdateHook, planCandidateSetSearchedPlaceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceBeforeUpdateHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.AfterUpdateHook, planCandidateSetSearchedPlaceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceAfterUpdateHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.BeforeDeleteHook, planCandidateSetSearchedPlaceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceBeforeDeleteHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.AfterDeleteHook, planCandidateSetSearchedPlaceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceAfterDeleteHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.BeforeUpsertHook, planCandidateSetSearchedPlaceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceBeforeUpsertHooks = []PlanCandidateSetSearchedPlaceHook{}

	AddPlanCandidateSetSearchedPlaceHook(boil.AfterUpsertHook, planCandidateSetSearchedPlaceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetSearchedPlaceAfterUpsertHooks = []PlanCandidateSetSearchedPlaceHook{}
}

func testPlanCandidateSetSearchedPlacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanCandidateSetSearchedPlacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(planCandidateSetSearchedPlaceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanCandidateSetSearchedPlaceToOnePlanCandidateSetUsingPlanCandidateSet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlanCandidateSetSearchedPlace
	var foreign PlanCandidateSet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, planCandidateSetDBTypes, false, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlanCandidateSetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PlanCandidateSet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPlanCandidateSetHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlanCandidateSetSearchedPlaceSlice{&local}
	if err = local.L.LoadPlanCandidateSet(ctx, tx, false, (*[]*PlanCandidateSetSearchedPlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlanCandidateSet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PlanCandidateSet = nil
	if err = local.L.LoadPlanCandidateSet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlanCandidateSet == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlanCandidateSetSearchedPlaceToOnePlaceUsingPlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlanCandidateSetSearchedPlace
	var foreign Place

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Place().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Place) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlanCandidateSetSearchedPlaceSlice{&local}
	if err = local.L.LoadPlace(ctx, tx, false, (*[]*PlanCandidateSetSearchedPlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Place == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Place = nil
	if err = local.L.LoadPlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Place == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlanCandidateSetSearchedPlaceToOneSetOpPlanCandidateSetUsingPlanCandidateSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSetSearchedPlace
	var b, c PlanCandidateSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetSearchedPlaceDBTypes, false, strmangle.SetComplement(planCandidateSetSearchedPlacePrimaryKeyColumns, planCandidateSetSearchedPlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, planCandidateSetDBTypes, false, strmangle.SetComplement(planCandidateSetPrimaryKeyColumns, planCandidateSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidateSetDBTypes, false, strmangle.SetComplement(planCandidateSetPrimaryKeyColumns, planCandidateSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PlanCandidateSet{&b, &c} {
		err = a.SetPlanCandidateSet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PlanCandidateSet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlanCandidateSetSearchedPlaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlanCandidateSetID != x.ID {
			t.Error("foreign key was wrong value", a.PlanCandidateSetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlanCandidateSetID))
		reflect.Indirect(reflect.ValueOf(&a.PlanCandidateSetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlanCandidateSetID != x.ID {
			t.Error("foreign key was wrong value", a.PlanCandidateSetID, x.ID)
		}
	}
}
func testPlanCandidateSetSearchedPlaceToOneSetOpPlaceUsingPlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSetSearchedPlace
	var b, c Place

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetSearchedPlaceDBTypes, false, strmangle.SetComplement(planCandidateSetSearchedPlacePrimaryKeyColumns, planCandidateSetSearchedPlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Place{&b, &c} {
		err = a.SetPlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Place != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlanCandidateSetSearchedPlaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlaceID != x.ID {
			t.Error("foreign key was wrong value", a.PlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlaceID))
		reflect.Indirect(reflect.ValueOf(&a.PlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlaceID != x.ID {
			t.Error("foreign key was wrong value", a.PlaceID, x.ID)
		}
	}
}

func testPlanCandidateSetSearchedPlacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlanCandidateSetSearchedPlacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanCandidateSetSearchedPlaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlanCandidateSetSearchedPlacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlanCandidateSetSearchedPlaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	planCandidateSetSearchedPlaceDBTypes = map[string]string{`ID`: `char`, `PlanCandidateSetID`: `char`, `PlaceID`: `char`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                                    = bytes.MinRead
)

func testPlanCandidateSetSearchedPlacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(planCandidateSetSearchedPlacePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(planCandidateSetSearchedPlaceAllColumns) == len(planCandidateSetSearchedPlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlanCandidateSetSearchedPlacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(planCandidateSetSearchedPlaceAllColumns) == len(planCandidateSetSearchedPlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planCandidateSetSearchedPlaceDBTypes, true, planCandidateSetSearchedPlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(planCandidateSetSearchedPlaceAllColumns, planCandidateSetSearchedPlacePrimaryKeyColumns) {
		fields = planCandidateSetSearchedPlaceAllColumns
	} else {
		fields = strmangle.SetComplement(
			planCandidateSetSearchedPlaceAllColumns,
			planCandidateSetSearchedPlacePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlanCandidateSetSearchedPlaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlanCandidateSetSearchedPlacesUpsert(t *testing.T) {
	t.Parallel()

	if len(planCandidateSetSearchedPlaceAllColumns) == len(planCandidateSetSearchedPlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlanCandidateSetSearchedPlaceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlanCandidateSetSearchedPlace{}
	if err = randomize.Struct(seed, &o, planCandidateSetSearchedPlaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlanCandidateSetSearchedPlace: %s", err)
	}

	count, err := PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSetSearchedPlace struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlanCandidateSetSearchedPlace: %s", err)
	}

	count, err = PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
