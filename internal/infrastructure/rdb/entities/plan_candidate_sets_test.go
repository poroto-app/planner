// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlanCandidateSets(t *testing.T) {
	t.Parallel()

	query := PlanCandidateSets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlanCandidateSetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidateSetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlanCandidateSets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidateSetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanCandidateSetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidateSetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlanCandidateSetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PlanCandidateSet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlanCandidateSetExists to return true, but got false.")
	}
}

func testPlanCandidateSetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	planCandidateSetFound, err := FindPlanCandidateSet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if planCandidateSetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlanCandidateSetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlanCandidateSets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlanCandidateSetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlanCandidateSets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlanCandidateSetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	planCandidateSetOne := &PlanCandidateSet{}
	planCandidateSetTwo := &PlanCandidateSet{}
	if err = randomize.Struct(seed, planCandidateSetOne, planCandidateSetDBTypes, false, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}
	if err = randomize.Struct(seed, planCandidateSetTwo, planCandidateSetDBTypes, false, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planCandidateSetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planCandidateSetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlanCandidateSets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlanCandidateSetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	planCandidateSetOne := &PlanCandidateSet{}
	planCandidateSetTwo := &PlanCandidateSet{}
	if err = randomize.Struct(seed, planCandidateSetOne, planCandidateSetDBTypes, false, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}
	if err = randomize.Struct(seed, planCandidateSetTwo, planCandidateSetDBTypes, false, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planCandidateSetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planCandidateSetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func planCandidateSetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func planCandidateSetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidateSet) error {
	*o = PlanCandidateSet{}
	return nil
}

func testPlanCandidateSetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PlanCandidateSet{}
	o := &PlanCandidateSet{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet object: %s", err)
	}

	AddPlanCandidateSetHook(boil.BeforeInsertHook, planCandidateSetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetBeforeInsertHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.AfterInsertHook, planCandidateSetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetAfterInsertHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.AfterSelectHook, planCandidateSetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	planCandidateSetAfterSelectHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.BeforeUpdateHook, planCandidateSetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	planCandidateSetBeforeUpdateHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.AfterUpdateHook, planCandidateSetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	planCandidateSetAfterUpdateHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.BeforeDeleteHook, planCandidateSetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	planCandidateSetBeforeDeleteHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.AfterDeleteHook, planCandidateSetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	planCandidateSetAfterDeleteHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.BeforeUpsertHook, planCandidateSetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetBeforeUpsertHooks = []PlanCandidateSetHook{}

	AddPlanCandidateSetHook(boil.AfterUpsertHook, planCandidateSetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	planCandidateSetAfterUpsertHooks = []PlanCandidateSetHook{}
}

func testPlanCandidateSetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanCandidateSetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(planCandidateSetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanCandidateSetToManyPlanCandidatePlaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c PlanCandidatePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlanCandidateSetID = a.ID
	c.PlanCandidateSetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlanCandidatePlaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlanCandidateSetID == b.PlanCandidateSetID {
			bFound = true
		}
		if v.PlanCandidateSetID == c.PlanCandidateSetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlanCandidateSetSlice{&a}
	if err = a.L.LoadPlanCandidatePlaces(ctx, tx, false, (*[]*PlanCandidateSet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidatePlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlanCandidatePlaces = nil
	if err = a.L.LoadPlanCandidatePlaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidatePlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlanCandidateSetToManyPlanCandidateSetCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c PlanCandidateSetCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, planCandidateSetCategoryDBTypes, false, planCandidateSetCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidateSetCategoryDBTypes, false, planCandidateSetCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlanCandidateSetID = a.ID
	c.PlanCandidateSetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlanCandidateSetCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlanCandidateSetID == b.PlanCandidateSetID {
			bFound = true
		}
		if v.PlanCandidateSetID == c.PlanCandidateSetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlanCandidateSetSlice{&a}
	if err = a.L.LoadPlanCandidateSetCategories(ctx, tx, false, (*[]*PlanCandidateSet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidateSetCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlanCandidateSetCategories = nil
	if err = a.L.LoadPlanCandidateSetCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidateSetCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlanCandidateSetToManyPlanCandidateSetSearchedPlaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c PlanCandidateSetSearchedPlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlanCandidateSetID = a.ID
	c.PlanCandidateSetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlanCandidateSetSearchedPlaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlanCandidateSetID == b.PlanCandidateSetID {
			bFound = true
		}
		if v.PlanCandidateSetID == c.PlanCandidateSetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlanCandidateSetSlice{&a}
	if err = a.L.LoadPlanCandidateSetSearchedPlaces(ctx, tx, false, (*[]*PlanCandidateSet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidateSetSearchedPlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlanCandidateSetSearchedPlaces = nil
	if err = a.L.LoadPlanCandidateSetSearchedPlaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidateSetSearchedPlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlanCandidateSetToManyPlanCandidates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c PlanCandidate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, planCandidateDBTypes, false, planCandidateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidateDBTypes, false, planCandidateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlanCandidateSetID = a.ID
	c.PlanCandidateSetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlanCandidates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlanCandidateSetID == b.PlanCandidateSetID {
			bFound = true
		}
		if v.PlanCandidateSetID == c.PlanCandidateSetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlanCandidateSetSlice{&a}
	if err = a.L.LoadPlanCandidates(ctx, tx, false, (*[]*PlanCandidateSet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlanCandidates = nil
	if err = a.L.LoadPlanCandidates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlanCandidateSetToManyAddOpPlanCandidatePlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c, d, e PlanCandidatePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, false, strmangle.SetComplement(planCandidateSetPrimaryKeyColumns, planCandidateSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidatePlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidatePlaceDBTypes, false, strmangle.SetComplement(planCandidatePlacePrimaryKeyColumns, planCandidatePlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlanCandidatePlace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlanCandidatePlaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, first.PlanCandidateSetID)
		}
		if a.ID != second.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, second.PlanCandidateSetID)
		}

		if first.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlanCandidatePlaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlanCandidatePlaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlanCandidatePlaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlanCandidateSetToManyAddOpPlanCandidateSetCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c, d, e PlanCandidateSetCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, false, strmangle.SetComplement(planCandidateSetPrimaryKeyColumns, planCandidateSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidateSetCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidateSetCategoryDBTypes, false, strmangle.SetComplement(planCandidateSetCategoryPrimaryKeyColumns, planCandidateSetCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlanCandidateSetCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlanCandidateSetCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, first.PlanCandidateSetID)
		}
		if a.ID != second.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, second.PlanCandidateSetID)
		}

		if first.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlanCandidateSetCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlanCandidateSetCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlanCandidateSetCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlanCandidateSetToManyAddOpPlanCandidateSetSearchedPlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c, d, e PlanCandidateSetSearchedPlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, false, strmangle.SetComplement(planCandidateSetPrimaryKeyColumns, planCandidateSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidateSetSearchedPlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidateSetSearchedPlaceDBTypes, false, strmangle.SetComplement(planCandidateSetSearchedPlacePrimaryKeyColumns, planCandidateSetSearchedPlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlanCandidateSetSearchedPlace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlanCandidateSetSearchedPlaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, first.PlanCandidateSetID)
		}
		if a.ID != second.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, second.PlanCandidateSetID)
		}

		if first.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlanCandidateSetSearchedPlaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlanCandidateSetSearchedPlaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlanCandidateSetSearchedPlaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlanCandidateSetToManyAddOpPlanCandidates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidateSet
	var b, c, d, e PlanCandidate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidateSetDBTypes, false, strmangle.SetComplement(planCandidateSetPrimaryKeyColumns, planCandidateSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidateDBTypes, false, strmangle.SetComplement(planCandidatePrimaryKeyColumns, planCandidateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlanCandidate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlanCandidates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, first.PlanCandidateSetID)
		}
		if a.ID != second.PlanCandidateSetID {
			t.Error("foreign key was wrong value", a.ID, second.PlanCandidateSetID)
		}

		if first.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PlanCandidateSet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlanCandidates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlanCandidates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlanCandidates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlanCandidateSetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlanCandidateSetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanCandidateSetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlanCandidateSetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlanCandidateSets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	planCandidateSetDBTypes = map[string]string{`ID`: `char`, `LatitudeStart`: `float`, `LongitudeStart`: `float`, `CreatedFromCurrentLocation`: `tinyint`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                       = bytes.MinRead
)

func testPlanCandidateSetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(planCandidateSetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(planCandidateSetAllColumns) == len(planCandidateSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlanCandidateSetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(planCandidateSetAllColumns) == len(planCandidateSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidateSet{}
	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planCandidateSetDBTypes, true, planCandidateSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(planCandidateSetAllColumns, planCandidateSetPrimaryKeyColumns) {
		fields = planCandidateSetAllColumns
	} else {
		fields = strmangle.SetComplement(
			planCandidateSetAllColumns,
			planCandidateSetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlanCandidateSetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlanCandidateSetsUpsert(t *testing.T) {
	t.Parallel()

	if len(planCandidateSetAllColumns) == len(planCandidateSetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlanCandidateSetUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlanCandidateSet{}
	if err = randomize.Struct(seed, &o, planCandidateSetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlanCandidateSet: %s", err)
	}

	count, err := PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, planCandidateSetDBTypes, false, planCandidateSetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidateSet struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlanCandidateSet: %s", err)
	}

	count, err = PlanCandidateSets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
