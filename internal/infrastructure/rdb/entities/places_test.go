// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlaces(t *testing.T) {
	t.Parallel()

	query := Places()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Places().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlaceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Place exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlaceExists to return true, but got false.")
	}
}

func testPlacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	placeFound, err := FindPlace(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if placeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Places().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Places().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	placeOne := &Place{}
	placeTwo := &Place{}
	if err = randomize.Struct(seed, placeOne, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}
	if err = randomize.Struct(seed, placeTwo, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = placeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = placeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Places().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	placeOne := &Place{}
	placeTwo := &Place{}
	if err = randomize.Struct(seed, placeOne, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}
	if err = randomize.Struct(seed, placeTwo, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = placeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = placeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func placeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func placeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Place) error {
	*o = Place{}
	return nil
}

func testPlacesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Place{}
	o := &Place{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, placeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Place object: %s", err)
	}

	AddPlaceHook(boil.BeforeInsertHook, placeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	placeBeforeInsertHooks = []PlaceHook{}

	AddPlaceHook(boil.AfterInsertHook, placeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	placeAfterInsertHooks = []PlaceHook{}

	AddPlaceHook(boil.AfterSelectHook, placeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	placeAfterSelectHooks = []PlaceHook{}

	AddPlaceHook(boil.BeforeUpdateHook, placeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	placeBeforeUpdateHooks = []PlaceHook{}

	AddPlaceHook(boil.AfterUpdateHook, placeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	placeAfterUpdateHooks = []PlaceHook{}

	AddPlaceHook(boil.BeforeDeleteHook, placeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	placeBeforeDeleteHooks = []PlaceHook{}

	AddPlaceHook(boil.AfterDeleteHook, placeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	placeAfterDeleteHooks = []PlaceHook{}

	AddPlaceHook(boil.BeforeUpsertHook, placeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	placeBeforeUpsertHooks = []PlaceHook{}

	AddPlaceHook(boil.AfterUpsertHook, placeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	placeAfterUpsertHooks = []PlaceHook{}
}

func testPlacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(placeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaceToManyGooglePlaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c GooglePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlaceID = a.ID
	c.PlaceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GooglePlaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlaceID == b.PlaceID {
			bFound = true
		}
		if v.PlaceID == c.PlaceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlaceSlice{&a}
	if err = a.L.LoadGooglePlaces(ctx, tx, false, (*[]*Place)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GooglePlaces = nil
	if err = a.L.LoadGooglePlaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GooglePlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlaceToManyPlanCandidatePlaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c PlanCandidatePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PlaceID, a.ID)
	queries.Assign(&c.PlaceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlanCandidatePlaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PlaceID, b.PlaceID) {
			bFound = true
		}
		if queries.Equal(v.PlaceID, c.PlaceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlaceSlice{&a}
	if err = a.L.LoadPlanCandidatePlaces(ctx, tx, false, (*[]*Place)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidatePlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlanCandidatePlaces = nil
	if err = a.L.LoadPlanCandidatePlaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidatePlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlaceToManyPlanCandidateSetSearchedPlaces(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c PlanCandidateSetSearchedPlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidateSetSearchedPlaceDBTypes, false, planCandidateSetSearchedPlaceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PlaceID, a.ID)
	queries.Assign(&c.PlaceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlanCandidateSetSearchedPlaces().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PlaceID, b.PlaceID) {
			bFound = true
		}
		if queries.Equal(v.PlaceID, c.PlaceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlaceSlice{&a}
	if err = a.L.LoadPlanCandidateSetSearchedPlaces(ctx, tx, false, (*[]*Place)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidateSetSearchedPlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlanCandidateSetSearchedPlaces = nil
	if err = a.L.LoadPlanCandidateSetSearchedPlaces(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlanCandidateSetSearchedPlaces); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlaceToManyAddOpGooglePlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e GooglePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GooglePlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GooglePlace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGooglePlaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlaceID {
			t.Error("foreign key was wrong value", a.ID, first.PlaceID)
		}
		if a.ID != second.PlaceID {
			t.Error("foreign key was wrong value", a.ID, second.PlaceID)
		}

		if first.R.Place != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Place != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GooglePlaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GooglePlaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GooglePlaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlaceToManyAddOpPlanCandidatePlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e PlanCandidatePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidatePlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidatePlaceDBTypes, false, strmangle.SetComplement(planCandidatePlacePrimaryKeyColumns, planCandidatePlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlanCandidatePlace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlanCandidatePlaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PlaceID) {
			t.Error("foreign key was wrong value", a.ID, first.PlaceID)
		}
		if !queries.Equal(a.ID, second.PlaceID) {
			t.Error("foreign key was wrong value", a.ID, second.PlaceID)
		}

		if first.R.Place != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Place != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlanCandidatePlaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlanCandidatePlaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlanCandidatePlaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlaceToManySetOpPlanCandidatePlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e PlanCandidatePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidatePlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidatePlaceDBTypes, false, strmangle.SetComplement(planCandidatePlacePrimaryKeyColumns, planCandidatePlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlanCandidatePlaces(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlanCandidatePlaces(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlaceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PlaceID) {
		t.Error("foreign key was wrong value", a.ID, d.PlaceID)
	}
	if !queries.Equal(a.ID, e.PlaceID) {
		t.Error("foreign key was wrong value", a.ID, e.PlaceID)
	}

	if b.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Place != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Place != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PlanCandidatePlaces[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PlanCandidatePlaces[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlaceToManyRemoveOpPlanCandidatePlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e PlanCandidatePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidatePlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidatePlaceDBTypes, false, strmangle.SetComplement(planCandidatePlacePrimaryKeyColumns, planCandidatePlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlanCandidatePlaces(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlanCandidatePlaces(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlaceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Place != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Place != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PlanCandidatePlaces) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PlanCandidatePlaces[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PlanCandidatePlaces[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlaceToManyAddOpPlanCandidateSetSearchedPlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e PlanCandidateSetSearchedPlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidateSetSearchedPlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidateSetSearchedPlaceDBTypes, false, strmangle.SetComplement(planCandidateSetSearchedPlacePrimaryKeyColumns, planCandidateSetSearchedPlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlanCandidateSetSearchedPlace{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlanCandidateSetSearchedPlaces(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PlaceID) {
			t.Error("foreign key was wrong value", a.ID, first.PlaceID)
		}
		if !queries.Equal(a.ID, second.PlaceID) {
			t.Error("foreign key was wrong value", a.ID, second.PlaceID)
		}

		if first.R.Place != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Place != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlanCandidateSetSearchedPlaces[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlanCandidateSetSearchedPlaces[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlanCandidateSetSearchedPlaces().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlaceToManySetOpPlanCandidateSetSearchedPlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e PlanCandidateSetSearchedPlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidateSetSearchedPlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidateSetSearchedPlaceDBTypes, false, strmangle.SetComplement(planCandidateSetSearchedPlacePrimaryKeyColumns, planCandidateSetSearchedPlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlanCandidateSetSearchedPlaces(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlanCandidateSetSearchedPlaces(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlaceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PlaceID) {
		t.Error("foreign key was wrong value", a.ID, d.PlaceID)
	}
	if !queries.Equal(a.ID, e.PlaceID) {
		t.Error("foreign key was wrong value", a.ID, e.PlaceID)
	}

	if b.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Place != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Place != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PlanCandidateSetSearchedPlaces[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PlanCandidateSetSearchedPlaces[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlaceToManyRemoveOpPlanCandidateSetSearchedPlaces(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Place
	var b, c, d, e PlanCandidateSetSearchedPlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlanCandidateSetSearchedPlace{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, planCandidateSetSearchedPlaceDBTypes, false, strmangle.SetComplement(planCandidateSetSearchedPlacePrimaryKeyColumns, planCandidateSetSearchedPlaceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlanCandidateSetSearchedPlaces(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlanCandidateSetSearchedPlaces(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlanCandidateSetSearchedPlaces().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlaceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlaceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Place != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Place != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Place != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PlanCandidateSetSearchedPlaces) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PlanCandidateSetSearchedPlaces[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PlanCandidateSetSearchedPlaces[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Places().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	placeDBTypes = map[string]string{`ID`: `char`, `Name`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_            = bytes.MinRead
)

func testPlacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(placePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(placeAllColumns) == len(placePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, placeDBTypes, true, placePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(placeAllColumns) == len(placePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Place{}
	if err = randomize.Struct(seed, o, placeDBTypes, true, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, placeDBTypes, true, placePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(placeAllColumns, placePrimaryKeyColumns) {
		fields = placeAllColumns
	} else {
		fields = strmangle.SetComplement(
			placeAllColumns,
			placePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlacesUpsert(t *testing.T) {
	t.Parallel()

	if len(placeAllColumns) == len(placePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlaceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Place{}
	if err = randomize.Struct(seed, &o, placeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Place: %s", err)
	}

	count, err := Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, placeDBTypes, false, placePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Place: %s", err)
	}

	count, err = Places().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
