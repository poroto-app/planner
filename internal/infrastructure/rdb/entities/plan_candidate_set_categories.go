// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlanCandidateSetCategory is an object representing the database table.
type PlanCandidateSetCategory struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlanCandidateSetID null.String `boil:"plan_candidate_set_id" json:"plan_candidate_set_id,omitempty" toml:"plan_candidate_set_id" yaml:"plan_candidate_set_id,omitempty"`
	Category           null.String `boil:"category" json:"category,omitempty" toml:"category" yaml:"category,omitempty"`
	IsSelected         null.Bool   `boil:"is_selected" json:"is_selected,omitempty" toml:"is_selected" yaml:"is_selected,omitempty"`
	CreatedAt          null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *planCandidateSetCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planCandidateSetCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanCandidateSetCategoryColumns = struct {
	ID                 string
	PlanCandidateSetID string
	Category           string
	IsSelected         string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	PlanCandidateSetID: "plan_candidate_set_id",
	Category:           "category",
	IsSelected:         "is_selected",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var PlanCandidateSetCategoryTableColumns = struct {
	ID                 string
	PlanCandidateSetID string
	Category           string
	IsSelected         string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "plan_candidate_set_categories.id",
	PlanCandidateSetID: "plan_candidate_set_categories.plan_candidate_set_id",
	Category:           "plan_candidate_set_categories.category",
	IsSelected:         "plan_candidate_set_categories.is_selected",
	CreatedAt:          "plan_candidate_set_categories.created_at",
	UpdatedAt:          "plan_candidate_set_categories.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PlanCandidateSetCategoryWhere = struct {
	ID                 whereHelperstring
	PlanCandidateSetID whereHelpernull_String
	Category           whereHelpernull_String
	IsSelected         whereHelpernull_Bool
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "`plan_candidate_set_categories`.`id`"},
	PlanCandidateSetID: whereHelpernull_String{field: "`plan_candidate_set_categories`.`plan_candidate_set_id`"},
	Category:           whereHelpernull_String{field: "`plan_candidate_set_categories`.`category`"},
	IsSelected:         whereHelpernull_Bool{field: "`plan_candidate_set_categories`.`is_selected`"},
	CreatedAt:          whereHelpernull_Time{field: "`plan_candidate_set_categories`.`created_at`"},
	UpdatedAt:          whereHelpernull_Time{field: "`plan_candidate_set_categories`.`updated_at`"},
}

// PlanCandidateSetCategoryRels is where relationship names are stored.
var PlanCandidateSetCategoryRels = struct {
	PlanCandidateSet string
}{
	PlanCandidateSet: "PlanCandidateSet",
}

// planCandidateSetCategoryR is where relationships are stored.
type planCandidateSetCategoryR struct {
	PlanCandidateSet *PlanCandidateSet `boil:"PlanCandidateSet" json:"PlanCandidateSet" toml:"PlanCandidateSet" yaml:"PlanCandidateSet"`
}

// NewStruct creates a new relationship struct
func (*planCandidateSetCategoryR) NewStruct() *planCandidateSetCategoryR {
	return &planCandidateSetCategoryR{}
}

func (r *planCandidateSetCategoryR) GetPlanCandidateSet() *PlanCandidateSet {
	if r == nil {
		return nil
	}
	return r.PlanCandidateSet
}

// planCandidateSetCategoryL is where Load methods for each relationship are stored.
type planCandidateSetCategoryL struct{}

var (
	planCandidateSetCategoryAllColumns            = []string{"id", "plan_candidate_set_id", "category", "is_selected", "created_at", "updated_at"}
	planCandidateSetCategoryColumnsWithoutDefault = []string{"id", "plan_candidate_set_id", "category", "is_selected"}
	planCandidateSetCategoryColumnsWithDefault    = []string{"created_at", "updated_at"}
	planCandidateSetCategoryPrimaryKeyColumns     = []string{"id"}
	planCandidateSetCategoryGeneratedColumns      = []string{}
)

type (
	// PlanCandidateSetCategorySlice is an alias for a slice of pointers to PlanCandidateSetCategory.
	// This should almost always be used instead of []PlanCandidateSetCategory.
	PlanCandidateSetCategorySlice []*PlanCandidateSetCategory
	// PlanCandidateSetCategoryHook is the signature for custom PlanCandidateSetCategory hook methods
	PlanCandidateSetCategoryHook func(context.Context, boil.ContextExecutor, *PlanCandidateSetCategory) error

	planCandidateSetCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planCandidateSetCategoryType                 = reflect.TypeOf(&PlanCandidateSetCategory{})
	planCandidateSetCategoryMapping              = queries.MakeStructMapping(planCandidateSetCategoryType)
	planCandidateSetCategoryPrimaryKeyMapping, _ = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, planCandidateSetCategoryPrimaryKeyColumns)
	planCandidateSetCategoryInsertCacheMut       sync.RWMutex
	planCandidateSetCategoryInsertCache          = make(map[string]insertCache)
	planCandidateSetCategoryUpdateCacheMut       sync.RWMutex
	planCandidateSetCategoryUpdateCache          = make(map[string]updateCache)
	planCandidateSetCategoryUpsertCacheMut       sync.RWMutex
	planCandidateSetCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planCandidateSetCategoryAfterSelectHooks []PlanCandidateSetCategoryHook

var planCandidateSetCategoryBeforeInsertHooks []PlanCandidateSetCategoryHook
var planCandidateSetCategoryAfterInsertHooks []PlanCandidateSetCategoryHook

var planCandidateSetCategoryBeforeUpdateHooks []PlanCandidateSetCategoryHook
var planCandidateSetCategoryAfterUpdateHooks []PlanCandidateSetCategoryHook

var planCandidateSetCategoryBeforeDeleteHooks []PlanCandidateSetCategoryHook
var planCandidateSetCategoryAfterDeleteHooks []PlanCandidateSetCategoryHook

var planCandidateSetCategoryBeforeUpsertHooks []PlanCandidateSetCategoryHook
var planCandidateSetCategoryAfterUpsertHooks []PlanCandidateSetCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlanCandidateSetCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlanCandidateSetCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlanCandidateSetCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlanCandidateSetCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlanCandidateSetCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlanCandidateSetCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlanCandidateSetCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlanCandidateSetCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlanCandidateSetCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanCandidateSetCategoryHook registers your hook function for all future operations.
func AddPlanCandidateSetCategoryHook(hookPoint boil.HookPoint, planCandidateSetCategoryHook PlanCandidateSetCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planCandidateSetCategoryAfterSelectHooks = append(planCandidateSetCategoryAfterSelectHooks, planCandidateSetCategoryHook)
	case boil.BeforeInsertHook:
		planCandidateSetCategoryBeforeInsertHooks = append(planCandidateSetCategoryBeforeInsertHooks, planCandidateSetCategoryHook)
	case boil.AfterInsertHook:
		planCandidateSetCategoryAfterInsertHooks = append(planCandidateSetCategoryAfterInsertHooks, planCandidateSetCategoryHook)
	case boil.BeforeUpdateHook:
		planCandidateSetCategoryBeforeUpdateHooks = append(planCandidateSetCategoryBeforeUpdateHooks, planCandidateSetCategoryHook)
	case boil.AfterUpdateHook:
		planCandidateSetCategoryAfterUpdateHooks = append(planCandidateSetCategoryAfterUpdateHooks, planCandidateSetCategoryHook)
	case boil.BeforeDeleteHook:
		planCandidateSetCategoryBeforeDeleteHooks = append(planCandidateSetCategoryBeforeDeleteHooks, planCandidateSetCategoryHook)
	case boil.AfterDeleteHook:
		planCandidateSetCategoryAfterDeleteHooks = append(planCandidateSetCategoryAfterDeleteHooks, planCandidateSetCategoryHook)
	case boil.BeforeUpsertHook:
		planCandidateSetCategoryBeforeUpsertHooks = append(planCandidateSetCategoryBeforeUpsertHooks, planCandidateSetCategoryHook)
	case boil.AfterUpsertHook:
		planCandidateSetCategoryAfterUpsertHooks = append(planCandidateSetCategoryAfterUpsertHooks, planCandidateSetCategoryHook)
	}
}

// One returns a single planCandidateSetCategory record from the query.
func (q planCandidateSetCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlanCandidateSetCategory, error) {
	o := &PlanCandidateSetCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for plan_candidate_set_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlanCandidateSetCategory records from the query.
func (q planCandidateSetCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanCandidateSetCategorySlice, error) {
	var o []*PlanCandidateSetCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to PlanCandidateSetCategory slice")
	}

	if len(planCandidateSetCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlanCandidateSetCategory records in the query.
func (q planCandidateSetCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count plan_candidate_set_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planCandidateSetCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if plan_candidate_set_categories exists")
	}

	return count > 0, nil
}

// PlanCandidateSet pointed to by the foreign key.
func (o *PlanCandidateSetCategory) PlanCandidateSet(mods ...qm.QueryMod) planCandidateSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlanCandidateSetID),
	}

	queryMods = append(queryMods, mods...)

	return PlanCandidateSets(queryMods...)
}

// LoadPlanCandidateSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planCandidateSetCategoryL) LoadPlanCandidateSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSetCategory interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSetCategory
	var object *PlanCandidateSetCategory

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSetCategory.(*PlanCandidateSetCategory)
		if !ok {
			object = new(PlanCandidateSetCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSetCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSetCategory))
			}
		}
	} else {
		s, ok := maybePlanCandidateSetCategory.(*[]*PlanCandidateSetCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSetCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSetCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetCategoryR{}
		}
		if !queries.IsNil(object.PlanCandidateSetID) {
			args = append(args, object.PlanCandidateSetID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlanCandidateSetID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlanCandidateSetID) {
				args = append(args, obj.PlanCandidateSetID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`plan_candidate_sets`),
		qm.WhereIn(`plan_candidate_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlanCandidateSet")
	}

	var resultSlice []*PlanCandidateSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlanCandidateSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plan_candidate_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_sets")
	}

	if len(planCandidateSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlanCandidateSet = foreign
		if foreign.R == nil {
			foreign.R = &planCandidateSetR{}
		}
		foreign.R.PlanCandidateSetCategories = append(foreign.R.PlanCandidateSetCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlanCandidateSetID, foreign.ID) {
				local.R.PlanCandidateSet = foreign
				if foreign.R == nil {
					foreign.R = &planCandidateSetR{}
				}
				foreign.R.PlanCandidateSetCategories = append(foreign.R.PlanCandidateSetCategories, local)
				break
			}
		}
	}

	return nil
}

// SetPlanCandidateSet of the planCandidateSetCategory to the related item.
// Sets o.R.PlanCandidateSet to related.
// Adds o to related.R.PlanCandidateSetCategories.
func (o *PlanCandidateSetCategory) SetPlanCandidateSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PlanCandidateSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plan_candidate_set_categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
		strmangle.WhereClause("`", "`", 0, planCandidateSetCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlanCandidateSetID, related.ID)
	if o.R == nil {
		o.R = &planCandidateSetCategoryR{
			PlanCandidateSet: related,
		}
	} else {
		o.R.PlanCandidateSet = related
	}

	if related.R == nil {
		related.R = &planCandidateSetR{
			PlanCandidateSetCategories: PlanCandidateSetCategorySlice{o},
		}
	} else {
		related.R.PlanCandidateSetCategories = append(related.R.PlanCandidateSetCategories, o)
	}

	return nil
}

// RemovePlanCandidateSet relationship.
// Sets o.R.PlanCandidateSet to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PlanCandidateSetCategory) RemovePlanCandidateSet(ctx context.Context, exec boil.ContextExecutor, related *PlanCandidateSet) error {
	var err error

	queries.SetScanner(&o.PlanCandidateSetID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("plan_candidate_set_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlanCandidateSet = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlanCandidateSetCategories {
		if queries.Equal(o.PlanCandidateSetID, ri.PlanCandidateSetID) {
			continue
		}

		ln := len(related.R.PlanCandidateSetCategories)
		if ln > 1 && i < ln-1 {
			related.R.PlanCandidateSetCategories[i] = related.R.PlanCandidateSetCategories[ln-1]
		}
		related.R.PlanCandidateSetCategories = related.R.PlanCandidateSetCategories[:ln-1]
		break
	}
	return nil
}

// PlanCandidateSetCategories retrieves all the records using an executor.
func PlanCandidateSetCategories(mods ...qm.QueryMod) planCandidateSetCategoryQuery {
	mods = append(mods, qm.From("`plan_candidate_set_categories`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plan_candidate_set_categories`.*"})
	}

	return planCandidateSetCategoryQuery{q}
}

// FindPlanCandidateSetCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlanCandidateSetCategory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PlanCandidateSetCategory, error) {
	planCandidateSetCategoryObj := &PlanCandidateSetCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plan_candidate_set_categories` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planCandidateSetCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from plan_candidate_set_categories")
	}

	if err = planCandidateSetCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planCandidateSetCategoryObj, err
	}

	return planCandidateSetCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlanCandidateSetCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no plan_candidate_set_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planCandidateSetCategoryInsertCacheMut.RLock()
	cache, cached := planCandidateSetCategoryInsertCache[key]
	planCandidateSetCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planCandidateSetCategoryAllColumns,
			planCandidateSetCategoryColumnsWithDefault,
			planCandidateSetCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plan_candidate_set_categories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plan_candidate_set_categories` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plan_candidate_set_categories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planCandidateSetCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into plan_candidate_set_categories")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for plan_candidate_set_categories")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetCategoryInsertCacheMut.Lock()
		planCandidateSetCategoryInsertCache[key] = cache
		planCandidateSetCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlanCandidateSetCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlanCandidateSetCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planCandidateSetCategoryUpdateCacheMut.RLock()
	cache, cached := planCandidateSetCategoryUpdateCache[key]
	planCandidateSetCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planCandidateSetCategoryAllColumns,
			planCandidateSetCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entities: unable to update plan_candidate_set_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plan_candidate_set_categories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planCandidateSetCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, append(wl, planCandidateSetCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update plan_candidate_set_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by update for plan_candidate_set_categories")
	}

	if !cached {
		planCandidateSetCategoryUpdateCacheMut.Lock()
		planCandidateSetCategoryUpdateCache[key] = cache
		planCandidateSetCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planCandidateSetCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all for plan_candidate_set_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected for plan_candidate_set_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanCandidateSetCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plan_candidate_set_categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all in planCandidateSetCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected all in update all planCandidateSetCategory")
	}
	return rowsAff, nil
}

var mySQLPlanCandidateSetCategoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlanCandidateSetCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no plan_candidate_set_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanCandidateSetCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planCandidateSetCategoryUpsertCacheMut.RLock()
	cache, cached := planCandidateSetCategoryUpsertCache[key]
	planCandidateSetCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			planCandidateSetCategoryAllColumns,
			planCandidateSetCategoryColumnsWithDefault,
			planCandidateSetCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planCandidateSetCategoryAllColumns,
			planCandidateSetCategoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entities: unable to upsert plan_candidate_set_categories, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`plan_candidate_set_categories`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plan_candidate_set_categories` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to upsert for plan_candidate_set_categories")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planCandidateSetCategoryType, planCandidateSetCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entities: unable to retrieve unique values for plan_candidate_set_categories")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for plan_candidate_set_categories")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetCategoryUpsertCacheMut.Lock()
		planCandidateSetCategoryUpsertCache[key] = cache
		planCandidateSetCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlanCandidateSetCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlanCandidateSetCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entities: no PlanCandidateSetCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planCandidateSetCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `plan_candidate_set_categories` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete from plan_candidate_set_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by delete for plan_candidate_set_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planCandidateSetCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entities: no planCandidateSetCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from plan_candidate_set_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for plan_candidate_set_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanCandidateSetCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planCandidateSetCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plan_candidate_set_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from planCandidateSetCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for plan_candidate_set_categories")
	}

	if len(planCandidateSetCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlanCandidateSetCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlanCandidateSetCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanCandidateSetCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanCandidateSetCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plan_candidate_set_categories`.* FROM `plan_candidate_set_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in PlanCandidateSetCategorySlice")
	}

	*o = slice

	return nil
}

// PlanCandidateSetCategoryExists checks if the PlanCandidateSetCategory row exists.
func PlanCandidateSetCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plan_candidate_set_categories` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if plan_candidate_set_categories exists")
	}

	return exists, nil
}

// Exists checks if the PlanCandidateSetCategory row exists.
func (o *PlanCandidateSetCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanCandidateSetCategoryExists(ctx, exec, o.ID)
}
