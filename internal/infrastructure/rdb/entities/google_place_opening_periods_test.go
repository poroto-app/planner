// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooglePlaceOpeningPeriods(t *testing.T) {
	t.Parallel()

	query := GooglePlaceOpeningPeriods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooglePlaceOpeningPeriodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceOpeningPeriodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooglePlaceOpeningPeriods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceOpeningPeriodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceOpeningPeriodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceOpeningPeriodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooglePlaceOpeningPeriodExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GooglePlaceOpeningPeriod exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooglePlaceOpeningPeriodExists to return true, but got false.")
	}
}

func testGooglePlaceOpeningPeriodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	googlePlaceOpeningPeriodFound, err := FindGooglePlaceOpeningPeriod(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if googlePlaceOpeningPeriodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooglePlaceOpeningPeriodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooglePlaceOpeningPeriods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceOpeningPeriodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooglePlaceOpeningPeriods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooglePlaceOpeningPeriodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	googlePlaceOpeningPeriodOne := &GooglePlaceOpeningPeriod{}
	googlePlaceOpeningPeriodTwo := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, googlePlaceOpeningPeriodOne, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceOpeningPeriodTwo, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceOpeningPeriodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceOpeningPeriodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaceOpeningPeriods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooglePlaceOpeningPeriodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	googlePlaceOpeningPeriodOne := &GooglePlaceOpeningPeriod{}
	googlePlaceOpeningPeriodTwo := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, googlePlaceOpeningPeriodOne, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceOpeningPeriodTwo, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceOpeningPeriodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceOpeningPeriodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func googlePlaceOpeningPeriodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func googlePlaceOpeningPeriodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceOpeningPeriod) error {
	*o = GooglePlaceOpeningPeriod{}
	return nil
}

func testGooglePlaceOpeningPeriodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooglePlaceOpeningPeriod{}
	o := &GooglePlaceOpeningPeriod{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod object: %s", err)
	}

	AddGooglePlaceOpeningPeriodHook(boil.BeforeInsertHook, googlePlaceOpeningPeriodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodBeforeInsertHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.AfterInsertHook, googlePlaceOpeningPeriodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodAfterInsertHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.AfterSelectHook, googlePlaceOpeningPeriodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodAfterSelectHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.BeforeUpdateHook, googlePlaceOpeningPeriodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodBeforeUpdateHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.AfterUpdateHook, googlePlaceOpeningPeriodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodAfterUpdateHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.BeforeDeleteHook, googlePlaceOpeningPeriodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodBeforeDeleteHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.AfterDeleteHook, googlePlaceOpeningPeriodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodAfterDeleteHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.BeforeUpsertHook, googlePlaceOpeningPeriodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodBeforeUpsertHooks = []GooglePlaceOpeningPeriodHook{}

	AddGooglePlaceOpeningPeriodHook(boil.AfterUpsertHook, googlePlaceOpeningPeriodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceOpeningPeriodAfterUpsertHooks = []GooglePlaceOpeningPeriodHook{}
}

func testGooglePlaceOpeningPeriodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceOpeningPeriodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(googlePlaceOpeningPeriodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceOpeningPeriodToOneGooglePlaceUsingGooglePlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GooglePlaceOpeningPeriod
	var foreign GooglePlace

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GooglePlaceID = foreign.GooglePlaceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GooglePlace().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GooglePlaceID != foreign.GooglePlaceID {
		t.Errorf("want: %v, got %v", foreign.GooglePlaceID, check.GooglePlaceID)
	}

	ranAfterSelectHook := false
	AddGooglePlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GooglePlaceOpeningPeriodSlice{&local}
	if err = local.L.LoadGooglePlace(ctx, tx, false, (*[]*GooglePlaceOpeningPeriod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GooglePlace = nil
	if err = local.L.LoadGooglePlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGooglePlaceOpeningPeriodToOneSetOpGooglePlaceUsingGooglePlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlaceOpeningPeriod
	var b, c GooglePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceOpeningPeriodDBTypes, false, strmangle.SetComplement(googlePlaceOpeningPeriodPrimaryKeyColumns, googlePlaceOpeningPeriodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GooglePlace{&b, &c} {
		err = a.SetGooglePlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GooglePlace != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GooglePlaceOpeningPeriods[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GooglePlaceID))
		reflect.Indirect(reflect.ValueOf(&a.GooglePlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, x.GooglePlaceID)
		}
	}
}

func testGooglePlaceOpeningPeriodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceOpeningPeriodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceOpeningPeriodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceOpeningPeriodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaceOpeningPeriods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	googlePlaceOpeningPeriodDBTypes = map[string]string{`ID`: `char`, `GooglePlaceID`: `varchar`, `OpenDay`: `int`, `OpenTime`: `char`, `CloseDay`: `int`, `CloseTime`: `char`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                               = bytes.MinRead
)

func testGooglePlaceOpeningPeriodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(googlePlaceOpeningPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(googlePlaceOpeningPeriodAllColumns) == len(googlePlaceOpeningPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooglePlaceOpeningPeriodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(googlePlaceOpeningPeriodAllColumns) == len(googlePlaceOpeningPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceOpeningPeriodDBTypes, true, googlePlaceOpeningPeriodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(googlePlaceOpeningPeriodAllColumns, googlePlaceOpeningPeriodPrimaryKeyColumns) {
		fields = googlePlaceOpeningPeriodAllColumns
	} else {
		fields = strmangle.SetComplement(
			googlePlaceOpeningPeriodAllColumns,
			googlePlaceOpeningPeriodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooglePlaceOpeningPeriodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooglePlaceOpeningPeriodsUpsert(t *testing.T) {
	t.Parallel()

	if len(googlePlaceOpeningPeriodAllColumns) == len(googlePlaceOpeningPeriodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGooglePlaceOpeningPeriodUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooglePlaceOpeningPeriod{}
	if err = randomize.Struct(seed, &o, googlePlaceOpeningPeriodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlaceOpeningPeriod: %s", err)
	}

	count, err := GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, googlePlaceOpeningPeriodDBTypes, false, googlePlaceOpeningPeriodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceOpeningPeriod struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlaceOpeningPeriod: %s", err)
	}

	count, err = GooglePlaceOpeningPeriods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
