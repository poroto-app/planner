// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooglePlaceTypes(t *testing.T) {
	t.Parallel()

	query := GooglePlaceTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooglePlaceTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooglePlaceTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooglePlaceTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooglePlaceTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GooglePlaceType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooglePlaceTypeExists to return true, but got false.")
	}
}

func testGooglePlaceTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	googlePlaceTypeFound, err := FindGooglePlaceType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if googlePlaceTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooglePlaceTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooglePlaceTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooglePlaceTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooglePlaceTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	googlePlaceTypeOne := &GooglePlaceType{}
	googlePlaceTypeTwo := &GooglePlaceType{}
	if err = randomize.Struct(seed, googlePlaceTypeOne, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceTypeTwo, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaceTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooglePlaceTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	googlePlaceTypeOne := &GooglePlaceType{}
	googlePlaceTypeTwo := &GooglePlaceType{}
	if err = randomize.Struct(seed, googlePlaceTypeOne, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}
	if err = randomize.Struct(seed, googlePlaceTypeTwo, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = googlePlaceTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = googlePlaceTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func googlePlaceTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func googlePlaceTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooglePlaceType) error {
	*o = GooglePlaceType{}
	return nil
}

func testGooglePlaceTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooglePlaceType{}
	o := &GooglePlaceType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType object: %s", err)
	}

	AddGooglePlaceTypeHook(boil.BeforeInsertHook, googlePlaceTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeBeforeInsertHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.AfterInsertHook, googlePlaceTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeAfterInsertHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.AfterSelectHook, googlePlaceTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeAfterSelectHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.BeforeUpdateHook, googlePlaceTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeBeforeUpdateHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.AfterUpdateHook, googlePlaceTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeAfterUpdateHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.BeforeDeleteHook, googlePlaceTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeBeforeDeleteHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.AfterDeleteHook, googlePlaceTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeAfterDeleteHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.BeforeUpsertHook, googlePlaceTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeBeforeUpsertHooks = []GooglePlaceTypeHook{}

	AddGooglePlaceTypeHook(boil.AfterUpsertHook, googlePlaceTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	googlePlaceTypeAfterUpsertHooks = []GooglePlaceTypeHook{}
}

func testGooglePlaceTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(googlePlaceTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooglePlaceTypeToOneGooglePlaceUsingGooglePlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GooglePlaceType
	var foreign GooglePlace

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, googlePlaceTypeDBTypes, false, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, googlePlaceDBTypes, false, googlePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlace struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GooglePlaceID = foreign.GooglePlaceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.GooglePlace().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GooglePlaceID != foreign.GooglePlaceID {
		t.Errorf("want: %v, got %v", foreign.GooglePlaceID, check.GooglePlaceID)
	}

	ranAfterSelectHook := false
	AddGooglePlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *GooglePlace) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GooglePlaceTypeSlice{&local}
	if err = local.L.LoadGooglePlace(ctx, tx, false, (*[]*GooglePlaceType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GooglePlace = nil
	if err = local.L.LoadGooglePlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.GooglePlace == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGooglePlaceTypeToOneSetOpGooglePlaceUsingGooglePlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GooglePlaceType
	var b, c GooglePlace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, googlePlaceTypeDBTypes, false, strmangle.SetComplement(googlePlaceTypePrimaryKeyColumns, googlePlaceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, googlePlaceDBTypes, false, strmangle.SetComplement(googlePlacePrimaryKeyColumns, googlePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GooglePlace{&b, &c} {
		err = a.SetGooglePlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GooglePlace != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GooglePlaceTypes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GooglePlaceID))
		reflect.Indirect(reflect.ValueOf(&a.GooglePlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GooglePlaceID != x.GooglePlaceID {
			t.Error("foreign key was wrong value", a.GooglePlaceID, x.GooglePlaceID)
		}
	}
}

func testGooglePlaceTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooglePlaceTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooglePlaceTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooglePlaceTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	googlePlaceTypeDBTypes = map[string]string{`ID`: `char`, `GooglePlaceID`: `varchar`, `Type`: `varchar`, `OrderNum`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                      = bytes.MinRead
)

func testGooglePlaceTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(googlePlaceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(googlePlaceTypeAllColumns) == len(googlePlaceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooglePlaceTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(googlePlaceTypeAllColumns) == len(googlePlaceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooglePlaceType{}
	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, googlePlaceTypeDBTypes, true, googlePlaceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(googlePlaceTypeAllColumns, googlePlaceTypePrimaryKeyColumns) {
		fields = googlePlaceTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			googlePlaceTypeAllColumns,
			googlePlaceTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooglePlaceTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooglePlaceTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(googlePlaceTypeAllColumns) == len(googlePlaceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGooglePlaceTypeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooglePlaceType{}
	if err = randomize.Struct(seed, &o, googlePlaceTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlaceType: %s", err)
	}

	count, err := GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, googlePlaceTypeDBTypes, false, googlePlaceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooglePlaceType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooglePlaceType: %s", err)
	}

	count, err = GooglePlaceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
