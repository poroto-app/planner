// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriods)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributions)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferences)
	t.Run("GooglePlacePhotos", testGooglePlacePhotos)
	t.Run("GooglePlaceReviews", testGooglePlaceReviews)
	t.Run("GooglePlaceTypes", testGooglePlaceTypes)
	t.Run("GooglePlaces", testGooglePlaces)
	t.Run("Places", testPlaces)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlaces)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategories)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlaces)
	t.Run("PlanCandidateSets", testPlanCandidateSets)
	t.Run("PlanCandidates", testPlanCandidates)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsDelete)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsDelete)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesDelete)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosDelete)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsDelete)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesDelete)
	t.Run("GooglePlaces", testGooglePlacesDelete)
	t.Run("Places", testPlacesDelete)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesDelete)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesDelete)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesDelete)
	t.Run("PlanCandidateSets", testPlanCandidateSetsDelete)
	t.Run("PlanCandidates", testPlanCandidatesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsQueryDeleteAll)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsQueryDeleteAll)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesQueryDeleteAll)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosQueryDeleteAll)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsQueryDeleteAll)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesQueryDeleteAll)
	t.Run("GooglePlaces", testGooglePlacesQueryDeleteAll)
	t.Run("Places", testPlacesQueryDeleteAll)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesQueryDeleteAll)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesQueryDeleteAll)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesQueryDeleteAll)
	t.Run("PlanCandidateSets", testPlanCandidateSetsQueryDeleteAll)
	t.Run("PlanCandidates", testPlanCandidatesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsSliceDeleteAll)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsSliceDeleteAll)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesSliceDeleteAll)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosSliceDeleteAll)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsSliceDeleteAll)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesSliceDeleteAll)
	t.Run("GooglePlaces", testGooglePlacesSliceDeleteAll)
	t.Run("Places", testPlacesSliceDeleteAll)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesSliceDeleteAll)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesSliceDeleteAll)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesSliceDeleteAll)
	t.Run("PlanCandidateSets", testPlanCandidateSetsSliceDeleteAll)
	t.Run("PlanCandidates", testPlanCandidatesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsExists)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsExists)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesExists)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosExists)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsExists)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesExists)
	t.Run("GooglePlaces", testGooglePlacesExists)
	t.Run("Places", testPlacesExists)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesExists)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesExists)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesExists)
	t.Run("PlanCandidateSets", testPlanCandidateSetsExists)
	t.Run("PlanCandidates", testPlanCandidatesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsFind)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsFind)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesFind)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosFind)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsFind)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesFind)
	t.Run("GooglePlaces", testGooglePlacesFind)
	t.Run("Places", testPlacesFind)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesFind)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesFind)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesFind)
	t.Run("PlanCandidateSets", testPlanCandidateSetsFind)
	t.Run("PlanCandidates", testPlanCandidatesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsBind)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsBind)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesBind)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosBind)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsBind)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesBind)
	t.Run("GooglePlaces", testGooglePlacesBind)
	t.Run("Places", testPlacesBind)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesBind)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesBind)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesBind)
	t.Run("PlanCandidateSets", testPlanCandidateSetsBind)
	t.Run("PlanCandidates", testPlanCandidatesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsOne)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsOne)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesOne)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosOne)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsOne)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesOne)
	t.Run("GooglePlaces", testGooglePlacesOne)
	t.Run("Places", testPlacesOne)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesOne)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesOne)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesOne)
	t.Run("PlanCandidateSets", testPlanCandidateSetsOne)
	t.Run("PlanCandidates", testPlanCandidatesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsAll)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsAll)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesAll)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosAll)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsAll)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesAll)
	t.Run("GooglePlaces", testGooglePlacesAll)
	t.Run("Places", testPlacesAll)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesAll)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesAll)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesAll)
	t.Run("PlanCandidateSets", testPlanCandidateSetsAll)
	t.Run("PlanCandidates", testPlanCandidatesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsCount)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsCount)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesCount)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosCount)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsCount)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesCount)
	t.Run("GooglePlaces", testGooglePlacesCount)
	t.Run("Places", testPlacesCount)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesCount)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesCount)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesCount)
	t.Run("PlanCandidateSets", testPlanCandidateSetsCount)
	t.Run("PlanCandidates", testPlanCandidatesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsHooks)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsHooks)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesHooks)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosHooks)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsHooks)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesHooks)
	t.Run("GooglePlaces", testGooglePlacesHooks)
	t.Run("Places", testPlacesHooks)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesHooks)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesHooks)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesHooks)
	t.Run("PlanCandidateSets", testPlanCandidateSetsHooks)
	t.Run("PlanCandidates", testPlanCandidatesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsInsert)
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsInsertWhitelist)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsInsert)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsInsertWhitelist)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesInsert)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesInsertWhitelist)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosInsert)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosInsertWhitelist)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsInsert)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsInsertWhitelist)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesInsert)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesInsertWhitelist)
	t.Run("GooglePlaces", testGooglePlacesInsert)
	t.Run("GooglePlaces", testGooglePlacesInsertWhitelist)
	t.Run("Places", testPlacesInsert)
	t.Run("Places", testPlacesInsertWhitelist)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesInsert)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesInsertWhitelist)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesInsert)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesInsertWhitelist)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesInsert)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesInsertWhitelist)
	t.Run("PlanCandidateSets", testPlanCandidateSetsInsert)
	t.Run("PlanCandidateSets", testPlanCandidateSetsInsertWhitelist)
	t.Run("PlanCandidates", testPlanCandidatesInsert)
	t.Run("PlanCandidates", testPlanCandidatesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriodToGooglePlaceUsingGooglePlace", testGooglePlaceOpeningPeriodToOneGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoAttributionToGooglePlaceUsingGooglePlace", testGooglePlacePhotoAttributionToOneGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoAttributionToGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference", testGooglePlacePhotoAttributionToOneGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference)
	t.Run("GooglePlacePhotoReferenceToGooglePlaceUsingGooglePlace", testGooglePlacePhotoReferenceToOneGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoToGooglePlaceUsingGooglePlace", testGooglePlacePhotoToOneGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoToGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference", testGooglePlacePhotoToOneGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference)
	t.Run("GooglePlaceReviewToGooglePlaceUsingGooglePlace", testGooglePlaceReviewToOneGooglePlaceUsingGooglePlace)
	t.Run("GooglePlaceTypeToGooglePlaceUsingGooglePlace", testGooglePlaceTypeToOneGooglePlaceUsingGooglePlace)
	t.Run("GooglePlaceToPlaceUsingPlace", testGooglePlaceToOnePlaceUsingPlace)
	t.Run("PlanCandidatePlaceToPlanCandidateUsingPlanCandidate", testPlanCandidatePlaceToOnePlanCandidateUsingPlanCandidate)
	t.Run("PlanCandidatePlaceToPlaceUsingPlace", testPlanCandidatePlaceToOnePlaceUsingPlace)
	t.Run("PlanCandidateSetCategoryToPlanCandidateSetUsingPlanCandidateSet", testPlanCandidateSetCategoryToOnePlanCandidateSetUsingPlanCandidateSet)
	t.Run("PlanCandidateSetSearchedPlaceToPlanCandidateSetUsingPlanCandidateSet", testPlanCandidateSetSearchedPlaceToOnePlanCandidateSetUsingPlanCandidateSet)
	t.Run("PlanCandidateSetSearchedPlaceToPlaceUsingPlace", testPlanCandidateSetSearchedPlaceToOnePlaceUsingPlace)
	t.Run("PlanCandidateToPlanCandidateSetUsingPlanCandidateSet", testPlanCandidateToOnePlanCandidateSetUsingPlanCandidateSet)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GooglePlacePhotoReferenceToPhotoReferenceGooglePlacePhotoAttributions", testGooglePlacePhotoReferenceToManyPhotoReferenceGooglePlacePhotoAttributions)
	t.Run("GooglePlacePhotoReferenceToPhotoReferenceGooglePlacePhotos", testGooglePlacePhotoReferenceToManyPhotoReferenceGooglePlacePhotos)
	t.Run("GooglePlaceToGooglePlaceOpeningPeriods", testGooglePlaceToManyGooglePlaceOpeningPeriods)
	t.Run("GooglePlaceToGooglePlacePhotoAttributions", testGooglePlaceToManyGooglePlacePhotoAttributions)
	t.Run("GooglePlaceToGooglePlacePhotoReferences", testGooglePlaceToManyGooglePlacePhotoReferences)
	t.Run("GooglePlaceToGooglePlacePhotos", testGooglePlaceToManyGooglePlacePhotos)
	t.Run("GooglePlaceToGooglePlaceReviews", testGooglePlaceToManyGooglePlaceReviews)
	t.Run("GooglePlaceToGooglePlaceTypes", testGooglePlaceToManyGooglePlaceTypes)
	t.Run("PlaceToGooglePlaces", testPlaceToManyGooglePlaces)
	t.Run("PlaceToPlanCandidatePlaces", testPlaceToManyPlanCandidatePlaces)
	t.Run("PlaceToPlanCandidateSetSearchedPlaces", testPlaceToManyPlanCandidateSetSearchedPlaces)
	t.Run("PlanCandidateSetToPlanCandidateSetCategories", testPlanCandidateSetToManyPlanCandidateSetCategories)
	t.Run("PlanCandidateSetToPlanCandidateSetSearchedPlaces", testPlanCandidateSetToManyPlanCandidateSetSearchedPlaces)
	t.Run("PlanCandidateSetToPlanCandidates", testPlanCandidateSetToManyPlanCandidates)
	t.Run("PlanCandidateToPlanCandidatePlaces", testPlanCandidateToManyPlanCandidatePlaces)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriodToGooglePlaceUsingGooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodToOneSetOpGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoAttributionToGooglePlaceUsingGooglePlacePhotoAttributions", testGooglePlacePhotoAttributionToOneSetOpGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoAttributionToGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoAttributions", testGooglePlacePhotoAttributionToOneSetOpGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference)
	t.Run("GooglePlacePhotoReferenceToGooglePlaceUsingGooglePlacePhotoReferences", testGooglePlacePhotoReferenceToOneSetOpGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoToGooglePlaceUsingGooglePlacePhotos", testGooglePlacePhotoToOneSetOpGooglePlaceUsingGooglePlace)
	t.Run("GooglePlacePhotoToGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotos", testGooglePlacePhotoToOneSetOpGooglePlacePhotoReferenceUsingPhotoReferenceGooglePlacePhotoReference)
	t.Run("GooglePlaceReviewToGooglePlaceUsingGooglePlaceReviews", testGooglePlaceReviewToOneSetOpGooglePlaceUsingGooglePlace)
	t.Run("GooglePlaceTypeToGooglePlaceUsingGooglePlaceTypes", testGooglePlaceTypeToOneSetOpGooglePlaceUsingGooglePlace)
	t.Run("GooglePlaceToPlaceUsingGooglePlaces", testGooglePlaceToOneSetOpPlaceUsingPlace)
	t.Run("PlanCandidatePlaceToPlanCandidateUsingPlanCandidatePlaces", testPlanCandidatePlaceToOneSetOpPlanCandidateUsingPlanCandidate)
	t.Run("PlanCandidatePlaceToPlaceUsingPlanCandidatePlaces", testPlanCandidatePlaceToOneSetOpPlaceUsingPlace)
	t.Run("PlanCandidateSetCategoryToPlanCandidateSetUsingPlanCandidateSetCategories", testPlanCandidateSetCategoryToOneSetOpPlanCandidateSetUsingPlanCandidateSet)
	t.Run("PlanCandidateSetSearchedPlaceToPlanCandidateSetUsingPlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlaceToOneSetOpPlanCandidateSetUsingPlanCandidateSet)
	t.Run("PlanCandidateSetSearchedPlaceToPlaceUsingPlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlaceToOneSetOpPlaceUsingPlace)
	t.Run("PlanCandidateToPlanCandidateSetUsingPlanCandidates", testPlanCandidateToOneSetOpPlanCandidateSetUsingPlanCandidateSet)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GooglePlacePhotoReferenceToPhotoReferenceGooglePlacePhotoAttributions", testGooglePlacePhotoReferenceToManyAddOpPhotoReferenceGooglePlacePhotoAttributions)
	t.Run("GooglePlacePhotoReferenceToPhotoReferenceGooglePlacePhotos", testGooglePlacePhotoReferenceToManyAddOpPhotoReferenceGooglePlacePhotos)
	t.Run("GooglePlaceToGooglePlaceOpeningPeriods", testGooglePlaceToManyAddOpGooglePlaceOpeningPeriods)
	t.Run("GooglePlaceToGooglePlacePhotoAttributions", testGooglePlaceToManyAddOpGooglePlacePhotoAttributions)
	t.Run("GooglePlaceToGooglePlacePhotoReferences", testGooglePlaceToManyAddOpGooglePlacePhotoReferences)
	t.Run("GooglePlaceToGooglePlacePhotos", testGooglePlaceToManyAddOpGooglePlacePhotos)
	t.Run("GooglePlaceToGooglePlaceReviews", testGooglePlaceToManyAddOpGooglePlaceReviews)
	t.Run("GooglePlaceToGooglePlaceTypes", testGooglePlaceToManyAddOpGooglePlaceTypes)
	t.Run("PlaceToGooglePlaces", testPlaceToManyAddOpGooglePlaces)
	t.Run("PlaceToPlanCandidatePlaces", testPlaceToManyAddOpPlanCandidatePlaces)
	t.Run("PlaceToPlanCandidateSetSearchedPlaces", testPlaceToManyAddOpPlanCandidateSetSearchedPlaces)
	t.Run("PlanCandidateSetToPlanCandidateSetCategories", testPlanCandidateSetToManyAddOpPlanCandidateSetCategories)
	t.Run("PlanCandidateSetToPlanCandidateSetSearchedPlaces", testPlanCandidateSetToManyAddOpPlanCandidateSetSearchedPlaces)
	t.Run("PlanCandidateSetToPlanCandidates", testPlanCandidateSetToManyAddOpPlanCandidates)
	t.Run("PlanCandidateToPlanCandidatePlaces", testPlanCandidateToManyAddOpPlanCandidatePlaces)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsReload)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsReload)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesReload)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosReload)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsReload)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesReload)
	t.Run("GooglePlaces", testGooglePlacesReload)
	t.Run("Places", testPlacesReload)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesReload)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesReload)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesReload)
	t.Run("PlanCandidateSets", testPlanCandidateSetsReload)
	t.Run("PlanCandidates", testPlanCandidatesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsReloadAll)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsReloadAll)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesReloadAll)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosReloadAll)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsReloadAll)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesReloadAll)
	t.Run("GooglePlaces", testGooglePlacesReloadAll)
	t.Run("Places", testPlacesReloadAll)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesReloadAll)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesReloadAll)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesReloadAll)
	t.Run("PlanCandidateSets", testPlanCandidateSetsReloadAll)
	t.Run("PlanCandidates", testPlanCandidatesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsSelect)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsSelect)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesSelect)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosSelect)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsSelect)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesSelect)
	t.Run("GooglePlaces", testGooglePlacesSelect)
	t.Run("Places", testPlacesSelect)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesSelect)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesSelect)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesSelect)
	t.Run("PlanCandidateSets", testPlanCandidateSetsSelect)
	t.Run("PlanCandidates", testPlanCandidatesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsUpdate)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsUpdate)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesUpdate)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosUpdate)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsUpdate)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesUpdate)
	t.Run("GooglePlaces", testGooglePlacesUpdate)
	t.Run("Places", testPlacesUpdate)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesUpdate)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesUpdate)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesUpdate)
	t.Run("PlanCandidateSets", testPlanCandidateSetsUpdate)
	t.Run("PlanCandidates", testPlanCandidatesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("GooglePlaceOpeningPeriods", testGooglePlaceOpeningPeriodsSliceUpdateAll)
	t.Run("GooglePlacePhotoAttributions", testGooglePlacePhotoAttributionsSliceUpdateAll)
	t.Run("GooglePlacePhotoReferences", testGooglePlacePhotoReferencesSliceUpdateAll)
	t.Run("GooglePlacePhotos", testGooglePlacePhotosSliceUpdateAll)
	t.Run("GooglePlaceReviews", testGooglePlaceReviewsSliceUpdateAll)
	t.Run("GooglePlaceTypes", testGooglePlaceTypesSliceUpdateAll)
	t.Run("GooglePlaces", testGooglePlacesSliceUpdateAll)
	t.Run("Places", testPlacesSliceUpdateAll)
	t.Run("PlanCandidatePlaces", testPlanCandidatePlacesSliceUpdateAll)
	t.Run("PlanCandidateSetCategories", testPlanCandidateSetCategoriesSliceUpdateAll)
	t.Run("PlanCandidateSetSearchedPlaces", testPlanCandidateSetSearchedPlacesSliceUpdateAll)
	t.Run("PlanCandidateSets", testPlanCandidateSetsSliceUpdateAll)
	t.Run("PlanCandidates", testPlanCandidatesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
