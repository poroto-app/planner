// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GooglePlaceReview is an object representing the database table.
type GooglePlaceReview struct {
	ID                    string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	GooglePlaceID         string      `boil:"google_place_id" json:"google_place_id" toml:"google_place_id" yaml:"google_place_id"`
	AuthorName            null.String `boil:"author_name" json:"author_name,omitempty" toml:"author_name" yaml:"author_name,omitempty"`
	AuthorURL             null.String `boil:"author_url" json:"author_url,omitempty" toml:"author_url" yaml:"author_url,omitempty"`
	AuthorProfilePhotoURL null.String `boil:"author_profile_photo_url" json:"author_profile_photo_url,omitempty" toml:"author_profile_photo_url" yaml:"author_profile_photo_url,omitempty"`
	Language              null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	Rating                null.Int    `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	Text                  null.String `boil:"text" json:"text,omitempty" toml:"text" yaml:"text,omitempty"`
	Time                  null.Int    `boil:"time" json:"time,omitempty" toml:"time" yaml:"time,omitempty"`
	CreatedAt             null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt             null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *googlePlaceReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googlePlaceReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GooglePlaceReviewColumns = struct {
	ID                    string
	GooglePlaceID         string
	AuthorName            string
	AuthorURL             string
	AuthorProfilePhotoURL string
	Language              string
	Rating                string
	Text                  string
	Time                  string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	GooglePlaceID:         "google_place_id",
	AuthorName:            "author_name",
	AuthorURL:             "author_url",
	AuthorProfilePhotoURL: "author_profile_photo_url",
	Language:              "language",
	Rating:                "rating",
	Text:                  "text",
	Time:                  "time",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var GooglePlaceReviewTableColumns = struct {
	ID                    string
	GooglePlaceID         string
	AuthorName            string
	AuthorURL             string
	AuthorProfilePhotoURL string
	Language              string
	Rating                string
	Text                  string
	Time                  string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "google_place_reviews.id",
	GooglePlaceID:         "google_place_reviews.google_place_id",
	AuthorName:            "google_place_reviews.author_name",
	AuthorURL:             "google_place_reviews.author_url",
	AuthorProfilePhotoURL: "google_place_reviews.author_profile_photo_url",
	Language:              "google_place_reviews.language",
	Rating:                "google_place_reviews.rating",
	Text:                  "google_place_reviews.text",
	Time:                  "google_place_reviews.time",
	CreatedAt:             "google_place_reviews.created_at",
	UpdatedAt:             "google_place_reviews.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GooglePlaceReviewWhere = struct {
	ID                    whereHelperstring
	GooglePlaceID         whereHelperstring
	AuthorName            whereHelpernull_String
	AuthorURL             whereHelpernull_String
	AuthorProfilePhotoURL whereHelpernull_String
	Language              whereHelpernull_String
	Rating                whereHelpernull_Int
	Text                  whereHelpernull_String
	Time                  whereHelpernull_Int
	CreatedAt             whereHelpernull_Time
	UpdatedAt             whereHelpernull_Time
}{
	ID:                    whereHelperstring{field: "`google_place_reviews`.`id`"},
	GooglePlaceID:         whereHelperstring{field: "`google_place_reviews`.`google_place_id`"},
	AuthorName:            whereHelpernull_String{field: "`google_place_reviews`.`author_name`"},
	AuthorURL:             whereHelpernull_String{field: "`google_place_reviews`.`author_url`"},
	AuthorProfilePhotoURL: whereHelpernull_String{field: "`google_place_reviews`.`author_profile_photo_url`"},
	Language:              whereHelpernull_String{field: "`google_place_reviews`.`language`"},
	Rating:                whereHelpernull_Int{field: "`google_place_reviews`.`rating`"},
	Text:                  whereHelpernull_String{field: "`google_place_reviews`.`text`"},
	Time:                  whereHelpernull_Int{field: "`google_place_reviews`.`time`"},
	CreatedAt:             whereHelpernull_Time{field: "`google_place_reviews`.`created_at`"},
	UpdatedAt:             whereHelpernull_Time{field: "`google_place_reviews`.`updated_at`"},
}

// GooglePlaceReviewRels is where relationship names are stored.
var GooglePlaceReviewRels = struct {
	GooglePlace string
}{
	GooglePlace: "GooglePlace",
}

// googlePlaceReviewR is where relationships are stored.
type googlePlaceReviewR struct {
	GooglePlace *GooglePlace `boil:"GooglePlace" json:"GooglePlace" toml:"GooglePlace" yaml:"GooglePlace"`
}

// NewStruct creates a new relationship struct
func (*googlePlaceReviewR) NewStruct() *googlePlaceReviewR {
	return &googlePlaceReviewR{}
}

func (r *googlePlaceReviewR) GetGooglePlace() *GooglePlace {
	if r == nil {
		return nil
	}
	return r.GooglePlace
}

// googlePlaceReviewL is where Load methods for each relationship are stored.
type googlePlaceReviewL struct{}

var (
	googlePlaceReviewAllColumns            = []string{"id", "google_place_id", "author_name", "author_url", "author_profile_photo_url", "language", "rating", "text", "time", "created_at", "updated_at"}
	googlePlaceReviewColumnsWithoutDefault = []string{"google_place_id", "author_name", "author_url", "author_profile_photo_url", "language", "rating", "text", "time"}
	googlePlaceReviewColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	googlePlaceReviewPrimaryKeyColumns     = []string{"id"}
	googlePlaceReviewGeneratedColumns      = []string{}
)

type (
	// GooglePlaceReviewSlice is an alias for a slice of pointers to GooglePlaceReview.
	// This should almost always be used instead of []GooglePlaceReview.
	GooglePlaceReviewSlice []*GooglePlaceReview
	// GooglePlaceReviewHook is the signature for custom GooglePlaceReview hook methods
	GooglePlaceReviewHook func(context.Context, boil.ContextExecutor, *GooglePlaceReview) error

	googlePlaceReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googlePlaceReviewType                 = reflect.TypeOf(&GooglePlaceReview{})
	googlePlaceReviewMapping              = queries.MakeStructMapping(googlePlaceReviewType)
	googlePlaceReviewPrimaryKeyMapping, _ = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, googlePlaceReviewPrimaryKeyColumns)
	googlePlaceReviewInsertCacheMut       sync.RWMutex
	googlePlaceReviewInsertCache          = make(map[string]insertCache)
	googlePlaceReviewUpdateCacheMut       sync.RWMutex
	googlePlaceReviewUpdateCache          = make(map[string]updateCache)
	googlePlaceReviewUpsertCacheMut       sync.RWMutex
	googlePlaceReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var googlePlaceReviewAfterSelectHooks []GooglePlaceReviewHook

var googlePlaceReviewBeforeInsertHooks []GooglePlaceReviewHook
var googlePlaceReviewAfterInsertHooks []GooglePlaceReviewHook

var googlePlaceReviewBeforeUpdateHooks []GooglePlaceReviewHook
var googlePlaceReviewAfterUpdateHooks []GooglePlaceReviewHook

var googlePlaceReviewBeforeDeleteHooks []GooglePlaceReviewHook
var googlePlaceReviewAfterDeleteHooks []GooglePlaceReviewHook

var googlePlaceReviewBeforeUpsertHooks []GooglePlaceReviewHook
var googlePlaceReviewAfterUpsertHooks []GooglePlaceReviewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GooglePlaceReview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GooglePlaceReview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GooglePlaceReview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GooglePlaceReview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GooglePlaceReview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GooglePlaceReview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GooglePlaceReview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GooglePlaceReview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GooglePlaceReview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceReviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGooglePlaceReviewHook registers your hook function for all future operations.
func AddGooglePlaceReviewHook(hookPoint boil.HookPoint, googlePlaceReviewHook GooglePlaceReviewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		googlePlaceReviewAfterSelectHooks = append(googlePlaceReviewAfterSelectHooks, googlePlaceReviewHook)
	case boil.BeforeInsertHook:
		googlePlaceReviewBeforeInsertHooks = append(googlePlaceReviewBeforeInsertHooks, googlePlaceReviewHook)
	case boil.AfterInsertHook:
		googlePlaceReviewAfterInsertHooks = append(googlePlaceReviewAfterInsertHooks, googlePlaceReviewHook)
	case boil.BeforeUpdateHook:
		googlePlaceReviewBeforeUpdateHooks = append(googlePlaceReviewBeforeUpdateHooks, googlePlaceReviewHook)
	case boil.AfterUpdateHook:
		googlePlaceReviewAfterUpdateHooks = append(googlePlaceReviewAfterUpdateHooks, googlePlaceReviewHook)
	case boil.BeforeDeleteHook:
		googlePlaceReviewBeforeDeleteHooks = append(googlePlaceReviewBeforeDeleteHooks, googlePlaceReviewHook)
	case boil.AfterDeleteHook:
		googlePlaceReviewAfterDeleteHooks = append(googlePlaceReviewAfterDeleteHooks, googlePlaceReviewHook)
	case boil.BeforeUpsertHook:
		googlePlaceReviewBeforeUpsertHooks = append(googlePlaceReviewBeforeUpsertHooks, googlePlaceReviewHook)
	case boil.AfterUpsertHook:
		googlePlaceReviewAfterUpsertHooks = append(googlePlaceReviewAfterUpsertHooks, googlePlaceReviewHook)
	}
}

// One returns a single googlePlaceReview record from the query.
func (q googlePlaceReviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GooglePlaceReview, error) {
	o := &GooglePlaceReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for google_place_reviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GooglePlaceReview records from the query.
func (q googlePlaceReviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GooglePlaceReviewSlice, error) {
	var o []*GooglePlaceReview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to GooglePlaceReview slice")
	}

	if len(googlePlaceReviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GooglePlaceReview records in the query.
func (q googlePlaceReviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count google_place_reviews rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googlePlaceReviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if google_place_reviews exists")
	}

	return count > 0, nil
}

// GooglePlace pointed to by the foreign key.
func (o *GooglePlaceReview) GooglePlace(mods ...qm.QueryMod) googlePlaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`google_place_id` = ?", o.GooglePlaceID),
	}

	queryMods = append(queryMods, mods...)

	return GooglePlaces(queryMods...)
}

// LoadGooglePlace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (googlePlaceReviewL) LoadGooglePlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlaceReview interface{}, mods queries.Applicator) error {
	var slice []*GooglePlaceReview
	var object *GooglePlaceReview

	if singular {
		var ok bool
		object, ok = maybeGooglePlaceReview.(*GooglePlaceReview)
		if !ok {
			object = new(GooglePlaceReview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlaceReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlaceReview))
			}
		}
	} else {
		s, ok := maybeGooglePlaceReview.(*[]*GooglePlaceReview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlaceReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlaceReview))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &googlePlaceReviewR{}
		}
		args = append(args, object.GooglePlaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceReviewR{}
			}

			for _, a := range args {
				if a == obj.GooglePlaceID {
					continue Outer
				}
			}

			args = append(args, obj.GooglePlaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`google_places`),
		qm.WhereIn(`google_places.google_place_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GooglePlace")
	}

	var resultSlice []*GooglePlace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GooglePlace")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for google_places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_places")
	}

	if len(googlePlaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GooglePlace = foreign
		if foreign.R == nil {
			foreign.R = &googlePlaceR{}
		}
		foreign.R.GooglePlaceReviews = append(foreign.R.GooglePlaceReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlace = foreign
				if foreign.R == nil {
					foreign.R = &googlePlaceR{}
				}
				foreign.R.GooglePlaceReviews = append(foreign.R.GooglePlaceReviews, local)
				break
			}
		}
	}

	return nil
}

// SetGooglePlace of the googlePlaceReview to the related item.
// Sets o.R.GooglePlace to related.
// Adds o to related.R.GooglePlaceReviews.
func (o *GooglePlaceReview) SetGooglePlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GooglePlace) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `google_place_reviews` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
		strmangle.WhereClause("`", "`", 0, googlePlaceReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.GooglePlaceID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GooglePlaceID = related.GooglePlaceID
	if o.R == nil {
		o.R = &googlePlaceReviewR{
			GooglePlace: related,
		}
	} else {
		o.R.GooglePlace = related
	}

	if related.R == nil {
		related.R = &googlePlaceR{
			GooglePlaceReviews: GooglePlaceReviewSlice{o},
		}
	} else {
		related.R.GooglePlaceReviews = append(related.R.GooglePlaceReviews, o)
	}

	return nil
}

// GooglePlaceReviews retrieves all the records using an executor.
func GooglePlaceReviews(mods ...qm.QueryMod) googlePlaceReviewQuery {
	mods = append(mods, qm.From("`google_place_reviews`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`google_place_reviews`.*"})
	}

	return googlePlaceReviewQuery{q}
}

// FindGooglePlaceReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGooglePlaceReview(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GooglePlaceReview, error) {
	googlePlaceReviewObj := &GooglePlaceReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `google_place_reviews` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, googlePlaceReviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from google_place_reviews")
	}

	if err = googlePlaceReviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return googlePlaceReviewObj, err
	}

	return googlePlaceReviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GooglePlaceReview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no google_place_reviews provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceReviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googlePlaceReviewInsertCacheMut.RLock()
	cache, cached := googlePlaceReviewInsertCache[key]
	googlePlaceReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googlePlaceReviewAllColumns,
			googlePlaceReviewColumnsWithDefault,
			googlePlaceReviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `google_place_reviews` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `google_place_reviews` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `google_place_reviews` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, googlePlaceReviewPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into google_place_reviews")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for google_place_reviews")
	}

CacheNoHooks:
	if !cached {
		googlePlaceReviewInsertCacheMut.Lock()
		googlePlaceReviewInsertCache[key] = cache
		googlePlaceReviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GooglePlaceReview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GooglePlaceReview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	googlePlaceReviewUpdateCacheMut.RLock()
	cache, cached := googlePlaceReviewUpdateCache[key]
	googlePlaceReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googlePlaceReviewAllColumns,
			googlePlaceReviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entities: unable to update google_place_reviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `google_place_reviews` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, googlePlaceReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, append(wl, googlePlaceReviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update google_place_reviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by update for google_place_reviews")
	}

	if !cached {
		googlePlaceReviewUpdateCacheMut.Lock()
		googlePlaceReviewUpdateCache[key] = cache
		googlePlaceReviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q googlePlaceReviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all for google_place_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected for google_place_reviews")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GooglePlaceReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlaceReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `google_place_reviews` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlaceReviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all in googlePlaceReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected all in update all googlePlaceReview")
	}
	return rowsAff, nil
}

var mySQLGooglePlaceReviewUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GooglePlaceReview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no google_place_reviews provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceReviewColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGooglePlaceReviewUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googlePlaceReviewUpsertCacheMut.RLock()
	cache, cached := googlePlaceReviewUpsertCache[key]
	googlePlaceReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			googlePlaceReviewAllColumns,
			googlePlaceReviewColumnsWithDefault,
			googlePlaceReviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			googlePlaceReviewAllColumns,
			googlePlaceReviewPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entities: unable to upsert google_place_reviews, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`google_place_reviews`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `google_place_reviews` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to upsert for google_place_reviews")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(googlePlaceReviewType, googlePlaceReviewMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entities: unable to retrieve unique values for google_place_reviews")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for google_place_reviews")
	}

CacheNoHooks:
	if !cached {
		googlePlaceReviewUpsertCacheMut.Lock()
		googlePlaceReviewUpsertCache[key] = cache
		googlePlaceReviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GooglePlaceReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GooglePlaceReview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entities: no GooglePlaceReview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googlePlaceReviewPrimaryKeyMapping)
	sql := "DELETE FROM `google_place_reviews` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete from google_place_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by delete for google_place_reviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googlePlaceReviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entities: no googlePlaceReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from google_place_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for google_place_reviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GooglePlaceReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(googlePlaceReviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlaceReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `google_place_reviews` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlaceReviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from googlePlaceReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for google_place_reviews")
	}

	if len(googlePlaceReviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GooglePlaceReview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGooglePlaceReview(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GooglePlaceReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GooglePlaceReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlaceReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `google_place_reviews`.* FROM `google_place_reviews` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlaceReviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in GooglePlaceReviewSlice")
	}

	*o = slice

	return nil
}

// GooglePlaceReviewExists checks if the GooglePlaceReview row exists.
func GooglePlaceReviewExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `google_place_reviews` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if google_place_reviews exists")
	}

	return exists, nil
}

// Exists checks if the GooglePlaceReview row exists.
func (o *GooglePlaceReview) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GooglePlaceReviewExists(ctx, exec, o.ID)
}
