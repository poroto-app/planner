// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlanCandidatePlaces(t *testing.T) {
	t.Parallel()

	query := PlanCandidatePlaces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlanCandidatePlacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidatePlacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlanCandidatePlaces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidatePlacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanCandidatePlaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlanCandidatePlacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlanCandidatePlaceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PlanCandidatePlace exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlanCandidatePlaceExists to return true, but got false.")
	}
}

func testPlanCandidatePlacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	planCandidatePlaceFound, err := FindPlanCandidatePlace(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if planCandidatePlaceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlanCandidatePlacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlanCandidatePlaces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlanCandidatePlacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlanCandidatePlaces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlanCandidatePlacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	planCandidatePlaceOne := &PlanCandidatePlace{}
	planCandidatePlaceTwo := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, planCandidatePlaceOne, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}
	if err = randomize.Struct(seed, planCandidatePlaceTwo, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planCandidatePlaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planCandidatePlaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlanCandidatePlaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlanCandidatePlacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	planCandidatePlaceOne := &PlanCandidatePlace{}
	planCandidatePlaceTwo := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, planCandidatePlaceOne, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}
	if err = randomize.Struct(seed, planCandidatePlaceTwo, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planCandidatePlaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planCandidatePlaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func planCandidatePlaceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func planCandidatePlaceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlanCandidatePlace) error {
	*o = PlanCandidatePlace{}
	return nil
}

func testPlanCandidatePlacesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PlanCandidatePlace{}
	o := &PlanCandidatePlace{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace object: %s", err)
	}

	AddPlanCandidatePlaceHook(boil.BeforeInsertHook, planCandidatePlaceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceBeforeInsertHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.AfterInsertHook, planCandidatePlaceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceAfterInsertHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.AfterSelectHook, planCandidatePlaceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceAfterSelectHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.BeforeUpdateHook, planCandidatePlaceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceBeforeUpdateHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.AfterUpdateHook, planCandidatePlaceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceAfterUpdateHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.BeforeDeleteHook, planCandidatePlaceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceBeforeDeleteHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.AfterDeleteHook, planCandidatePlaceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceAfterDeleteHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.BeforeUpsertHook, planCandidatePlaceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceBeforeUpsertHooks = []PlanCandidatePlaceHook{}

	AddPlanCandidatePlaceHook(boil.AfterUpsertHook, planCandidatePlaceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	planCandidatePlaceAfterUpsertHooks = []PlanCandidatePlaceHook{}
}

func testPlanCandidatePlacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanCandidatePlacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(planCandidatePlaceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanCandidatePlaceToOnePlanCandidateUsingPlanCandidate(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlanCandidatePlace
	var foreign PlanCandidate

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, planCandidateDBTypes, false, planCandidateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidate struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlanCandidateID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PlanCandidate().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPlanCandidateHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *PlanCandidate) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlanCandidatePlaceSlice{&local}
	if err = local.L.LoadPlanCandidate(ctx, tx, false, (*[]*PlanCandidatePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlanCandidate == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PlanCandidate = nil
	if err = local.L.LoadPlanCandidate(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PlanCandidate == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlanCandidatePlaceToOnePlaceUsingPlace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlanCandidatePlace
	var foreign Place

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, planCandidatePlaceDBTypes, false, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, placeDBTypes, false, placeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Place struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Place().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPlaceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Place) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PlanCandidatePlaceSlice{&local}
	if err = local.L.LoadPlace(ctx, tx, false, (*[]*PlanCandidatePlace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Place == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Place = nil
	if err = local.L.LoadPlace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Place == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPlanCandidatePlaceToOneSetOpPlanCandidateUsingPlanCandidate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidatePlace
	var b, c PlanCandidate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidatePlaceDBTypes, false, strmangle.SetComplement(planCandidatePlacePrimaryKeyColumns, planCandidatePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, planCandidateDBTypes, false, strmangle.SetComplement(planCandidatePrimaryKeyColumns, planCandidateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, planCandidateDBTypes, false, strmangle.SetComplement(planCandidatePrimaryKeyColumns, planCandidateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PlanCandidate{&b, &c} {
		err = a.SetPlanCandidate(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PlanCandidate != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlanCandidatePlaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlanCandidateID != x.ID {
			t.Error("foreign key was wrong value", a.PlanCandidateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlanCandidateID))
		reflect.Indirect(reflect.ValueOf(&a.PlanCandidateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlanCandidateID != x.ID {
			t.Error("foreign key was wrong value", a.PlanCandidateID, x.ID)
		}
	}
}
func testPlanCandidatePlaceToOneSetOpPlaceUsingPlace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlanCandidatePlace
	var b, c Place

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planCandidatePlaceDBTypes, false, strmangle.SetComplement(planCandidatePlacePrimaryKeyColumns, planCandidatePlaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, placeDBTypes, false, strmangle.SetComplement(placePrimaryKeyColumns, placeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Place{&b, &c} {
		err = a.SetPlace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Place != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlanCandidatePlaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlaceID != x.ID {
			t.Error("foreign key was wrong value", a.PlaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlaceID))
		reflect.Indirect(reflect.ValueOf(&a.PlaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlaceID != x.ID {
			t.Error("foreign key was wrong value", a.PlaceID, x.ID)
		}
	}
}

func testPlanCandidatePlacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlanCandidatePlacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanCandidatePlaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlanCandidatePlacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlanCandidatePlaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	planCandidatePlaceDBTypes = map[string]string{`ID`: `char`, `PlanCandidateID`: `char`, `PlaceID`: `char`, `Order`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                         = bytes.MinRead
)

func testPlanCandidatePlacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(planCandidatePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(planCandidatePlaceAllColumns) == len(planCandidatePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlanCandidatePlacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(planCandidatePlaceAllColumns) == len(planCandidatePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlanCandidatePlace{}
	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planCandidatePlaceDBTypes, true, planCandidatePlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(planCandidatePlaceAllColumns, planCandidatePlacePrimaryKeyColumns) {
		fields = planCandidatePlaceAllColumns
	} else {
		fields = strmangle.SetComplement(
			planCandidatePlaceAllColumns,
			planCandidatePlacePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlanCandidatePlaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlanCandidatePlacesUpsert(t *testing.T) {
	t.Parallel()

	if len(planCandidatePlaceAllColumns) == len(planCandidatePlacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlanCandidatePlaceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlanCandidatePlace{}
	if err = randomize.Struct(seed, &o, planCandidatePlaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlanCandidatePlace: %s", err)
	}

	count, err := PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, planCandidatePlaceDBTypes, false, planCandidatePlacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlanCandidatePlace struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlanCandidatePlace: %s", err)
	}

	count, err = PlanCandidatePlaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
