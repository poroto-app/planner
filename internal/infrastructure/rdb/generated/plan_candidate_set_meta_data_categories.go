// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlanCandidateSetMetaDataCategory is an object representing the database table.
type PlanCandidateSetMetaDataCategory struct {
	ID                 string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlanCandidateSetID string    `boil:"plan_candidate_set_id" json:"plan_candidate_set_id" toml:"plan_candidate_set_id" yaml:"plan_candidate_set_id"`
	Category           string    `boil:"category" json:"category" toml:"category" yaml:"category"`
	IsSelected         bool      `boil:"is_selected" json:"is_selected" toml:"is_selected" yaml:"is_selected"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *planCandidateSetMetaDataCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planCandidateSetMetaDataCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanCandidateSetMetaDataCategoryColumns = struct {
	ID                 string
	PlanCandidateSetID string
	Category           string
	IsSelected         string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	PlanCandidateSetID: "plan_candidate_set_id",
	Category:           "category",
	IsSelected:         "is_selected",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var PlanCandidateSetMetaDataCategoryTableColumns = struct {
	ID                 string
	PlanCandidateSetID string
	Category           string
	IsSelected         string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "plan_candidate_set_meta_data_categories.id",
	PlanCandidateSetID: "plan_candidate_set_meta_data_categories.plan_candidate_set_id",
	Category:           "plan_candidate_set_meta_data_categories.category",
	IsSelected:         "plan_candidate_set_meta_data_categories.is_selected",
	CreatedAt:          "plan_candidate_set_meta_data_categories.created_at",
	UpdatedAt:          "plan_candidate_set_meta_data_categories.updated_at",
}

// Generated where

var PlanCandidateSetMetaDataCategoryWhere = struct {
	ID                 whereHelperstring
	PlanCandidateSetID whereHelperstring
	Category           whereHelperstring
	IsSelected         whereHelperbool
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "`plan_candidate_set_meta_data_categories`.`id`"},
	PlanCandidateSetID: whereHelperstring{field: "`plan_candidate_set_meta_data_categories`.`plan_candidate_set_id`"},
	Category:           whereHelperstring{field: "`plan_candidate_set_meta_data_categories`.`category`"},
	IsSelected:         whereHelperbool{field: "`plan_candidate_set_meta_data_categories`.`is_selected`"},
	CreatedAt:          whereHelpertime_Time{field: "`plan_candidate_set_meta_data_categories`.`created_at`"},
	UpdatedAt:          whereHelpertime_Time{field: "`plan_candidate_set_meta_data_categories`.`updated_at`"},
}

// PlanCandidateSetMetaDataCategoryRels is where relationship names are stored.
var PlanCandidateSetMetaDataCategoryRels = struct {
	PlanCandidateSet string
}{
	PlanCandidateSet: "PlanCandidateSet",
}

// planCandidateSetMetaDataCategoryR is where relationships are stored.
type planCandidateSetMetaDataCategoryR struct {
	PlanCandidateSet *PlanCandidateSet `boil:"PlanCandidateSet" json:"PlanCandidateSet" toml:"PlanCandidateSet" yaml:"PlanCandidateSet"`
}

// NewStruct creates a new relationship struct
func (*planCandidateSetMetaDataCategoryR) NewStruct() *planCandidateSetMetaDataCategoryR {
	return &planCandidateSetMetaDataCategoryR{}
}

func (r *planCandidateSetMetaDataCategoryR) GetPlanCandidateSet() *PlanCandidateSet {
	if r == nil {
		return nil
	}
	return r.PlanCandidateSet
}

// planCandidateSetMetaDataCategoryL is where Load methods for each relationship are stored.
type planCandidateSetMetaDataCategoryL struct{}

var (
	planCandidateSetMetaDataCategoryAllColumns            = []string{"id", "plan_candidate_set_id", "category", "is_selected", "created_at", "updated_at"}
	planCandidateSetMetaDataCategoryColumnsWithoutDefault = []string{"id", "plan_candidate_set_id", "category", "is_selected"}
	planCandidateSetMetaDataCategoryColumnsWithDefault    = []string{"created_at", "updated_at"}
	planCandidateSetMetaDataCategoryPrimaryKeyColumns     = []string{"id"}
	planCandidateSetMetaDataCategoryGeneratedColumns      = []string{}
)

type (
	// PlanCandidateSetMetaDataCategorySlice is an alias for a slice of pointers to PlanCandidateSetMetaDataCategory.
	// This should almost always be used instead of []PlanCandidateSetMetaDataCategory.
	PlanCandidateSetMetaDataCategorySlice []*PlanCandidateSetMetaDataCategory
	// PlanCandidateSetMetaDataCategoryHook is the signature for custom PlanCandidateSetMetaDataCategory hook methods
	PlanCandidateSetMetaDataCategoryHook func(context.Context, boil.ContextExecutor, *PlanCandidateSetMetaDataCategory) error

	planCandidateSetMetaDataCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planCandidateSetMetaDataCategoryType                 = reflect.TypeOf(&PlanCandidateSetMetaDataCategory{})
	planCandidateSetMetaDataCategoryMapping              = queries.MakeStructMapping(planCandidateSetMetaDataCategoryType)
	planCandidateSetMetaDataCategoryPrimaryKeyMapping, _ = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, planCandidateSetMetaDataCategoryPrimaryKeyColumns)
	planCandidateSetMetaDataCategoryInsertCacheMut       sync.RWMutex
	planCandidateSetMetaDataCategoryInsertCache          = make(map[string]insertCache)
	planCandidateSetMetaDataCategoryUpdateCacheMut       sync.RWMutex
	planCandidateSetMetaDataCategoryUpdateCache          = make(map[string]updateCache)
	planCandidateSetMetaDataCategoryUpsertCacheMut       sync.RWMutex
	planCandidateSetMetaDataCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planCandidateSetMetaDataCategoryAfterSelectHooks []PlanCandidateSetMetaDataCategoryHook

var planCandidateSetMetaDataCategoryBeforeInsertHooks []PlanCandidateSetMetaDataCategoryHook
var planCandidateSetMetaDataCategoryAfterInsertHooks []PlanCandidateSetMetaDataCategoryHook

var planCandidateSetMetaDataCategoryBeforeUpdateHooks []PlanCandidateSetMetaDataCategoryHook
var planCandidateSetMetaDataCategoryAfterUpdateHooks []PlanCandidateSetMetaDataCategoryHook

var planCandidateSetMetaDataCategoryBeforeDeleteHooks []PlanCandidateSetMetaDataCategoryHook
var planCandidateSetMetaDataCategoryAfterDeleteHooks []PlanCandidateSetMetaDataCategoryHook

var planCandidateSetMetaDataCategoryBeforeUpsertHooks []PlanCandidateSetMetaDataCategoryHook
var planCandidateSetMetaDataCategoryAfterUpsertHooks []PlanCandidateSetMetaDataCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlanCandidateSetMetaDataCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlanCandidateSetMetaDataCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlanCandidateSetMetaDataCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlanCandidateSetMetaDataCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlanCandidateSetMetaDataCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlanCandidateSetMetaDataCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlanCandidateSetMetaDataCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlanCandidateSetMetaDataCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlanCandidateSetMetaDataCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetMetaDataCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanCandidateSetMetaDataCategoryHook registers your hook function for all future operations.
func AddPlanCandidateSetMetaDataCategoryHook(hookPoint boil.HookPoint, planCandidateSetMetaDataCategoryHook PlanCandidateSetMetaDataCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planCandidateSetMetaDataCategoryAfterSelectHooks = append(planCandidateSetMetaDataCategoryAfterSelectHooks, planCandidateSetMetaDataCategoryHook)
	case boil.BeforeInsertHook:
		planCandidateSetMetaDataCategoryBeforeInsertHooks = append(planCandidateSetMetaDataCategoryBeforeInsertHooks, planCandidateSetMetaDataCategoryHook)
	case boil.AfterInsertHook:
		planCandidateSetMetaDataCategoryAfterInsertHooks = append(planCandidateSetMetaDataCategoryAfterInsertHooks, planCandidateSetMetaDataCategoryHook)
	case boil.BeforeUpdateHook:
		planCandidateSetMetaDataCategoryBeforeUpdateHooks = append(planCandidateSetMetaDataCategoryBeforeUpdateHooks, planCandidateSetMetaDataCategoryHook)
	case boil.AfterUpdateHook:
		planCandidateSetMetaDataCategoryAfterUpdateHooks = append(planCandidateSetMetaDataCategoryAfterUpdateHooks, planCandidateSetMetaDataCategoryHook)
	case boil.BeforeDeleteHook:
		planCandidateSetMetaDataCategoryBeforeDeleteHooks = append(planCandidateSetMetaDataCategoryBeforeDeleteHooks, planCandidateSetMetaDataCategoryHook)
	case boil.AfterDeleteHook:
		planCandidateSetMetaDataCategoryAfterDeleteHooks = append(planCandidateSetMetaDataCategoryAfterDeleteHooks, planCandidateSetMetaDataCategoryHook)
	case boil.BeforeUpsertHook:
		planCandidateSetMetaDataCategoryBeforeUpsertHooks = append(planCandidateSetMetaDataCategoryBeforeUpsertHooks, planCandidateSetMetaDataCategoryHook)
	case boil.AfterUpsertHook:
		planCandidateSetMetaDataCategoryAfterUpsertHooks = append(planCandidateSetMetaDataCategoryAfterUpsertHooks, planCandidateSetMetaDataCategoryHook)
	}
}

// One returns a single planCandidateSetMetaDataCategory record from the query.
func (q planCandidateSetMetaDataCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlanCandidateSetMetaDataCategory, error) {
	o := &PlanCandidateSetMetaDataCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for plan_candidate_set_meta_data_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlanCandidateSetMetaDataCategory records from the query.
func (q planCandidateSetMetaDataCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanCandidateSetMetaDataCategorySlice, error) {
	var o []*PlanCandidateSetMetaDataCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to PlanCandidateSetMetaDataCategory slice")
	}

	if len(planCandidateSetMetaDataCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlanCandidateSetMetaDataCategory records in the query.
func (q planCandidateSetMetaDataCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count plan_candidate_set_meta_data_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planCandidateSetMetaDataCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if plan_candidate_set_meta_data_categories exists")
	}

	return count > 0, nil
}

// PlanCandidateSet pointed to by the foreign key.
func (o *PlanCandidateSetMetaDataCategory) PlanCandidateSet(mods ...qm.QueryMod) planCandidateSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlanCandidateSetID),
	}

	queryMods = append(queryMods, mods...)

	return PlanCandidateSets(queryMods...)
}

// LoadPlanCandidateSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planCandidateSetMetaDataCategoryL) LoadPlanCandidateSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSetMetaDataCategory interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSetMetaDataCategory
	var object *PlanCandidateSetMetaDataCategory

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSetMetaDataCategory.(*PlanCandidateSetMetaDataCategory)
		if !ok {
			object = new(PlanCandidateSetMetaDataCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSetMetaDataCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSetMetaDataCategory))
			}
		}
	} else {
		s, ok := maybePlanCandidateSetMetaDataCategory.(*[]*PlanCandidateSetMetaDataCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSetMetaDataCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSetMetaDataCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetMetaDataCategoryR{}
		}
		args = append(args, object.PlanCandidateSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetMetaDataCategoryR{}
			}

			for _, a := range args {
				if a == obj.PlanCandidateSetID {
					continue Outer
				}
			}

			args = append(args, obj.PlanCandidateSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`plan_candidate_sets`),
		qm.WhereIn(`plan_candidate_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlanCandidateSet")
	}

	var resultSlice []*PlanCandidateSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlanCandidateSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plan_candidate_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_sets")
	}

	if len(planCandidateSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlanCandidateSet = foreign
		if foreign.R == nil {
			foreign.R = &planCandidateSetR{}
		}
		foreign.R.PlanCandidateSetMetaDataCategories = append(foreign.R.PlanCandidateSetMetaDataCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlanCandidateSetID == foreign.ID {
				local.R.PlanCandidateSet = foreign
				if foreign.R == nil {
					foreign.R = &planCandidateSetR{}
				}
				foreign.R.PlanCandidateSetMetaDataCategories = append(foreign.R.PlanCandidateSetMetaDataCategories, local)
				break
			}
		}
	}

	return nil
}

// SetPlanCandidateSet of the planCandidateSetMetaDataCategory to the related item.
// Sets o.R.PlanCandidateSet to related.
// Adds o to related.R.PlanCandidateSetMetaDataCategories.
func (o *PlanCandidateSetMetaDataCategory) SetPlanCandidateSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PlanCandidateSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plan_candidate_set_meta_data_categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
		strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlanCandidateSetID = related.ID
	if o.R == nil {
		o.R = &planCandidateSetMetaDataCategoryR{
			PlanCandidateSet: related,
		}
	} else {
		o.R.PlanCandidateSet = related
	}

	if related.R == nil {
		related.R = &planCandidateSetR{
			PlanCandidateSetMetaDataCategories: PlanCandidateSetMetaDataCategorySlice{o},
		}
	} else {
		related.R.PlanCandidateSetMetaDataCategories = append(related.R.PlanCandidateSetMetaDataCategories, o)
	}

	return nil
}

// PlanCandidateSetMetaDataCategories retrieves all the records using an executor.
func PlanCandidateSetMetaDataCategories(mods ...qm.QueryMod) planCandidateSetMetaDataCategoryQuery {
	mods = append(mods, qm.From("`plan_candidate_set_meta_data_categories`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plan_candidate_set_meta_data_categories`.*"})
	}

	return planCandidateSetMetaDataCategoryQuery{q}
}

// FindPlanCandidateSetMetaDataCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlanCandidateSetMetaDataCategory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PlanCandidateSetMetaDataCategory, error) {
	planCandidateSetMetaDataCategoryObj := &PlanCandidateSetMetaDataCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plan_candidate_set_meta_data_categories` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planCandidateSetMetaDataCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from plan_candidate_set_meta_data_categories")
	}

	if err = planCandidateSetMetaDataCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planCandidateSetMetaDataCategoryObj, err
	}

	return planCandidateSetMetaDataCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlanCandidateSetMetaDataCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plan_candidate_set_meta_data_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetMetaDataCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planCandidateSetMetaDataCategoryInsertCacheMut.RLock()
	cache, cached := planCandidateSetMetaDataCategoryInsertCache[key]
	planCandidateSetMetaDataCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planCandidateSetMetaDataCategoryAllColumns,
			planCandidateSetMetaDataCategoryColumnsWithDefault,
			planCandidateSetMetaDataCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plan_candidate_set_meta_data_categories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plan_candidate_set_meta_data_categories` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plan_candidate_set_meta_data_categories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into plan_candidate_set_meta_data_categories")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plan_candidate_set_meta_data_categories")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetMetaDataCategoryInsertCacheMut.Lock()
		planCandidateSetMetaDataCategoryInsertCache[key] = cache
		planCandidateSetMetaDataCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlanCandidateSetMetaDataCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlanCandidateSetMetaDataCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planCandidateSetMetaDataCategoryUpdateCacheMut.RLock()
	cache, cached := planCandidateSetMetaDataCategoryUpdateCache[key]
	planCandidateSetMetaDataCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planCandidateSetMetaDataCategoryAllColumns,
			planCandidateSetMetaDataCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update plan_candidate_set_meta_data_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plan_candidate_set_meta_data_categories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, append(wl, planCandidateSetMetaDataCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update plan_candidate_set_meta_data_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for plan_candidate_set_meta_data_categories")
	}

	if !cached {
		planCandidateSetMetaDataCategoryUpdateCacheMut.Lock()
		planCandidateSetMetaDataCategoryUpdateCache[key] = cache
		planCandidateSetMetaDataCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planCandidateSetMetaDataCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for plan_candidate_set_meta_data_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for plan_candidate_set_meta_data_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanCandidateSetMetaDataCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetMetaDataCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plan_candidate_set_meta_data_categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in planCandidateSetMetaDataCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all planCandidateSetMetaDataCategory")
	}
	return rowsAff, nil
}

var mySQLPlanCandidateSetMetaDataCategoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlanCandidateSetMetaDataCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plan_candidate_set_meta_data_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetMetaDataCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanCandidateSetMetaDataCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planCandidateSetMetaDataCategoryUpsertCacheMut.RLock()
	cache, cached := planCandidateSetMetaDataCategoryUpsertCache[key]
	planCandidateSetMetaDataCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			planCandidateSetMetaDataCategoryAllColumns,
			planCandidateSetMetaDataCategoryColumnsWithDefault,
			planCandidateSetMetaDataCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planCandidateSetMetaDataCategoryAllColumns,
			planCandidateSetMetaDataCategoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert plan_candidate_set_meta_data_categories, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`plan_candidate_set_meta_data_categories`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plan_candidate_set_meta_data_categories` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for plan_candidate_set_meta_data_categories")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planCandidateSetMetaDataCategoryType, planCandidateSetMetaDataCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for plan_candidate_set_meta_data_categories")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plan_candidate_set_meta_data_categories")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetMetaDataCategoryUpsertCacheMut.Lock()
		planCandidateSetMetaDataCategoryUpsertCache[key] = cache
		planCandidateSetMetaDataCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlanCandidateSetMetaDataCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlanCandidateSetMetaDataCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no PlanCandidateSetMetaDataCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planCandidateSetMetaDataCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `plan_candidate_set_meta_data_categories` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from plan_candidate_set_meta_data_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for plan_candidate_set_meta_data_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planCandidateSetMetaDataCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no planCandidateSetMetaDataCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from plan_candidate_set_meta_data_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plan_candidate_set_meta_data_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanCandidateSetMetaDataCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planCandidateSetMetaDataCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetMetaDataCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plan_candidate_set_meta_data_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from planCandidateSetMetaDataCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plan_candidate_set_meta_data_categories")
	}

	if len(planCandidateSetMetaDataCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlanCandidateSetMetaDataCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlanCandidateSetMetaDataCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanCandidateSetMetaDataCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanCandidateSetMetaDataCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetMetaDataCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plan_candidate_set_meta_data_categories`.* FROM `plan_candidate_set_meta_data_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in PlanCandidateSetMetaDataCategorySlice")
	}

	*o = slice

	return nil
}

// PlanCandidateSetMetaDataCategoryExists checks if the PlanCandidateSetMetaDataCategory row exists.
func PlanCandidateSetMetaDataCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plan_candidate_set_meta_data_categories` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if plan_candidate_set_meta_data_categories exists")
	}

	return exists, nil
}

// Exists checks if the PlanCandidateSetMetaDataCategory row exists.
func (o *PlanCandidateSetMetaDataCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanCandidateSetMetaDataCategoryExists(ctx, exec, o.ID)
}
