// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GooglePlaceOpeningPeriod is an object representing the database table.
type GooglePlaceOpeningPeriod struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	GooglePlaceID string    `boil:"google_place_id" json:"google_place_id" toml:"google_place_id" yaml:"google_place_id"`
	OpenDay       int       `boil:"open_day" json:"open_day" toml:"open_day" yaml:"open_day"`
	OpenTime      string    `boil:"open_time" json:"open_time" toml:"open_time" yaml:"open_time"`
	CloseDay      int       `boil:"close_day" json:"close_day" toml:"close_day" yaml:"close_day"`
	CloseTime     string    `boil:"close_time" json:"close_time" toml:"close_time" yaml:"close_time"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *googlePlaceOpeningPeriodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googlePlaceOpeningPeriodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GooglePlaceOpeningPeriodColumns = struct {
	ID            string
	GooglePlaceID string
	OpenDay       string
	OpenTime      string
	CloseDay      string
	CloseTime     string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	GooglePlaceID: "google_place_id",
	OpenDay:       "open_day",
	OpenTime:      "open_time",
	CloseDay:      "close_day",
	CloseTime:     "close_time",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var GooglePlaceOpeningPeriodTableColumns = struct {
	ID            string
	GooglePlaceID string
	OpenDay       string
	OpenTime      string
	CloseDay      string
	CloseTime     string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "google_place_opening_periods.id",
	GooglePlaceID: "google_place_opening_periods.google_place_id",
	OpenDay:       "google_place_opening_periods.open_day",
	OpenTime:      "google_place_opening_periods.open_time",
	CloseDay:      "google_place_opening_periods.close_day",
	CloseTime:     "google_place_opening_periods.close_time",
	CreatedAt:     "google_place_opening_periods.created_at",
	UpdatedAt:     "google_place_opening_periods.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GooglePlaceOpeningPeriodWhere = struct {
	ID            whereHelperstring
	GooglePlaceID whereHelperstring
	OpenDay       whereHelperint
	OpenTime      whereHelperstring
	CloseDay      whereHelperint
	CloseTime     whereHelperstring
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "`google_place_opening_periods`.`id`"},
	GooglePlaceID: whereHelperstring{field: "`google_place_opening_periods`.`google_place_id`"},
	OpenDay:       whereHelperint{field: "`google_place_opening_periods`.`open_day`"},
	OpenTime:      whereHelperstring{field: "`google_place_opening_periods`.`open_time`"},
	CloseDay:      whereHelperint{field: "`google_place_opening_periods`.`close_day`"},
	CloseTime:     whereHelperstring{field: "`google_place_opening_periods`.`close_time`"},
	CreatedAt:     whereHelpernull_Time{field: "`google_place_opening_periods`.`created_at`"},
	UpdatedAt:     whereHelpernull_Time{field: "`google_place_opening_periods`.`updated_at`"},
}

// GooglePlaceOpeningPeriodRels is where relationship names are stored.
var GooglePlaceOpeningPeriodRels = struct {
	GooglePlace string
}{
	GooglePlace: "GooglePlace",
}

// googlePlaceOpeningPeriodR is where relationships are stored.
type googlePlaceOpeningPeriodR struct {
	GooglePlace *GooglePlace `boil:"GooglePlace" json:"GooglePlace" toml:"GooglePlace" yaml:"GooglePlace"`
}

// NewStruct creates a new relationship struct
func (*googlePlaceOpeningPeriodR) NewStruct() *googlePlaceOpeningPeriodR {
	return &googlePlaceOpeningPeriodR{}
}

func (r *googlePlaceOpeningPeriodR) GetGooglePlace() *GooglePlace {
	if r == nil {
		return nil
	}
	return r.GooglePlace
}

// googlePlaceOpeningPeriodL is where Load methods for each relationship are stored.
type googlePlaceOpeningPeriodL struct{}

var (
	googlePlaceOpeningPeriodAllColumns            = []string{"id", "google_place_id", "open_day", "open_time", "close_day", "close_time", "created_at", "updated_at"}
	googlePlaceOpeningPeriodColumnsWithoutDefault = []string{"google_place_id", "open_day", "open_time", "close_day", "close_time"}
	googlePlaceOpeningPeriodColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	googlePlaceOpeningPeriodPrimaryKeyColumns     = []string{"id"}
	googlePlaceOpeningPeriodGeneratedColumns      = []string{}
)

type (
	// GooglePlaceOpeningPeriodSlice is an alias for a slice of pointers to GooglePlaceOpeningPeriod.
	// This should almost always be used instead of []GooglePlaceOpeningPeriod.
	GooglePlaceOpeningPeriodSlice []*GooglePlaceOpeningPeriod
	// GooglePlaceOpeningPeriodHook is the signature for custom GooglePlaceOpeningPeriod hook methods
	GooglePlaceOpeningPeriodHook func(context.Context, boil.ContextExecutor, *GooglePlaceOpeningPeriod) error

	googlePlaceOpeningPeriodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googlePlaceOpeningPeriodType                 = reflect.TypeOf(&GooglePlaceOpeningPeriod{})
	googlePlaceOpeningPeriodMapping              = queries.MakeStructMapping(googlePlaceOpeningPeriodType)
	googlePlaceOpeningPeriodPrimaryKeyMapping, _ = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, googlePlaceOpeningPeriodPrimaryKeyColumns)
	googlePlaceOpeningPeriodInsertCacheMut       sync.RWMutex
	googlePlaceOpeningPeriodInsertCache          = make(map[string]insertCache)
	googlePlaceOpeningPeriodUpdateCacheMut       sync.RWMutex
	googlePlaceOpeningPeriodUpdateCache          = make(map[string]updateCache)
	googlePlaceOpeningPeriodUpsertCacheMut       sync.RWMutex
	googlePlaceOpeningPeriodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var googlePlaceOpeningPeriodAfterSelectHooks []GooglePlaceOpeningPeriodHook

var googlePlaceOpeningPeriodBeforeInsertHooks []GooglePlaceOpeningPeriodHook
var googlePlaceOpeningPeriodAfterInsertHooks []GooglePlaceOpeningPeriodHook

var googlePlaceOpeningPeriodBeforeUpdateHooks []GooglePlaceOpeningPeriodHook
var googlePlaceOpeningPeriodAfterUpdateHooks []GooglePlaceOpeningPeriodHook

var googlePlaceOpeningPeriodBeforeDeleteHooks []GooglePlaceOpeningPeriodHook
var googlePlaceOpeningPeriodAfterDeleteHooks []GooglePlaceOpeningPeriodHook

var googlePlaceOpeningPeriodBeforeUpsertHooks []GooglePlaceOpeningPeriodHook
var googlePlaceOpeningPeriodAfterUpsertHooks []GooglePlaceOpeningPeriodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GooglePlaceOpeningPeriod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GooglePlaceOpeningPeriod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GooglePlaceOpeningPeriod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GooglePlaceOpeningPeriod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GooglePlaceOpeningPeriod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GooglePlaceOpeningPeriod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GooglePlaceOpeningPeriod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GooglePlaceOpeningPeriod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GooglePlaceOpeningPeriod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceOpeningPeriodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGooglePlaceOpeningPeriodHook registers your hook function for all future operations.
func AddGooglePlaceOpeningPeriodHook(hookPoint boil.HookPoint, googlePlaceOpeningPeriodHook GooglePlaceOpeningPeriodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		googlePlaceOpeningPeriodAfterSelectHooks = append(googlePlaceOpeningPeriodAfterSelectHooks, googlePlaceOpeningPeriodHook)
	case boil.BeforeInsertHook:
		googlePlaceOpeningPeriodBeforeInsertHooks = append(googlePlaceOpeningPeriodBeforeInsertHooks, googlePlaceOpeningPeriodHook)
	case boil.AfterInsertHook:
		googlePlaceOpeningPeriodAfterInsertHooks = append(googlePlaceOpeningPeriodAfterInsertHooks, googlePlaceOpeningPeriodHook)
	case boil.BeforeUpdateHook:
		googlePlaceOpeningPeriodBeforeUpdateHooks = append(googlePlaceOpeningPeriodBeforeUpdateHooks, googlePlaceOpeningPeriodHook)
	case boil.AfterUpdateHook:
		googlePlaceOpeningPeriodAfterUpdateHooks = append(googlePlaceOpeningPeriodAfterUpdateHooks, googlePlaceOpeningPeriodHook)
	case boil.BeforeDeleteHook:
		googlePlaceOpeningPeriodBeforeDeleteHooks = append(googlePlaceOpeningPeriodBeforeDeleteHooks, googlePlaceOpeningPeriodHook)
	case boil.AfterDeleteHook:
		googlePlaceOpeningPeriodAfterDeleteHooks = append(googlePlaceOpeningPeriodAfterDeleteHooks, googlePlaceOpeningPeriodHook)
	case boil.BeforeUpsertHook:
		googlePlaceOpeningPeriodBeforeUpsertHooks = append(googlePlaceOpeningPeriodBeforeUpsertHooks, googlePlaceOpeningPeriodHook)
	case boil.AfterUpsertHook:
		googlePlaceOpeningPeriodAfterUpsertHooks = append(googlePlaceOpeningPeriodAfterUpsertHooks, googlePlaceOpeningPeriodHook)
	}
}

// One returns a single googlePlaceOpeningPeriod record from the query.
func (q googlePlaceOpeningPeriodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GooglePlaceOpeningPeriod, error) {
	o := &GooglePlaceOpeningPeriod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for google_place_opening_periods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GooglePlaceOpeningPeriod records from the query.
func (q googlePlaceOpeningPeriodQuery) All(ctx context.Context, exec boil.ContextExecutor) (GooglePlaceOpeningPeriodSlice, error) {
	var o []*GooglePlaceOpeningPeriod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to GooglePlaceOpeningPeriod slice")
	}

	if len(googlePlaceOpeningPeriodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GooglePlaceOpeningPeriod records in the query.
func (q googlePlaceOpeningPeriodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count google_place_opening_periods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googlePlaceOpeningPeriodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if google_place_opening_periods exists")
	}

	return count > 0, nil
}

// GooglePlace pointed to by the foreign key.
func (o *GooglePlaceOpeningPeriod) GooglePlace(mods ...qm.QueryMod) googlePlaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`google_place_id` = ?", o.GooglePlaceID),
	}

	queryMods = append(queryMods, mods...)

	return GooglePlaces(queryMods...)
}

// LoadGooglePlace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (googlePlaceOpeningPeriodL) LoadGooglePlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlaceOpeningPeriod interface{}, mods queries.Applicator) error {
	var slice []*GooglePlaceOpeningPeriod
	var object *GooglePlaceOpeningPeriod

	if singular {
		var ok bool
		object, ok = maybeGooglePlaceOpeningPeriod.(*GooglePlaceOpeningPeriod)
		if !ok {
			object = new(GooglePlaceOpeningPeriod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlaceOpeningPeriod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlaceOpeningPeriod))
			}
		}
	} else {
		s, ok := maybeGooglePlaceOpeningPeriod.(*[]*GooglePlaceOpeningPeriod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlaceOpeningPeriod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlaceOpeningPeriod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &googlePlaceOpeningPeriodR{}
		}
		args = append(args, object.GooglePlaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceOpeningPeriodR{}
			}

			for _, a := range args {
				if a == obj.GooglePlaceID {
					continue Outer
				}
			}

			args = append(args, obj.GooglePlaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`google_places`),
		qm.WhereIn(`google_places.google_place_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GooglePlace")
	}

	var resultSlice []*GooglePlace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GooglePlace")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for google_places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_places")
	}

	if len(googlePlaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GooglePlace = foreign
		if foreign.R == nil {
			foreign.R = &googlePlaceR{}
		}
		foreign.R.GooglePlaceOpeningPeriods = append(foreign.R.GooglePlaceOpeningPeriods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlace = foreign
				if foreign.R == nil {
					foreign.R = &googlePlaceR{}
				}
				foreign.R.GooglePlaceOpeningPeriods = append(foreign.R.GooglePlaceOpeningPeriods, local)
				break
			}
		}
	}

	return nil
}

// SetGooglePlace of the googlePlaceOpeningPeriod to the related item.
// Sets o.R.GooglePlace to related.
// Adds o to related.R.GooglePlaceOpeningPeriods.
func (o *GooglePlaceOpeningPeriod) SetGooglePlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GooglePlace) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `google_place_opening_periods` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
		strmangle.WhereClause("`", "`", 0, googlePlaceOpeningPeriodPrimaryKeyColumns),
	)
	values := []interface{}{related.GooglePlaceID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GooglePlaceID = related.GooglePlaceID
	if o.R == nil {
		o.R = &googlePlaceOpeningPeriodR{
			GooglePlace: related,
		}
	} else {
		o.R.GooglePlace = related
	}

	if related.R == nil {
		related.R = &googlePlaceR{
			GooglePlaceOpeningPeriods: GooglePlaceOpeningPeriodSlice{o},
		}
	} else {
		related.R.GooglePlaceOpeningPeriods = append(related.R.GooglePlaceOpeningPeriods, o)
	}

	return nil
}

// GooglePlaceOpeningPeriods retrieves all the records using an executor.
func GooglePlaceOpeningPeriods(mods ...qm.QueryMod) googlePlaceOpeningPeriodQuery {
	mods = append(mods, qm.From("`google_place_opening_periods`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`google_place_opening_periods`.*"})
	}

	return googlePlaceOpeningPeriodQuery{q}
}

// FindGooglePlaceOpeningPeriod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGooglePlaceOpeningPeriod(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GooglePlaceOpeningPeriod, error) {
	googlePlaceOpeningPeriodObj := &GooglePlaceOpeningPeriod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `google_place_opening_periods` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, googlePlaceOpeningPeriodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from google_place_opening_periods")
	}

	if err = googlePlaceOpeningPeriodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return googlePlaceOpeningPeriodObj, err
	}

	return googlePlaceOpeningPeriodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GooglePlaceOpeningPeriod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no google_place_opening_periods provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceOpeningPeriodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googlePlaceOpeningPeriodInsertCacheMut.RLock()
	cache, cached := googlePlaceOpeningPeriodInsertCache[key]
	googlePlaceOpeningPeriodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googlePlaceOpeningPeriodAllColumns,
			googlePlaceOpeningPeriodColumnsWithDefault,
			googlePlaceOpeningPeriodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `google_place_opening_periods` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `google_place_opening_periods` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `google_place_opening_periods` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, googlePlaceOpeningPeriodPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into google_place_opening_periods")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for google_place_opening_periods")
	}

CacheNoHooks:
	if !cached {
		googlePlaceOpeningPeriodInsertCacheMut.Lock()
		googlePlaceOpeningPeriodInsertCache[key] = cache
		googlePlaceOpeningPeriodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GooglePlaceOpeningPeriod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GooglePlaceOpeningPeriod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	googlePlaceOpeningPeriodUpdateCacheMut.RLock()
	cache, cached := googlePlaceOpeningPeriodUpdateCache[key]
	googlePlaceOpeningPeriodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googlePlaceOpeningPeriodAllColumns,
			googlePlaceOpeningPeriodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update google_place_opening_periods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `google_place_opening_periods` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, googlePlaceOpeningPeriodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, append(wl, googlePlaceOpeningPeriodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update google_place_opening_periods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for google_place_opening_periods")
	}

	if !cached {
		googlePlaceOpeningPeriodUpdateCacheMut.Lock()
		googlePlaceOpeningPeriodUpdateCache[key] = cache
		googlePlaceOpeningPeriodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q googlePlaceOpeningPeriodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for google_place_opening_periods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for google_place_opening_periods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GooglePlaceOpeningPeriodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlaceOpeningPeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `google_place_opening_periods` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlaceOpeningPeriodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in googlePlaceOpeningPeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all googlePlaceOpeningPeriod")
	}
	return rowsAff, nil
}

var mySQLGooglePlaceOpeningPeriodUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GooglePlaceOpeningPeriod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no google_place_opening_periods provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceOpeningPeriodColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGooglePlaceOpeningPeriodUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googlePlaceOpeningPeriodUpsertCacheMut.RLock()
	cache, cached := googlePlaceOpeningPeriodUpsertCache[key]
	googlePlaceOpeningPeriodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			googlePlaceOpeningPeriodAllColumns,
			googlePlaceOpeningPeriodColumnsWithDefault,
			googlePlaceOpeningPeriodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			googlePlaceOpeningPeriodAllColumns,
			googlePlaceOpeningPeriodPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert google_place_opening_periods, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`google_place_opening_periods`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `google_place_opening_periods` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for google_place_opening_periods")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(googlePlaceOpeningPeriodType, googlePlaceOpeningPeriodMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for google_place_opening_periods")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for google_place_opening_periods")
	}

CacheNoHooks:
	if !cached {
		googlePlaceOpeningPeriodUpsertCacheMut.Lock()
		googlePlaceOpeningPeriodUpsertCache[key] = cache
		googlePlaceOpeningPeriodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GooglePlaceOpeningPeriod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GooglePlaceOpeningPeriod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no GooglePlaceOpeningPeriod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googlePlaceOpeningPeriodPrimaryKeyMapping)
	sql := "DELETE FROM `google_place_opening_periods` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from google_place_opening_periods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for google_place_opening_periods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googlePlaceOpeningPeriodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no googlePlaceOpeningPeriodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from google_place_opening_periods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for google_place_opening_periods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GooglePlaceOpeningPeriodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(googlePlaceOpeningPeriodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlaceOpeningPeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `google_place_opening_periods` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlaceOpeningPeriodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from googlePlaceOpeningPeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for google_place_opening_periods")
	}

	if len(googlePlaceOpeningPeriodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GooglePlaceOpeningPeriod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGooglePlaceOpeningPeriod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GooglePlaceOpeningPeriodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GooglePlaceOpeningPeriodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlaceOpeningPeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `google_place_opening_periods`.* FROM `google_place_opening_periods` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlaceOpeningPeriodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in GooglePlaceOpeningPeriodSlice")
	}

	*o = slice

	return nil
}

// GooglePlaceOpeningPeriodExists checks if the GooglePlaceOpeningPeriod row exists.
func GooglePlaceOpeningPeriodExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `google_place_opening_periods` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if google_place_opening_periods exists")
	}

	return exists, nil
}

// Exists checks if the GooglePlaceOpeningPeriod row exists.
func (o *GooglePlaceOpeningPeriod) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GooglePlaceOpeningPeriodExists(ctx, exec, o.ID)
}
