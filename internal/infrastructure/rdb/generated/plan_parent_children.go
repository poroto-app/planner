// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlanParentChild is an object representing the database table.
type PlanParentChild struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentPlanID string    `boil:"parent_plan_id" json:"parent_plan_id" toml:"parent_plan_id" yaml:"parent_plan_id"`
	ChildPlanID  string    `boil:"child_plan_id" json:"child_plan_id" toml:"child_plan_id" yaml:"child_plan_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *planParentChildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planParentChildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanParentChildColumns = struct {
	ID           string
	ParentPlanID string
	ChildPlanID  string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	ParentPlanID: "parent_plan_id",
	ChildPlanID:  "child_plan_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var PlanParentChildTableColumns = struct {
	ID           string
	ParentPlanID string
	ChildPlanID  string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "plan_parent_children.id",
	ParentPlanID: "plan_parent_children.parent_plan_id",
	ChildPlanID:  "plan_parent_children.child_plan_id",
	CreatedAt:    "plan_parent_children.created_at",
	UpdatedAt:    "plan_parent_children.updated_at",
}

// Generated where

var PlanParentChildWhere = struct {
	ID           whereHelperstring
	ParentPlanID whereHelperstring
	ChildPlanID  whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "`plan_parent_children`.`id`"},
	ParentPlanID: whereHelperstring{field: "`plan_parent_children`.`parent_plan_id`"},
	ChildPlanID:  whereHelperstring{field: "`plan_parent_children`.`child_plan_id`"},
	CreatedAt:    whereHelpertime_Time{field: "`plan_parent_children`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`plan_parent_children`.`updated_at`"},
}

// PlanParentChildRels is where relationship names are stored.
var PlanParentChildRels = struct {
	ParentPlan string
	ChildPlan  string
}{
	ParentPlan: "ParentPlan",
	ChildPlan:  "ChildPlan",
}

// planParentChildR is where relationships are stored.
type planParentChildR struct {
	ParentPlan *Plan `boil:"ParentPlan" json:"ParentPlan" toml:"ParentPlan" yaml:"ParentPlan"`
	ChildPlan  *Plan `boil:"ChildPlan" json:"ChildPlan" toml:"ChildPlan" yaml:"ChildPlan"`
}

// NewStruct creates a new relationship struct
func (*planParentChildR) NewStruct() *planParentChildR {
	return &planParentChildR{}
}

func (r *planParentChildR) GetParentPlan() *Plan {
	if r == nil {
		return nil
	}
	return r.ParentPlan
}

func (r *planParentChildR) GetChildPlan() *Plan {
	if r == nil {
		return nil
	}
	return r.ChildPlan
}

// planParentChildL is where Load methods for each relationship are stored.
type planParentChildL struct{}

var (
	planParentChildAllColumns            = []string{"id", "parent_plan_id", "child_plan_id", "created_at", "updated_at"}
	planParentChildColumnsWithoutDefault = []string{"id", "parent_plan_id", "child_plan_id"}
	planParentChildColumnsWithDefault    = []string{"created_at", "updated_at"}
	planParentChildPrimaryKeyColumns     = []string{"id"}
	planParentChildGeneratedColumns      = []string{}
)

type (
	// PlanParentChildSlice is an alias for a slice of pointers to PlanParentChild.
	// This should almost always be used instead of []PlanParentChild.
	PlanParentChildSlice []*PlanParentChild
	// PlanParentChildHook is the signature for custom PlanParentChild hook methods
	PlanParentChildHook func(context.Context, boil.ContextExecutor, *PlanParentChild) error

	planParentChildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planParentChildType                 = reflect.TypeOf(&PlanParentChild{})
	planParentChildMapping              = queries.MakeStructMapping(planParentChildType)
	planParentChildPrimaryKeyMapping, _ = queries.BindMapping(planParentChildType, planParentChildMapping, planParentChildPrimaryKeyColumns)
	planParentChildInsertCacheMut       sync.RWMutex
	planParentChildInsertCache          = make(map[string]insertCache)
	planParentChildUpdateCacheMut       sync.RWMutex
	planParentChildUpdateCache          = make(map[string]updateCache)
	planParentChildUpsertCacheMut       sync.RWMutex
	planParentChildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planParentChildAfterSelectMu sync.Mutex
var planParentChildAfterSelectHooks []PlanParentChildHook

var planParentChildBeforeInsertMu sync.Mutex
var planParentChildBeforeInsertHooks []PlanParentChildHook
var planParentChildAfterInsertMu sync.Mutex
var planParentChildAfterInsertHooks []PlanParentChildHook

var planParentChildBeforeUpdateMu sync.Mutex
var planParentChildBeforeUpdateHooks []PlanParentChildHook
var planParentChildAfterUpdateMu sync.Mutex
var planParentChildAfterUpdateHooks []PlanParentChildHook

var planParentChildBeforeDeleteMu sync.Mutex
var planParentChildBeforeDeleteHooks []PlanParentChildHook
var planParentChildAfterDeleteMu sync.Mutex
var planParentChildAfterDeleteHooks []PlanParentChildHook

var planParentChildBeforeUpsertMu sync.Mutex
var planParentChildBeforeUpsertHooks []PlanParentChildHook
var planParentChildAfterUpsertMu sync.Mutex
var planParentChildAfterUpsertHooks []PlanParentChildHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlanParentChild) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlanParentChild) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlanParentChild) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlanParentChild) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlanParentChild) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlanParentChild) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlanParentChild) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlanParentChild) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlanParentChild) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planParentChildAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanParentChildHook registers your hook function for all future operations.
func AddPlanParentChildHook(hookPoint boil.HookPoint, planParentChildHook PlanParentChildHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planParentChildAfterSelectMu.Lock()
		planParentChildAfterSelectHooks = append(planParentChildAfterSelectHooks, planParentChildHook)
		planParentChildAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planParentChildBeforeInsertMu.Lock()
		planParentChildBeforeInsertHooks = append(planParentChildBeforeInsertHooks, planParentChildHook)
		planParentChildBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planParentChildAfterInsertMu.Lock()
		planParentChildAfterInsertHooks = append(planParentChildAfterInsertHooks, planParentChildHook)
		planParentChildAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planParentChildBeforeUpdateMu.Lock()
		planParentChildBeforeUpdateHooks = append(planParentChildBeforeUpdateHooks, planParentChildHook)
		planParentChildBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planParentChildAfterUpdateMu.Lock()
		planParentChildAfterUpdateHooks = append(planParentChildAfterUpdateHooks, planParentChildHook)
		planParentChildAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planParentChildBeforeDeleteMu.Lock()
		planParentChildBeforeDeleteHooks = append(planParentChildBeforeDeleteHooks, planParentChildHook)
		planParentChildBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planParentChildAfterDeleteMu.Lock()
		planParentChildAfterDeleteHooks = append(planParentChildAfterDeleteHooks, planParentChildHook)
		planParentChildAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planParentChildBeforeUpsertMu.Lock()
		planParentChildBeforeUpsertHooks = append(planParentChildBeforeUpsertHooks, planParentChildHook)
		planParentChildBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planParentChildAfterUpsertMu.Lock()
		planParentChildAfterUpsertHooks = append(planParentChildAfterUpsertHooks, planParentChildHook)
		planParentChildAfterUpsertMu.Unlock()
	}
}

// One returns a single planParentChild record from the query.
func (q planParentChildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlanParentChild, error) {
	o := &PlanParentChild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for plan_parent_children")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlanParentChild records from the query.
func (q planParentChildQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanParentChildSlice, error) {
	var o []*PlanParentChild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to PlanParentChild slice")
	}

	if len(planParentChildAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlanParentChild records in the query.
func (q planParentChildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count plan_parent_children rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planParentChildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if plan_parent_children exists")
	}

	return count > 0, nil
}

// ParentPlan pointed to by the foreign key.
func (o *PlanParentChild) ParentPlan(mods ...qm.QueryMod) planQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ParentPlanID),
	}

	queryMods = append(queryMods, mods...)

	return Plans(queryMods...)
}

// ChildPlan pointed to by the foreign key.
func (o *PlanParentChild) ChildPlan(mods ...qm.QueryMod) planQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ChildPlanID),
	}

	queryMods = append(queryMods, mods...)

	return Plans(queryMods...)
}

// LoadParentPlan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planParentChildL) LoadParentPlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanParentChild interface{}, mods queries.Applicator) error {
	var slice []*PlanParentChild
	var object *PlanParentChild

	if singular {
		var ok bool
		object, ok = maybePlanParentChild.(*PlanParentChild)
		if !ok {
			object = new(PlanParentChild)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanParentChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanParentChild))
			}
		}
	} else {
		s, ok := maybePlanParentChild.(*[]*PlanParentChild)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanParentChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanParentChild))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planParentChildR{}
		}
		args[object.ParentPlanID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planParentChildR{}
			}

			args[obj.ParentPlanID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plans`),
		qm.WhereIn(`plans.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Plan")
	}

	var resultSlice []*Plan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plans")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentPlan = foreign
		if foreign.R == nil {
			foreign.R = &planR{}
		}
		foreign.R.ParentPlanPlanParentChildren = append(foreign.R.ParentPlanPlanParentChildren, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentPlanID == foreign.ID {
				local.R.ParentPlan = foreign
				if foreign.R == nil {
					foreign.R = &planR{}
				}
				foreign.R.ParentPlanPlanParentChildren = append(foreign.R.ParentPlanPlanParentChildren, local)
				break
			}
		}
	}

	return nil
}

// LoadChildPlan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planParentChildL) LoadChildPlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanParentChild interface{}, mods queries.Applicator) error {
	var slice []*PlanParentChild
	var object *PlanParentChild

	if singular {
		var ok bool
		object, ok = maybePlanParentChild.(*PlanParentChild)
		if !ok {
			object = new(PlanParentChild)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanParentChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanParentChild))
			}
		}
	} else {
		s, ok := maybePlanParentChild.(*[]*PlanParentChild)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanParentChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanParentChild))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planParentChildR{}
		}
		args[object.ChildPlanID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planParentChildR{}
			}

			args[obj.ChildPlanID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plans`),
		qm.WhereIn(`plans.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Plan")
	}

	var resultSlice []*Plan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plans")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChildPlan = foreign
		if foreign.R == nil {
			foreign.R = &planR{}
		}
		foreign.R.ChildPlanPlanParentChildren = append(foreign.R.ChildPlanPlanParentChildren, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChildPlanID == foreign.ID {
				local.R.ChildPlan = foreign
				if foreign.R == nil {
					foreign.R = &planR{}
				}
				foreign.R.ChildPlanPlanParentChildren = append(foreign.R.ChildPlanPlanParentChildren, local)
				break
			}
		}
	}

	return nil
}

// SetParentPlan of the planParentChild to the related item.
// Sets o.R.ParentPlan to related.
// Adds o to related.R.ParentPlanPlanParentChildren.
func (o *PlanParentChild) SetParentPlan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Plan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plan_parent_children` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"parent_plan_id"}),
		strmangle.WhereClause("`", "`", 0, planParentChildPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentPlanID = related.ID
	if o.R == nil {
		o.R = &planParentChildR{
			ParentPlan: related,
		}
	} else {
		o.R.ParentPlan = related
	}

	if related.R == nil {
		related.R = &planR{
			ParentPlanPlanParentChildren: PlanParentChildSlice{o},
		}
	} else {
		related.R.ParentPlanPlanParentChildren = append(related.R.ParentPlanPlanParentChildren, o)
	}

	return nil
}

// SetChildPlan of the planParentChild to the related item.
// Sets o.R.ChildPlan to related.
// Adds o to related.R.ChildPlanPlanParentChildren.
func (o *PlanParentChild) SetChildPlan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Plan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plan_parent_children` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"child_plan_id"}),
		strmangle.WhereClause("`", "`", 0, planParentChildPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChildPlanID = related.ID
	if o.R == nil {
		o.R = &planParentChildR{
			ChildPlan: related,
		}
	} else {
		o.R.ChildPlan = related
	}

	if related.R == nil {
		related.R = &planR{
			ChildPlanPlanParentChildren: PlanParentChildSlice{o},
		}
	} else {
		related.R.ChildPlanPlanParentChildren = append(related.R.ChildPlanPlanParentChildren, o)
	}

	return nil
}

// PlanParentChildren retrieves all the records using an executor.
func PlanParentChildren(mods ...qm.QueryMod) planParentChildQuery {
	mods = append(mods, qm.From("`plan_parent_children`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plan_parent_children`.*"})
	}

	return planParentChildQuery{q}
}

// FindPlanParentChild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlanParentChild(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PlanParentChild, error) {
	planParentChildObj := &PlanParentChild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plan_parent_children` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planParentChildObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from plan_parent_children")
	}

	if err = planParentChildObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planParentChildObj, err
	}

	return planParentChildObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlanParentChild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plan_parent_children provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planParentChildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planParentChildInsertCacheMut.RLock()
	cache, cached := planParentChildInsertCache[key]
	planParentChildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planParentChildAllColumns,
			planParentChildColumnsWithDefault,
			planParentChildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planParentChildType, planParentChildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planParentChildType, planParentChildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plan_parent_children` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plan_parent_children` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plan_parent_children` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planParentChildPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into plan_parent_children")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plan_parent_children")
	}

CacheNoHooks:
	if !cached {
		planParentChildInsertCacheMut.Lock()
		planParentChildInsertCache[key] = cache
		planParentChildInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlanParentChild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlanParentChild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planParentChildUpdateCacheMut.RLock()
	cache, cached := planParentChildUpdateCache[key]
	planParentChildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planParentChildAllColumns,
			planParentChildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update plan_parent_children, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plan_parent_children` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planParentChildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planParentChildType, planParentChildMapping, append(wl, planParentChildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update plan_parent_children row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for plan_parent_children")
	}

	if !cached {
		planParentChildUpdateCacheMut.Lock()
		planParentChildUpdateCache[key] = cache
		planParentChildUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planParentChildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for plan_parent_children")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for plan_parent_children")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanParentChildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planParentChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plan_parent_children` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planParentChildPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in planParentChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all planParentChild")
	}
	return rowsAff, nil
}

var mySQLPlanParentChildUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlanParentChild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plan_parent_children provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planParentChildColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanParentChildUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planParentChildUpsertCacheMut.RLock()
	cache, cached := planParentChildUpsertCache[key]
	planParentChildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planParentChildAllColumns,
			planParentChildColumnsWithDefault,
			planParentChildColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planParentChildAllColumns,
			planParentChildPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert plan_parent_children, could not build update column list")
		}

		ret := strmangle.SetComplement(planParentChildAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`plan_parent_children`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plan_parent_children` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planParentChildType, planParentChildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planParentChildType, planParentChildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for plan_parent_children")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planParentChildType, planParentChildMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for plan_parent_children")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plan_parent_children")
	}

CacheNoHooks:
	if !cached {
		planParentChildUpsertCacheMut.Lock()
		planParentChildUpsertCache[key] = cache
		planParentChildUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlanParentChild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlanParentChild) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no PlanParentChild provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planParentChildPrimaryKeyMapping)
	sql := "DELETE FROM `plan_parent_children` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from plan_parent_children")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for plan_parent_children")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planParentChildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no planParentChildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from plan_parent_children")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plan_parent_children")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanParentChildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planParentChildBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planParentChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plan_parent_children` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planParentChildPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from planParentChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plan_parent_children")
	}

	if len(planParentChildAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlanParentChild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlanParentChild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanParentChildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanParentChildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planParentChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plan_parent_children`.* FROM `plan_parent_children` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planParentChildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in PlanParentChildSlice")
	}

	*o = slice

	return nil
}

// PlanParentChildExists checks if the PlanParentChild row exists.
func PlanParentChildExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plan_parent_children` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if plan_parent_children exists")
	}

	return exists, nil
}

// Exists checks if the PlanParentChild row exists.
func (o *PlanParentChild) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanParentChildExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	PlanParentChildAllColumns            = planParentChildAllColumns
	PlanParentChildColumnsWithoutDefault = planParentChildColumnsWithoutDefault
	PlanParentChildColumnsWithDefault    = planParentChildColumnsWithDefault
	PlanParentChildPrimaryKeyColumns     = planParentChildPrimaryKeyColumns
	PlanParentChildGeneratedColumns      = planParentChildGeneratedColumns
)

// GetID get ID from model object
func (o *PlanParentChild) GetID() string {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s PlanParentChildSlice) GetIDs() []string {
	result := make([]string, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s PlanParentChildSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s PlanParentChildSlice) ToIDMap() map[string]*PlanParentChild {
	result := make(map[string]*PlanParentChild, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s PlanParentChildSlice) ToUniqueItems() PlanParentChildSlice {
	result := make(PlanParentChildSlice, 0, len(s))
	mapChk := make(map[string]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s PlanParentChildSlice) FindItemByID(id string) *PlanParentChild {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s PlanParentChildSlice) FindMissingItemIDs(expectedIDs []string) []string {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []string{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
func (o PlanParentChildSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			planParentChildAllColumns,
			planParentChildColumnsWithDefault,
			planParentChildColumnsWithoutDefault,
			queries.NonZeroDefaultSet(planParentChildColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO `plan_parent_children` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(planParentChildType, planParentChildMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to insert all from planParentChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by insertall for plan_parent_children")
	}

	if len(planParentChildAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o PlanParentChildSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(planParentChildColumnsWithDefault, o[0])
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanParentChildUniqueColumns, o[0])
	if len(nzUniques) == 0 {
		return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	insert, _ := insertColumns.InsertColumnSet(
		planParentChildAllColumns,
		planParentChildColumnsWithDefault,
		planParentChildColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		planParentChildAllColumns,
		planParentChildPrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("generated: unable to upsert plan_parent_children, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `plan_parent_children`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `plan_parent_children`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(planParentChildType, planParentChildMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to upsert for plan_parent_children")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by upsert for plan_parent_children")
	}

	if len(planParentChildAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all PlanParentChild records from the slice.
// This function deletes data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanParentChildSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all PlanParentChild records from the slice.
// This function updates data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanParentChildSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	// NOTE (eric): len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all PlanParentChild records from the slice.
// This function inserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanParentChildSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanParentChildColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all PlanParentChild records from the slice.
// This function upserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanParentChildSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanParentChildColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadParentPlansByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s PlanParentChildSlice) LoadParentPlansByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadParentPlansByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanParentChildSlice) LoadParentPlansByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanParentChild](s, pageSize) {
		if err := chunk[0].L.LoadParentPlan(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanParentChildSlice) GetLoadedParentPlans() PlanSlice {
	result := make(PlanSlice, 0, len(s))
	mapCheckDup := make(map[*Plan]struct{})
	for _, item := range s {
		if item.R == nil || item.R.ParentPlan == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.ParentPlan]; ok {
			continue
		}
		result = append(result, item.R.ParentPlan)
		mapCheckDup[item.R.ParentPlan] = struct{}{}
	}
	return result
}

// LoadChildPlansByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s PlanParentChildSlice) LoadChildPlansByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadChildPlansByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanParentChildSlice) LoadChildPlansByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanParentChild](s, pageSize) {
		if err := chunk[0].L.LoadChildPlan(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanParentChildSlice) GetLoadedChildPlans() PlanSlice {
	result := make(PlanSlice, 0, len(s))
	mapCheckDup := make(map[*Plan]struct{})
	for _, item := range s {
		if item.R == nil || item.R.ChildPlan == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.ChildPlan]; ok {
			continue
		}
		result = append(result, item.R.ChildPlan)
		mapCheckDup[item.R.ChildPlan] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
