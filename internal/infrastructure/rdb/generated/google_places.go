// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GooglePlace is an object representing the database table.
type GooglePlace struct {
	GooglePlaceID    string       `boil:"google_place_id" json:"google_place_id" toml:"google_place_id" yaml:"google_place_id"`
	PlaceID          string       `boil:"place_id" json:"place_id" toml:"place_id" yaml:"place_id"`
	Name             string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	FormattedAddress null.String  `boil:"formatted_address" json:"formatted_address,omitempty" toml:"formatted_address" yaml:"formatted_address,omitempty"`
	Vicinity         null.String  `boil:"vicinity" json:"vicinity,omitempty" toml:"vicinity" yaml:"vicinity,omitempty"`
	PriceLevel       null.Int     `boil:"price_level" json:"price_level,omitempty" toml:"price_level" yaml:"price_level,omitempty"`
	Rating           null.Float32 `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	UserRatingsTotal null.Int     `boil:"user_ratings_total" json:"user_ratings_total,omitempty" toml:"user_ratings_total" yaml:"user_ratings_total,omitempty"`
	Latitude         float64      `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude        float64      `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	CreatedAt        null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *googlePlaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googlePlaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GooglePlaceColumns = struct {
	GooglePlaceID    string
	PlaceID          string
	Name             string
	FormattedAddress string
	Vicinity         string
	PriceLevel       string
	Rating           string
	UserRatingsTotal string
	Latitude         string
	Longitude        string
	CreatedAt        string
	UpdatedAt        string
}{
	GooglePlaceID:    "google_place_id",
	PlaceID:          "place_id",
	Name:             "name",
	FormattedAddress: "formatted_address",
	Vicinity:         "vicinity",
	PriceLevel:       "price_level",
	Rating:           "rating",
	UserRatingsTotal: "user_ratings_total",
	Latitude:         "latitude",
	Longitude:        "longitude",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var GooglePlaceTableColumns = struct {
	GooglePlaceID    string
	PlaceID          string
	Name             string
	FormattedAddress string
	Vicinity         string
	PriceLevel       string
	Rating           string
	UserRatingsTotal string
	Latitude         string
	Longitude        string
	CreatedAt        string
	UpdatedAt        string
}{
	GooglePlaceID:    "google_places.google_place_id",
	PlaceID:          "google_places.place_id",
	Name:             "google_places.name",
	FormattedAddress: "google_places.formatted_address",
	Vicinity:         "google_places.vicinity",
	PriceLevel:       "google_places.price_level",
	Rating:           "google_places.rating",
	UserRatingsTotal: "google_places.user_ratings_total",
	Latitude:         "google_places.latitude",
	Longitude:        "google_places.longitude",
	CreatedAt:        "google_places.created_at",
	UpdatedAt:        "google_places.updated_at",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var GooglePlaceWhere = struct {
	GooglePlaceID    whereHelperstring
	PlaceID          whereHelperstring
	Name             whereHelperstring
	FormattedAddress whereHelpernull_String
	Vicinity         whereHelpernull_String
	PriceLevel       whereHelpernull_Int
	Rating           whereHelpernull_Float32
	UserRatingsTotal whereHelpernull_Int
	Latitude         whereHelperfloat64
	Longitude        whereHelperfloat64
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	GooglePlaceID:    whereHelperstring{field: "`google_places`.`google_place_id`"},
	PlaceID:          whereHelperstring{field: "`google_places`.`place_id`"},
	Name:             whereHelperstring{field: "`google_places`.`name`"},
	FormattedAddress: whereHelpernull_String{field: "`google_places`.`formatted_address`"},
	Vicinity:         whereHelpernull_String{field: "`google_places`.`vicinity`"},
	PriceLevel:       whereHelpernull_Int{field: "`google_places`.`price_level`"},
	Rating:           whereHelpernull_Float32{field: "`google_places`.`rating`"},
	UserRatingsTotal: whereHelpernull_Int{field: "`google_places`.`user_ratings_total`"},
	Latitude:         whereHelperfloat64{field: "`google_places`.`latitude`"},
	Longitude:        whereHelperfloat64{field: "`google_places`.`longitude`"},
	CreatedAt:        whereHelpernull_Time{field: "`google_places`.`created_at`"},
	UpdatedAt:        whereHelpernull_Time{field: "`google_places`.`updated_at`"},
}

// GooglePlaceRels is where relationship names are stored.
var GooglePlaceRels = struct {
	Place                        string
	GooglePlaceOpeningPeriods    string
	GooglePlacePhotoAttributions string
	GooglePlacePhotoReferences   string
	GooglePlacePhotos            string
	GooglePlaceReviews           string
	GooglePlaceTypes             string
}{
	Place:                        "Place",
	GooglePlaceOpeningPeriods:    "GooglePlaceOpeningPeriods",
	GooglePlacePhotoAttributions: "GooglePlacePhotoAttributions",
	GooglePlacePhotoReferences:   "GooglePlacePhotoReferences",
	GooglePlacePhotos:            "GooglePlacePhotos",
	GooglePlaceReviews:           "GooglePlaceReviews",
	GooglePlaceTypes:             "GooglePlaceTypes",
}

// googlePlaceR is where relationships are stored.
type googlePlaceR struct {
	Place                        *Place                           `boil:"Place" json:"Place" toml:"Place" yaml:"Place"`
	GooglePlaceOpeningPeriods    GooglePlaceOpeningPeriodSlice    `boil:"GooglePlaceOpeningPeriods" json:"GooglePlaceOpeningPeriods" toml:"GooglePlaceOpeningPeriods" yaml:"GooglePlaceOpeningPeriods"`
	GooglePlacePhotoAttributions GooglePlacePhotoAttributionSlice `boil:"GooglePlacePhotoAttributions" json:"GooglePlacePhotoAttributions" toml:"GooglePlacePhotoAttributions" yaml:"GooglePlacePhotoAttributions"`
	GooglePlacePhotoReferences   GooglePlacePhotoReferenceSlice   `boil:"GooglePlacePhotoReferences" json:"GooglePlacePhotoReferences" toml:"GooglePlacePhotoReferences" yaml:"GooglePlacePhotoReferences"`
	GooglePlacePhotos            GooglePlacePhotoSlice            `boil:"GooglePlacePhotos" json:"GooglePlacePhotos" toml:"GooglePlacePhotos" yaml:"GooglePlacePhotos"`
	GooglePlaceReviews           GooglePlaceReviewSlice           `boil:"GooglePlaceReviews" json:"GooglePlaceReviews" toml:"GooglePlaceReviews" yaml:"GooglePlaceReviews"`
	GooglePlaceTypes             GooglePlaceTypeSlice             `boil:"GooglePlaceTypes" json:"GooglePlaceTypes" toml:"GooglePlaceTypes" yaml:"GooglePlaceTypes"`
}

// NewStruct creates a new relationship struct
func (*googlePlaceR) NewStruct() *googlePlaceR {
	return &googlePlaceR{}
}

func (r *googlePlaceR) GetPlace() *Place {
	if r == nil {
		return nil
	}
	return r.Place
}

func (r *googlePlaceR) GetGooglePlaceOpeningPeriods() GooglePlaceOpeningPeriodSlice {
	if r == nil {
		return nil
	}
	return r.GooglePlaceOpeningPeriods
}

func (r *googlePlaceR) GetGooglePlacePhotoAttributions() GooglePlacePhotoAttributionSlice {
	if r == nil {
		return nil
	}
	return r.GooglePlacePhotoAttributions
}

func (r *googlePlaceR) GetGooglePlacePhotoReferences() GooglePlacePhotoReferenceSlice {
	if r == nil {
		return nil
	}
	return r.GooglePlacePhotoReferences
}

func (r *googlePlaceR) GetGooglePlacePhotos() GooglePlacePhotoSlice {
	if r == nil {
		return nil
	}
	return r.GooglePlacePhotos
}

func (r *googlePlaceR) GetGooglePlaceReviews() GooglePlaceReviewSlice {
	if r == nil {
		return nil
	}
	return r.GooglePlaceReviews
}

func (r *googlePlaceR) GetGooglePlaceTypes() GooglePlaceTypeSlice {
	if r == nil {
		return nil
	}
	return r.GooglePlaceTypes
}

// googlePlaceL is where Load methods for each relationship are stored.
type googlePlaceL struct{}

var (
	googlePlaceAllColumns            = []string{"google_place_id", "place_id", "name", "formatted_address", "vicinity", "price_level", "rating", "user_ratings_total", "latitude", "longitude", "created_at", "updated_at"}
	googlePlaceColumnsWithoutDefault = []string{"google_place_id", "place_id", "name", "formatted_address", "vicinity", "price_level", "rating", "user_ratings_total", "latitude", "longitude"}
	googlePlaceColumnsWithDefault    = []string{"created_at", "updated_at"}
	googlePlacePrimaryKeyColumns     = []string{"google_place_id"}
	googlePlaceGeneratedColumns      = []string{}
)

type (
	// GooglePlaceSlice is an alias for a slice of pointers to GooglePlace.
	// This should almost always be used instead of []GooglePlace.
	GooglePlaceSlice []*GooglePlace
	// GooglePlaceHook is the signature for custom GooglePlace hook methods
	GooglePlaceHook func(context.Context, boil.ContextExecutor, *GooglePlace) error

	googlePlaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googlePlaceType                 = reflect.TypeOf(&GooglePlace{})
	googlePlaceMapping              = queries.MakeStructMapping(googlePlaceType)
	googlePlacePrimaryKeyMapping, _ = queries.BindMapping(googlePlaceType, googlePlaceMapping, googlePlacePrimaryKeyColumns)
	googlePlaceInsertCacheMut       sync.RWMutex
	googlePlaceInsertCache          = make(map[string]insertCache)
	googlePlaceUpdateCacheMut       sync.RWMutex
	googlePlaceUpdateCache          = make(map[string]updateCache)
	googlePlaceUpsertCacheMut       sync.RWMutex
	googlePlaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var googlePlaceAfterSelectMu sync.Mutex
var googlePlaceAfterSelectHooks []GooglePlaceHook

var googlePlaceBeforeInsertMu sync.Mutex
var googlePlaceBeforeInsertHooks []GooglePlaceHook
var googlePlaceAfterInsertMu sync.Mutex
var googlePlaceAfterInsertHooks []GooglePlaceHook

var googlePlaceBeforeUpdateMu sync.Mutex
var googlePlaceBeforeUpdateHooks []GooglePlaceHook
var googlePlaceAfterUpdateMu sync.Mutex
var googlePlaceAfterUpdateHooks []GooglePlaceHook

var googlePlaceBeforeDeleteMu sync.Mutex
var googlePlaceBeforeDeleteHooks []GooglePlaceHook
var googlePlaceAfterDeleteMu sync.Mutex
var googlePlaceAfterDeleteHooks []GooglePlaceHook

var googlePlaceBeforeUpsertMu sync.Mutex
var googlePlaceBeforeUpsertHooks []GooglePlaceHook
var googlePlaceAfterUpsertMu sync.Mutex
var googlePlaceAfterUpsertHooks []GooglePlaceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GooglePlace) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GooglePlace) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GooglePlace) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GooglePlace) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GooglePlace) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GooglePlace) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GooglePlace) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GooglePlace) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GooglePlace) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlaceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGooglePlaceHook registers your hook function for all future operations.
func AddGooglePlaceHook(hookPoint boil.HookPoint, googlePlaceHook GooglePlaceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		googlePlaceAfterSelectMu.Lock()
		googlePlaceAfterSelectHooks = append(googlePlaceAfterSelectHooks, googlePlaceHook)
		googlePlaceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		googlePlaceBeforeInsertMu.Lock()
		googlePlaceBeforeInsertHooks = append(googlePlaceBeforeInsertHooks, googlePlaceHook)
		googlePlaceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		googlePlaceAfterInsertMu.Lock()
		googlePlaceAfterInsertHooks = append(googlePlaceAfterInsertHooks, googlePlaceHook)
		googlePlaceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		googlePlaceBeforeUpdateMu.Lock()
		googlePlaceBeforeUpdateHooks = append(googlePlaceBeforeUpdateHooks, googlePlaceHook)
		googlePlaceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		googlePlaceAfterUpdateMu.Lock()
		googlePlaceAfterUpdateHooks = append(googlePlaceAfterUpdateHooks, googlePlaceHook)
		googlePlaceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		googlePlaceBeforeDeleteMu.Lock()
		googlePlaceBeforeDeleteHooks = append(googlePlaceBeforeDeleteHooks, googlePlaceHook)
		googlePlaceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		googlePlaceAfterDeleteMu.Lock()
		googlePlaceAfterDeleteHooks = append(googlePlaceAfterDeleteHooks, googlePlaceHook)
		googlePlaceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		googlePlaceBeforeUpsertMu.Lock()
		googlePlaceBeforeUpsertHooks = append(googlePlaceBeforeUpsertHooks, googlePlaceHook)
		googlePlaceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		googlePlaceAfterUpsertMu.Lock()
		googlePlaceAfterUpsertHooks = append(googlePlaceAfterUpsertHooks, googlePlaceHook)
		googlePlaceAfterUpsertMu.Unlock()
	}
}

// One returns a single googlePlace record from the query.
func (q googlePlaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GooglePlace, error) {
	o := &GooglePlace{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for google_places")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GooglePlace records from the query.
func (q googlePlaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (GooglePlaceSlice, error) {
	var o []*GooglePlace

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to GooglePlace slice")
	}

	if len(googlePlaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GooglePlace records in the query.
func (q googlePlaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count google_places rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googlePlaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if google_places exists")
	}

	return count > 0, nil
}

// Place pointed to by the foreign key.
func (o *GooglePlace) Place(mods ...qm.QueryMod) placeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlaceID),
	}

	queryMods = append(queryMods, mods...)

	return Places(queryMods...)
}

// GooglePlaceOpeningPeriods retrieves all the google_place_opening_period's GooglePlaceOpeningPeriods with an executor.
func (o *GooglePlace) GooglePlaceOpeningPeriods(mods ...qm.QueryMod) googlePlaceOpeningPeriodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_opening_periods`.`google_place_id`=?", o.GooglePlaceID),
	)

	return GooglePlaceOpeningPeriods(queryMods...)
}

// GooglePlacePhotoAttributions retrieves all the google_place_photo_attribution's GooglePlacePhotoAttributions with an executor.
func (o *GooglePlace) GooglePlacePhotoAttributions(mods ...qm.QueryMod) googlePlacePhotoAttributionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_photo_attributions`.`google_place_id`=?", o.GooglePlaceID),
	)

	return GooglePlacePhotoAttributions(queryMods...)
}

// GooglePlacePhotoReferences retrieves all the google_place_photo_reference's GooglePlacePhotoReferences with an executor.
func (o *GooglePlace) GooglePlacePhotoReferences(mods ...qm.QueryMod) googlePlacePhotoReferenceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_photo_references`.`google_place_id`=?", o.GooglePlaceID),
	)

	return GooglePlacePhotoReferences(queryMods...)
}

// GooglePlacePhotos retrieves all the google_place_photo's GooglePlacePhotos with an executor.
func (o *GooglePlace) GooglePlacePhotos(mods ...qm.QueryMod) googlePlacePhotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_photos`.`google_place_id`=?", o.GooglePlaceID),
	)

	return GooglePlacePhotos(queryMods...)
}

// GooglePlaceReviews retrieves all the google_place_review's GooglePlaceReviews with an executor.
func (o *GooglePlace) GooglePlaceReviews(mods ...qm.QueryMod) googlePlaceReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_reviews`.`google_place_id`=?", o.GooglePlaceID),
	)

	return GooglePlaceReviews(queryMods...)
}

// GooglePlaceTypes retrieves all the google_place_type's GooglePlaceTypes with an executor.
func (o *GooglePlace) GooglePlaceTypes(mods ...qm.QueryMod) googlePlaceTypeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_types`.`google_place_id`=?", o.GooglePlaceID),
	)

	return GooglePlaceTypes(queryMods...)
}

// LoadPlace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (googlePlaceL) LoadPlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.PlaceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}

			args[obj.PlaceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`places`),
		qm.WhereIn(`places.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Place")
	}

	var resultSlice []*Place
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Place")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for places")
	}

	if len(placeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Place = foreign
		if foreign.R == nil {
			foreign.R = &placeR{}
		}
		foreign.R.GooglePlaces = append(foreign.R.GooglePlaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlaceID == foreign.ID {
				local.R.Place = foreign
				if foreign.R == nil {
					foreign.R = &placeR{}
				}
				foreign.R.GooglePlaces = append(foreign.R.GooglePlaces, local)
				break
			}
		}
	}

	return nil
}

// LoadGooglePlaceOpeningPeriods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlaceL) LoadGooglePlaceOpeningPeriods(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.GooglePlaceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}
			args[obj.GooglePlaceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`google_place_opening_periods`),
		qm.WhereIn(`google_place_opening_periods.google_place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_opening_periods")
	}

	var resultSlice []*GooglePlaceOpeningPeriod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_opening_periods")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_opening_periods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_opening_periods")
	}

	if len(googlePlaceOpeningPeriodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GooglePlaceOpeningPeriods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlaceOpeningPeriodR{}
			}
			foreign.R.GooglePlace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlaceOpeningPeriods = append(local.R.GooglePlaceOpeningPeriods, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlaceOpeningPeriodR{}
				}
				foreign.R.GooglePlace = local
				break
			}
		}
	}

	return nil
}

// LoadGooglePlacePhotoAttributions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlaceL) LoadGooglePlacePhotoAttributions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.GooglePlaceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}
			args[obj.GooglePlaceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`google_place_photo_attributions`),
		qm.WhereIn(`google_place_photo_attributions.google_place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_photo_attributions")
	}

	var resultSlice []*GooglePlacePhotoAttribution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_photo_attributions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_photo_attributions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_photo_attributions")
	}

	if len(googlePlacePhotoAttributionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GooglePlacePhotoAttributions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlacePhotoAttributionR{}
			}
			foreign.R.GooglePlace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlacePhotoAttributions = append(local.R.GooglePlacePhotoAttributions, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlacePhotoAttributionR{}
				}
				foreign.R.GooglePlace = local
				break
			}
		}
	}

	return nil
}

// LoadGooglePlacePhotoReferences allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlaceL) LoadGooglePlacePhotoReferences(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.GooglePlaceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}
			args[obj.GooglePlaceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`google_place_photo_references`),
		qm.WhereIn(`google_place_photo_references.google_place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_photo_references")
	}

	var resultSlice []*GooglePlacePhotoReference
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_photo_references")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_photo_references")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_photo_references")
	}

	if len(googlePlacePhotoReferenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GooglePlacePhotoReferences = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlacePhotoReferenceR{}
			}
			foreign.R.GooglePlace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlacePhotoReferences = append(local.R.GooglePlacePhotoReferences, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlacePhotoReferenceR{}
				}
				foreign.R.GooglePlace = local
				break
			}
		}
	}

	return nil
}

// LoadGooglePlacePhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlaceL) LoadGooglePlacePhotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.GooglePlaceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}
			args[obj.GooglePlaceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`google_place_photos`),
		qm.WhereIn(`google_place_photos.google_place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_photos")
	}

	var resultSlice []*GooglePlacePhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_photos")
	}

	if len(googlePlacePhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GooglePlacePhotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlacePhotoR{}
			}
			foreign.R.GooglePlace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlacePhotos = append(local.R.GooglePlacePhotos, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlacePhotoR{}
				}
				foreign.R.GooglePlace = local
				break
			}
		}
	}

	return nil
}

// LoadGooglePlaceReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlaceL) LoadGooglePlaceReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.GooglePlaceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}
			args[obj.GooglePlaceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`google_place_reviews`),
		qm.WhereIn(`google_place_reviews.google_place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_reviews")
	}

	var resultSlice []*GooglePlaceReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_reviews")
	}

	if len(googlePlaceReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GooglePlaceReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlaceReviewR{}
			}
			foreign.R.GooglePlace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlaceReviews = append(local.R.GooglePlaceReviews, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlaceReviewR{}
				}
				foreign.R.GooglePlace = local
				break
			}
		}
	}

	return nil
}

// LoadGooglePlaceTypes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlaceL) LoadGooglePlaceTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlace interface{}, mods queries.Applicator) error {
	var slice []*GooglePlace
	var object *GooglePlace

	if singular {
		var ok bool
		object, ok = maybeGooglePlace.(*GooglePlace)
		if !ok {
			object = new(GooglePlace)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlace))
			}
		}
	} else {
		s, ok := maybeGooglePlace.(*[]*GooglePlace)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlace)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlace))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &googlePlaceR{}
		}
		args[object.GooglePlaceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlaceR{}
			}
			args[obj.GooglePlaceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`google_place_types`),
		qm.WhereIn(`google_place_types.google_place_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_types")
	}

	var resultSlice []*GooglePlaceType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_types")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_types")
	}

	if len(googlePlaceTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GooglePlaceTypes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlaceTypeR{}
			}
			foreign.R.GooglePlace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlaceTypes = append(local.R.GooglePlaceTypes, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlaceTypeR{}
				}
				foreign.R.GooglePlace = local
				break
			}
		}
	}

	return nil
}

// SetPlace of the googlePlace to the related item.
// Sets o.R.Place to related.
// Adds o to related.R.GooglePlaces.
func (o *GooglePlace) SetPlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Place) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `google_places` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"place_id"}),
		strmangle.WhereClause("`", "`", 0, googlePlacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.GooglePlaceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlaceID = related.ID
	if o.R == nil {
		o.R = &googlePlaceR{
			Place: related,
		}
	} else {
		o.R.Place = related
	}

	if related.R == nil {
		related.R = &placeR{
			GooglePlaces: GooglePlaceSlice{o},
		}
	} else {
		related.R.GooglePlaces = append(related.R.GooglePlaces, o)
	}

	return nil
}

// AddGooglePlaceOpeningPeriods adds the given related objects to the existing relationships
// of the google_place, optionally inserting them as new records.
// Appends related to o.R.GooglePlaceOpeningPeriods.
// Sets related.R.GooglePlace appropriately.
func (o *GooglePlace) AddGooglePlaceOpeningPeriods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlaceOpeningPeriod) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GooglePlaceID = o.GooglePlaceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_opening_periods` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
				strmangle.WhereClause("`", "`", 0, googlePlaceOpeningPeriodPrimaryKeyColumns),
			)
			values := []interface{}{o.GooglePlaceID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GooglePlaceID = o.GooglePlaceID
		}
	}

	if o.R == nil {
		o.R = &googlePlaceR{
			GooglePlaceOpeningPeriods: related,
		}
	} else {
		o.R.GooglePlaceOpeningPeriods = append(o.R.GooglePlaceOpeningPeriods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlaceOpeningPeriodR{
				GooglePlace: o,
			}
		} else {
			rel.R.GooglePlace = o
		}
	}
	return nil
}

// AddGooglePlacePhotoAttributions adds the given related objects to the existing relationships
// of the google_place, optionally inserting them as new records.
// Appends related to o.R.GooglePlacePhotoAttributions.
// Sets related.R.GooglePlace appropriately.
func (o *GooglePlace) AddGooglePlacePhotoAttributions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlacePhotoAttribution) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GooglePlaceID = o.GooglePlaceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_photo_attributions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
				strmangle.WhereClause("`", "`", 0, googlePlacePhotoAttributionPrimaryKeyColumns),
			)
			values := []interface{}{o.GooglePlaceID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GooglePlaceID = o.GooglePlaceID
		}
	}

	if o.R == nil {
		o.R = &googlePlaceR{
			GooglePlacePhotoAttributions: related,
		}
	} else {
		o.R.GooglePlacePhotoAttributions = append(o.R.GooglePlacePhotoAttributions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlacePhotoAttributionR{
				GooglePlace: o,
			}
		} else {
			rel.R.GooglePlace = o
		}
	}
	return nil
}

// AddGooglePlacePhotoReferences adds the given related objects to the existing relationships
// of the google_place, optionally inserting them as new records.
// Appends related to o.R.GooglePlacePhotoReferences.
// Sets related.R.GooglePlace appropriately.
func (o *GooglePlace) AddGooglePlacePhotoReferences(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlacePhotoReference) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GooglePlaceID = o.GooglePlaceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_photo_references` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
				strmangle.WhereClause("`", "`", 0, googlePlacePhotoReferencePrimaryKeyColumns),
			)
			values := []interface{}{o.GooglePlaceID, rel.PhotoReference}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GooglePlaceID = o.GooglePlaceID
		}
	}

	if o.R == nil {
		o.R = &googlePlaceR{
			GooglePlacePhotoReferences: related,
		}
	} else {
		o.R.GooglePlacePhotoReferences = append(o.R.GooglePlacePhotoReferences, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlacePhotoReferenceR{
				GooglePlace: o,
			}
		} else {
			rel.R.GooglePlace = o
		}
	}
	return nil
}

// AddGooglePlacePhotos adds the given related objects to the existing relationships
// of the google_place, optionally inserting them as new records.
// Appends related to o.R.GooglePlacePhotos.
// Sets related.R.GooglePlace appropriately.
func (o *GooglePlace) AddGooglePlacePhotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlacePhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GooglePlaceID = o.GooglePlaceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_photos` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
				strmangle.WhereClause("`", "`", 0, googlePlacePhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.GooglePlaceID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GooglePlaceID = o.GooglePlaceID
		}
	}

	if o.R == nil {
		o.R = &googlePlaceR{
			GooglePlacePhotos: related,
		}
	} else {
		o.R.GooglePlacePhotos = append(o.R.GooglePlacePhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlacePhotoR{
				GooglePlace: o,
			}
		} else {
			rel.R.GooglePlace = o
		}
	}
	return nil
}

// AddGooglePlaceReviews adds the given related objects to the existing relationships
// of the google_place, optionally inserting them as new records.
// Appends related to o.R.GooglePlaceReviews.
// Sets related.R.GooglePlace appropriately.
func (o *GooglePlace) AddGooglePlaceReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlaceReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GooglePlaceID = o.GooglePlaceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_reviews` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
				strmangle.WhereClause("`", "`", 0, googlePlaceReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.GooglePlaceID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GooglePlaceID = o.GooglePlaceID
		}
	}

	if o.R == nil {
		o.R = &googlePlaceR{
			GooglePlaceReviews: related,
		}
	} else {
		o.R.GooglePlaceReviews = append(o.R.GooglePlaceReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlaceReviewR{
				GooglePlace: o,
			}
		} else {
			rel.R.GooglePlace = o
		}
	}
	return nil
}

// AddGooglePlaceTypes adds the given related objects to the existing relationships
// of the google_place, optionally inserting them as new records.
// Appends related to o.R.GooglePlaceTypes.
// Sets related.R.GooglePlace appropriately.
func (o *GooglePlace) AddGooglePlaceTypes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlaceType) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GooglePlaceID = o.GooglePlaceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_types` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
				strmangle.WhereClause("`", "`", 0, googlePlaceTypePrimaryKeyColumns),
			)
			values := []interface{}{o.GooglePlaceID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GooglePlaceID = o.GooglePlaceID
		}
	}

	if o.R == nil {
		o.R = &googlePlaceR{
			GooglePlaceTypes: related,
		}
	} else {
		o.R.GooglePlaceTypes = append(o.R.GooglePlaceTypes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlaceTypeR{
				GooglePlace: o,
			}
		} else {
			rel.R.GooglePlace = o
		}
	}
	return nil
}

// GooglePlaces retrieves all the records using an executor.
func GooglePlaces(mods ...qm.QueryMod) googlePlaceQuery {
	mods = append(mods, qm.From("`google_places`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`google_places`.*"})
	}

	return googlePlaceQuery{q}
}

// FindGooglePlace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGooglePlace(ctx context.Context, exec boil.ContextExecutor, googlePlaceID string, selectCols ...string) (*GooglePlace, error) {
	googlePlaceObj := &GooglePlace{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `google_places` where `google_place_id`=?", sel,
	)

	q := queries.Raw(query, googlePlaceID)

	err := q.Bind(ctx, exec, googlePlaceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from google_places")
	}

	if err = googlePlaceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return googlePlaceObj, err
	}

	return googlePlaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GooglePlace) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no google_places provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googlePlaceInsertCacheMut.RLock()
	cache, cached := googlePlaceInsertCache[key]
	googlePlaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googlePlaceAllColumns,
			googlePlaceColumnsWithDefault,
			googlePlaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googlePlaceType, googlePlaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googlePlaceType, googlePlaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `google_places` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `google_places` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `google_places` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, googlePlacePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into google_places")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GooglePlaceID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for google_places")
	}

CacheNoHooks:
	if !cached {
		googlePlaceInsertCacheMut.Lock()
		googlePlaceInsertCache[key] = cache
		googlePlaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GooglePlace.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GooglePlace) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	googlePlaceUpdateCacheMut.RLock()
	cache, cached := googlePlaceUpdateCache[key]
	googlePlaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googlePlaceAllColumns,
			googlePlacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update google_places, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `google_places` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, googlePlacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googlePlaceType, googlePlaceMapping, append(wl, googlePlacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update google_places row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for google_places")
	}

	if !cached {
		googlePlaceUpdateCacheMut.Lock()
		googlePlaceUpdateCache[key] = cache
		googlePlaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q googlePlaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for google_places")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for google_places")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GooglePlaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `google_places` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in googlePlace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all googlePlace")
	}
	return rowsAff, nil
}

var mySQLGooglePlaceUniqueColumns = []string{
	"google_place_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GooglePlace) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no google_places provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGooglePlaceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googlePlaceUpsertCacheMut.RLock()
	cache, cached := googlePlaceUpsertCache[key]
	googlePlaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			googlePlaceAllColumns,
			googlePlaceColumnsWithDefault,
			googlePlaceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			googlePlaceAllColumns,
			googlePlacePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert google_places, could not build update column list")
		}

		ret := strmangle.SetComplement(googlePlaceAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`google_places`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `google_places` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(googlePlaceType, googlePlaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googlePlaceType, googlePlaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for google_places")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(googlePlaceType, googlePlaceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for google_places")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for google_places")
	}

CacheNoHooks:
	if !cached {
		googlePlaceUpsertCacheMut.Lock()
		googlePlaceUpsertCache[key] = cache
		googlePlaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GooglePlace record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GooglePlace) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no GooglePlace provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googlePlacePrimaryKeyMapping)
	sql := "DELETE FROM `google_places` WHERE `google_place_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from google_places")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for google_places")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googlePlaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no googlePlaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from google_places")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for google_places")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GooglePlaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(googlePlaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `google_places` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from googlePlace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for google_places")
	}

	if len(googlePlaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GooglePlace) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGooglePlace(ctx, exec, o.GooglePlaceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GooglePlaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GooglePlaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `google_places`.* FROM `google_places` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in GooglePlaceSlice")
	}

	*o = slice

	return nil
}

// GooglePlaceExists checks if the GooglePlace row exists.
func GooglePlaceExists(ctx context.Context, exec boil.ContextExecutor, googlePlaceID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `google_places` where `google_place_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, googlePlaceID)
	}
	row := exec.QueryRowContext(ctx, sql, googlePlaceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if google_places exists")
	}

	return exists, nil
}

// Exists checks if the GooglePlace row exists.
func (o *GooglePlace) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GooglePlaceExists(ctx, exec, o.GooglePlaceID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	GooglePlaceAllColumns            = googlePlaceAllColumns
	GooglePlaceColumnsWithoutDefault = googlePlaceColumnsWithoutDefault
	GooglePlaceColumnsWithDefault    = googlePlaceColumnsWithDefault
	GooglePlacePrimaryKeyColumns     = googlePlacePrimaryKeyColumns
	GooglePlaceGeneratedColumns      = googlePlaceGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o GooglePlaceSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			googlePlaceAllColumns,
			googlePlaceColumnsWithDefault,
			googlePlaceColumnsWithoutDefault,
			queries.NonZeroDefaultSet(googlePlaceColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO `google_places` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(googlePlaceType, googlePlaceMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to insert all from googlePlace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by insertall for google_places")
	}

	if len(googlePlaceAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o GooglePlaceSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlaceColumnsWithDefault, o[0])
	nzUniques := queries.NonZeroDefaultSet(mySQLGooglePlaceUniqueColumns, o[0])
	if len(nzUniques) == 0 {
		return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	insert, _ := insertColumns.InsertColumnSet(
		googlePlaceAllColumns,
		googlePlaceColumnsWithDefault,
		googlePlaceColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		googlePlaceAllColumns,
		googlePlacePrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("generated: unable to upsert google_places, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `google_places`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `google_places`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(googlePlaceType, googlePlaceMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}

			queries.SetScanner(&row.UpdatedAt, currTime)
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to upsert for google_places")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by upsert for google_places")
	}

	if len(googlePlaceAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all GooglePlace records from the slice.
// This function deletes data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s GooglePlaceSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all GooglePlace records from the slice.
// This function updates data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s GooglePlaceSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	// NOTE (eric): len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all GooglePlace records from the slice.
// This function inserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s GooglePlaceSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&GooglePlaceColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all GooglePlace records from the slice.
// This function upserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s GooglePlaceSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&GooglePlaceColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadGooglePlaceOpeningPeriodsByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s GooglePlaceSlice) LoadGooglePlaceOpeningPeriodsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadGooglePlaceOpeningPeriodsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadGooglePlaceOpeningPeriodsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadGooglePlaceOpeningPeriods(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedGooglePlaceOpeningPeriods() GooglePlaceOpeningPeriodSlice {
	result := make(GooglePlaceOpeningPeriodSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.GooglePlaceOpeningPeriods == nil {
			continue
		}
		result = append(result, item.R.GooglePlaceOpeningPeriods...)
	}
	return result
}

// LoadGooglePlacePhotoAttributionsByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s GooglePlaceSlice) LoadGooglePlacePhotoAttributionsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadGooglePlacePhotoAttributionsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadGooglePlacePhotoAttributionsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadGooglePlacePhotoAttributions(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedGooglePlacePhotoAttributions() GooglePlacePhotoAttributionSlice {
	result := make(GooglePlacePhotoAttributionSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.GooglePlacePhotoAttributions == nil {
			continue
		}
		result = append(result, item.R.GooglePlacePhotoAttributions...)
	}
	return result
}

// LoadGooglePlacePhotoReferencesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s GooglePlaceSlice) LoadGooglePlacePhotoReferencesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadGooglePlacePhotoReferencesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadGooglePlacePhotoReferencesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadGooglePlacePhotoReferences(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedGooglePlacePhotoReferences() GooglePlacePhotoReferenceSlice {
	result := make(GooglePlacePhotoReferenceSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.GooglePlacePhotoReferences == nil {
			continue
		}
		result = append(result, item.R.GooglePlacePhotoReferences...)
	}
	return result
}

// LoadGooglePlacePhotosByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s GooglePlaceSlice) LoadGooglePlacePhotosByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadGooglePlacePhotosByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadGooglePlacePhotosByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadGooglePlacePhotos(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedGooglePlacePhotos() GooglePlacePhotoSlice {
	result := make(GooglePlacePhotoSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.GooglePlacePhotos == nil {
			continue
		}
		result = append(result, item.R.GooglePlacePhotos...)
	}
	return result
}

// LoadGooglePlaceReviewsByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s GooglePlaceSlice) LoadGooglePlaceReviewsByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadGooglePlaceReviewsByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadGooglePlaceReviewsByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadGooglePlaceReviews(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedGooglePlaceReviews() GooglePlaceReviewSlice {
	result := make(GooglePlaceReviewSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.GooglePlaceReviews == nil {
			continue
		}
		result = append(result, item.R.GooglePlaceReviews...)
	}
	return result
}

// LoadGooglePlaceTypesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s GooglePlaceSlice) LoadGooglePlaceTypesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadGooglePlaceTypesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadGooglePlaceTypesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadGooglePlaceTypes(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedGooglePlaceTypes() GooglePlaceTypeSlice {
	result := make(GooglePlaceTypeSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.GooglePlaceTypes == nil {
			continue
		}
		result = append(result, item.R.GooglePlaceTypes...)
	}
	return result
}

// LoadPlacesByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s GooglePlaceSlice) LoadPlacesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlacesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s GooglePlaceSlice) LoadPlacesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*GooglePlace](s, pageSize) {
		if err := chunk[0].L.LoadPlace(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s GooglePlaceSlice) GetLoadedPlaces() PlaceSlice {
	result := make(PlaceSlice, 0, len(s))
	mapCheckDup := make(map[*Place]struct{})
	for _, item := range s {
		if item.R == nil || item.R.Place == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.Place]; ok {
			continue
		}
		result = append(result, item.R.Place)
		mapCheckDup[item.R.Place] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
