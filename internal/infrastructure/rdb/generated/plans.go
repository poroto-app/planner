// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Plan is an object representing the database table.
type Plan struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Latitude  float64     `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude float64     `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`

	R *planR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanColumns = struct {
	ID        string
	UserID    string
	Name      string
	CreatedAt string
	UpdatedAt string
	Latitude  string
	Longitude string
}{
	ID:        "id",
	UserID:    "user_id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Latitude:  "latitude",
	Longitude: "longitude",
}

var PlanTableColumns = struct {
	ID        string
	UserID    string
	Name      string
	CreatedAt string
	UpdatedAt string
	Latitude  string
	Longitude string
}{
	ID:        "plans.id",
	UserID:    "plans.user_id",
	Name:      "plans.name",
	CreatedAt: "plans.created_at",
	UpdatedAt: "plans.updated_at",
	Latitude:  "plans.latitude",
	Longitude: "plans.longitude",
}

// Generated where

var PlanWhere = struct {
	ID        whereHelperstring
	UserID    whereHelpernull_String
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Latitude  whereHelperfloat64
	Longitude whereHelperfloat64
}{
	ID:        whereHelperstring{field: "`plans`.`id`"},
	UserID:    whereHelpernull_String{field: "`plans`.`user_id`"},
	Name:      whereHelperstring{field: "`plans`.`name`"},
	CreatedAt: whereHelpertime_Time{field: "`plans`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`plans`.`updated_at`"},
	Latitude:  whereHelperfloat64{field: "`plans`.`latitude`"},
	Longitude: whereHelperfloat64{field: "`plans`.`longitude`"},
}

// PlanRels is where relationship names are stored.
var PlanRels = struct {
	User                               string
	ParentPlanPlanCandidateSetMetaData string
	PlanCollages                       string
	ParentPlanPlanParentChildren       string
	ChildPlanPlanParentChildren        string
	PlanPlaces                         string
}{
	User:                               "User",
	ParentPlanPlanCandidateSetMetaData: "ParentPlanPlanCandidateSetMetaData",
	PlanCollages:                       "PlanCollages",
	ParentPlanPlanParentChildren:       "ParentPlanPlanParentChildren",
	ChildPlanPlanParentChildren:        "ChildPlanPlanParentChildren",
	PlanPlaces:                         "PlanPlaces",
}

// planR is where relationships are stored.
type planR struct {
	User                               *User                          `boil:"User" json:"User" toml:"User" yaml:"User"`
	ParentPlanPlanCandidateSetMetaData PlanCandidateSetMetaDatumSlice `boil:"ParentPlanPlanCandidateSetMetaData" json:"ParentPlanPlanCandidateSetMetaData" toml:"ParentPlanPlanCandidateSetMetaData" yaml:"ParentPlanPlanCandidateSetMetaData"`
	PlanCollages                       PlanCollageSlice               `boil:"PlanCollages" json:"PlanCollages" toml:"PlanCollages" yaml:"PlanCollages"`
	ParentPlanPlanParentChildren       PlanParentChildSlice           `boil:"ParentPlanPlanParentChildren" json:"ParentPlanPlanParentChildren" toml:"ParentPlanPlanParentChildren" yaml:"ParentPlanPlanParentChildren"`
	ChildPlanPlanParentChildren        PlanParentChildSlice           `boil:"ChildPlanPlanParentChildren" json:"ChildPlanPlanParentChildren" toml:"ChildPlanPlanParentChildren" yaml:"ChildPlanPlanParentChildren"`
	PlanPlaces                         PlanPlaceSlice                 `boil:"PlanPlaces" json:"PlanPlaces" toml:"PlanPlaces" yaml:"PlanPlaces"`
}

// NewStruct creates a new relationship struct
func (*planR) NewStruct() *planR {
	return &planR{}
}

func (r *planR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *planR) GetParentPlanPlanCandidateSetMetaData() PlanCandidateSetMetaDatumSlice {
	if r == nil {
		return nil
	}
	return r.ParentPlanPlanCandidateSetMetaData
}

func (r *planR) GetPlanCollages() PlanCollageSlice {
	if r == nil {
		return nil
	}
	return r.PlanCollages
}

func (r *planR) GetParentPlanPlanParentChildren() PlanParentChildSlice {
	if r == nil {
		return nil
	}
	return r.ParentPlanPlanParentChildren
}

func (r *planR) GetChildPlanPlanParentChildren() PlanParentChildSlice {
	if r == nil {
		return nil
	}
	return r.ChildPlanPlanParentChildren
}

func (r *planR) GetPlanPlaces() PlanPlaceSlice {
	if r == nil {
		return nil
	}
	return r.PlanPlaces
}

// planL is where Load methods for each relationship are stored.
type planL struct{}

var (
	planAllColumns            = []string{"id", "user_id", "name", "created_at", "updated_at", "latitude", "longitude"}
	planColumnsWithoutDefault = []string{"id", "user_id", "name"}
	planColumnsWithDefault    = []string{"created_at", "updated_at", "latitude", "longitude"}
	planPrimaryKeyColumns     = []string{"id"}
	planGeneratedColumns      = []string{}
)

type (
	// PlanSlice is an alias for a slice of pointers to Plan.
	// This should almost always be used instead of []Plan.
	PlanSlice []*Plan
	// PlanHook is the signature for custom Plan hook methods
	PlanHook func(context.Context, boil.ContextExecutor, *Plan) error

	planQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planType                 = reflect.TypeOf(&Plan{})
	planMapping              = queries.MakeStructMapping(planType)
	planPrimaryKeyMapping, _ = queries.BindMapping(planType, planMapping, planPrimaryKeyColumns)
	planInsertCacheMut       sync.RWMutex
	planInsertCache          = make(map[string]insertCache)
	planUpdateCacheMut       sync.RWMutex
	planUpdateCache          = make(map[string]updateCache)
	planUpsertCacheMut       sync.RWMutex
	planUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planAfterSelectMu sync.Mutex
var planAfterSelectHooks []PlanHook

var planBeforeInsertMu sync.Mutex
var planBeforeInsertHooks []PlanHook
var planAfterInsertMu sync.Mutex
var planAfterInsertHooks []PlanHook

var planBeforeUpdateMu sync.Mutex
var planBeforeUpdateHooks []PlanHook
var planAfterUpdateMu sync.Mutex
var planAfterUpdateHooks []PlanHook

var planBeforeDeleteMu sync.Mutex
var planBeforeDeleteHooks []PlanHook
var planAfterDeleteMu sync.Mutex
var planAfterDeleteHooks []PlanHook

var planBeforeUpsertMu sync.Mutex
var planBeforeUpsertHooks []PlanHook
var planAfterUpsertMu sync.Mutex
var planAfterUpsertHooks []PlanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Plan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Plan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Plan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Plan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Plan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Plan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Plan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Plan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Plan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanHook registers your hook function for all future operations.
func AddPlanHook(hookPoint boil.HookPoint, planHook PlanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planAfterSelectMu.Lock()
		planAfterSelectHooks = append(planAfterSelectHooks, planHook)
		planAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planBeforeInsertMu.Lock()
		planBeforeInsertHooks = append(planBeforeInsertHooks, planHook)
		planBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planAfterInsertMu.Lock()
		planAfterInsertHooks = append(planAfterInsertHooks, planHook)
		planAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planBeforeUpdateMu.Lock()
		planBeforeUpdateHooks = append(planBeforeUpdateHooks, planHook)
		planBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planAfterUpdateMu.Lock()
		planAfterUpdateHooks = append(planAfterUpdateHooks, planHook)
		planAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planBeforeDeleteMu.Lock()
		planBeforeDeleteHooks = append(planBeforeDeleteHooks, planHook)
		planBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planAfterDeleteMu.Lock()
		planAfterDeleteHooks = append(planAfterDeleteHooks, planHook)
		planAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planBeforeUpsertMu.Lock()
		planBeforeUpsertHooks = append(planBeforeUpsertHooks, planHook)
		planBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planAfterUpsertMu.Lock()
		planAfterUpsertHooks = append(planAfterUpsertHooks, planHook)
		planAfterUpsertMu.Unlock()
	}
}

// One returns a single plan record from the query.
func (q planQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Plan, error) {
	o := &Plan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for plans")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Plan records from the query.
func (q planQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanSlice, error) {
	var o []*Plan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to Plan slice")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Plan records in the query.
func (q planQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count plans rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if plans exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Plan) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ParentPlanPlanCandidateSetMetaData retrieves all the plan_candidate_set_meta_datum's PlanCandidateSetMetaData with an executor via parent_plan_id column.
func (o *Plan) ParentPlanPlanCandidateSetMetaData(mods ...qm.QueryMod) planCandidateSetMetaDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_candidate_set_meta_data`.`parent_plan_id`=?", o.ID),
	)

	return PlanCandidateSetMetaData(queryMods...)
}

// PlanCollages retrieves all the plan_collage's PlanCollages with an executor.
func (o *Plan) PlanCollages(mods ...qm.QueryMod) planCollageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_collages`.`plan_id`=?", o.ID),
	)

	return PlanCollages(queryMods...)
}

// ParentPlanPlanParentChildren retrieves all the plan_parent_child's PlanParentChildren with an executor via parent_plan_id column.
func (o *Plan) ParentPlanPlanParentChildren(mods ...qm.QueryMod) planParentChildQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_parent_children`.`parent_plan_id`=?", o.ID),
	)

	return PlanParentChildren(queryMods...)
}

// ChildPlanPlanParentChildren retrieves all the plan_parent_child's PlanParentChildren with an executor via child_plan_id column.
func (o *Plan) ChildPlanPlanParentChildren(mods ...qm.QueryMod) planParentChildQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_parent_children`.`child_plan_id`=?", o.ID),
	)

	return PlanParentChildren(queryMods...)
}

// PlanPlaces retrieves all the plan_place's PlanPlaces with an executor.
func (o *Plan) PlanPlaces(mods ...qm.QueryMod) planPlaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_places`.`plan_id`=?", o.ID),
	)

	return PlanPlaces(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Plans = append(foreign.R.Plans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Plans = append(foreign.R.Plans, local)
				break
			}
		}
	}

	return nil
}

// LoadParentPlanPlanCandidateSetMetaData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadParentPlanPlanCandidateSetMetaData(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_candidate_set_meta_data`),
		qm.WhereIn(`plan_candidate_set_meta_data.parent_plan_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_candidate_set_meta_data")
	}

	var resultSlice []*PlanCandidateSetMetaDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_candidate_set_meta_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_candidate_set_meta_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_set_meta_data")
	}

	if len(planCandidateSetMetaDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentPlanPlanCandidateSetMetaData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCandidateSetMetaDatumR{}
			}
			foreign.R.ParentPlan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentPlanID) {
				local.R.ParentPlanPlanCandidateSetMetaData = append(local.R.ParentPlanPlanCandidateSetMetaData, foreign)
				if foreign.R == nil {
					foreign.R = &planCandidateSetMetaDatumR{}
				}
				foreign.R.ParentPlan = local
				break
			}
		}
	}

	return nil
}

// LoadPlanCollages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadPlanCollages(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_collages`),
		qm.WhereIn(`plan_collages.plan_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_collages")
	}

	var resultSlice []*PlanCollage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_collages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_collages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_collages")
	}

	if len(planCollageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanCollages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCollageR{}
			}
			foreign.R.Plan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanID {
				local.R.PlanCollages = append(local.R.PlanCollages, foreign)
				if foreign.R == nil {
					foreign.R = &planCollageR{}
				}
				foreign.R.Plan = local
				break
			}
		}
	}

	return nil
}

// LoadParentPlanPlanParentChildren allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadParentPlanPlanParentChildren(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_parent_children`),
		qm.WhereIn(`plan_parent_children.parent_plan_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_parent_children")
	}

	var resultSlice []*PlanParentChild
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_parent_children")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_parent_children")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_parent_children")
	}

	if len(planParentChildAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentPlanPlanParentChildren = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planParentChildR{}
			}
			foreign.R.ParentPlan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ParentPlanID {
				local.R.ParentPlanPlanParentChildren = append(local.R.ParentPlanPlanParentChildren, foreign)
				if foreign.R == nil {
					foreign.R = &planParentChildR{}
				}
				foreign.R.ParentPlan = local
				break
			}
		}
	}

	return nil
}

// LoadChildPlanPlanParentChildren allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadChildPlanPlanParentChildren(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_parent_children`),
		qm.WhereIn(`plan_parent_children.child_plan_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_parent_children")
	}

	var resultSlice []*PlanParentChild
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_parent_children")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_parent_children")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_parent_children")
	}

	if len(planParentChildAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildPlanPlanParentChildren = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planParentChildR{}
			}
			foreign.R.ChildPlan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChildPlanID {
				local.R.ChildPlanPlanParentChildren = append(local.R.ChildPlanPlanParentChildren, foreign)
				if foreign.R == nil {
					foreign.R = &planParentChildR{}
				}
				foreign.R.ChildPlan = local
				break
			}
		}
	}

	return nil
}

// LoadPlanPlaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadPlanPlaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_places`),
		qm.WhereIn(`plan_places.plan_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_places")
	}

	var resultSlice []*PlanPlace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_places")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_places")
	}

	if len(planPlaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanPlaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planPlaceR{}
			}
			foreign.R.Plan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanID {
				local.R.PlanPlaces = append(local.R.PlanPlaces, foreign)
				if foreign.R == nil {
					foreign.R = &planPlaceR{}
				}
				foreign.R.Plan = local
				break
			}
		}
	}

	return nil
}

// SetUser of the plan to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Plans.
func (o *Plan) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plans` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, planPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &planR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Plans: PlanSlice{o},
		}
	} else {
		related.R.Plans = append(related.R.Plans, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Plan) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Plans {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Plans)
		if ln > 1 && i < ln-1 {
			related.R.Plans[i] = related.R.Plans[ln-1]
		}
		related.R.Plans = related.R.Plans[:ln-1]
		break
	}
	return nil
}

// AddParentPlanPlanCandidateSetMetaData adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.ParentPlanPlanCandidateSetMetaData.
// Sets related.R.ParentPlan appropriately.
func (o *Plan) AddParentPlanPlanCandidateSetMetaData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidateSetMetaDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentPlanID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_candidate_set_meta_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"parent_plan_id"}),
				strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentPlanID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &planR{
			ParentPlanPlanCandidateSetMetaData: related,
		}
	} else {
		o.R.ParentPlanPlanCandidateSetMetaData = append(o.R.ParentPlanPlanCandidateSetMetaData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCandidateSetMetaDatumR{
				ParentPlan: o,
			}
		} else {
			rel.R.ParentPlan = o
		}
	}
	return nil
}

// SetParentPlanPlanCandidateSetMetaData removes all previously related items of the
// plan replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentPlan's ParentPlanPlanCandidateSetMetaData accordingly.
// Replaces o.R.ParentPlanPlanCandidateSetMetaData with related.
// Sets related.R.ParentPlan's ParentPlanPlanCandidateSetMetaData accordingly.
func (o *Plan) SetParentPlanPlanCandidateSetMetaData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidateSetMetaDatum) error {
	query := "update `plan_candidate_set_meta_data` set `parent_plan_id` = null where `parent_plan_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentPlanPlanCandidateSetMetaData {
			queries.SetScanner(&rel.ParentPlanID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentPlan = nil
		}
		o.R.ParentPlanPlanCandidateSetMetaData = nil
	}

	return o.AddParentPlanPlanCandidateSetMetaData(ctx, exec, insert, related...)
}

// RemoveParentPlanPlanCandidateSetMetaData relationships from objects passed in.
// Removes related items from R.ParentPlanPlanCandidateSetMetaData (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentPlan.
func (o *Plan) RemoveParentPlanPlanCandidateSetMetaData(ctx context.Context, exec boil.ContextExecutor, related ...*PlanCandidateSetMetaDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentPlanID, nil)
		if rel.R != nil {
			rel.R.ParentPlan = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_plan_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentPlanPlanCandidateSetMetaData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentPlanPlanCandidateSetMetaData)
			if ln > 1 && i < ln-1 {
				o.R.ParentPlanPlanCandidateSetMetaData[i] = o.R.ParentPlanPlanCandidateSetMetaData[ln-1]
			}
			o.R.ParentPlanPlanCandidateSetMetaData = o.R.ParentPlanPlanCandidateSetMetaData[:ln-1]
			break
		}
	}

	return nil
}

// AddPlanCollages adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.PlanCollages.
// Sets related.R.Plan appropriately.
func (o *Plan) AddPlanCollages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCollage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_collages` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_id"}),
				strmangle.WhereClause("`", "`", 0, planCollagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planR{
			PlanCollages: related,
		}
	} else {
		o.R.PlanCollages = append(o.R.PlanCollages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCollageR{
				Plan: o,
			}
		} else {
			rel.R.Plan = o
		}
	}
	return nil
}

// AddParentPlanPlanParentChildren adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.ParentPlanPlanParentChildren.
// Sets related.R.ParentPlan appropriately.
func (o *Plan) AddParentPlanPlanParentChildren(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanParentChild) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ParentPlanID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_parent_children` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"parent_plan_id"}),
				strmangle.WhereClause("`", "`", 0, planParentChildPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ParentPlanID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planR{
			ParentPlanPlanParentChildren: related,
		}
	} else {
		o.R.ParentPlanPlanParentChildren = append(o.R.ParentPlanPlanParentChildren, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planParentChildR{
				ParentPlan: o,
			}
		} else {
			rel.R.ParentPlan = o
		}
	}
	return nil
}

// AddChildPlanPlanParentChildren adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.ChildPlanPlanParentChildren.
// Sets related.R.ChildPlan appropriately.
func (o *Plan) AddChildPlanPlanParentChildren(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanParentChild) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChildPlanID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_parent_children` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"child_plan_id"}),
				strmangle.WhereClause("`", "`", 0, planParentChildPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChildPlanID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planR{
			ChildPlanPlanParentChildren: related,
		}
	} else {
		o.R.ChildPlanPlanParentChildren = append(o.R.ChildPlanPlanParentChildren, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planParentChildR{
				ChildPlan: o,
			}
		} else {
			rel.R.ChildPlan = o
		}
	}
	return nil
}

// AddPlanPlaces adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.PlanPlaces.
// Sets related.R.Plan appropriately.
func (o *Plan) AddPlanPlaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanPlace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_places` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_id"}),
				strmangle.WhereClause("`", "`", 0, planPlacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planR{
			PlanPlaces: related,
		}
	} else {
		o.R.PlanPlaces = append(o.R.PlanPlaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planPlaceR{
				Plan: o,
			}
		} else {
			rel.R.Plan = o
		}
	}
	return nil
}

// Plans retrieves all the records using an executor.
func Plans(mods ...qm.QueryMod) planQuery {
	mods = append(mods, qm.From("`plans`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plans`.*"})
	}

	return planQuery{q}
}

// FindPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlan(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Plan, error) {
	planObj := &Plan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plans` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from plans")
	}

	if err = planObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planObj, err
	}

	return planObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plans provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planInsertCacheMut.RLock()
	cache, cached := planInsertCache[key]
	planInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planType, planMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plans` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plans` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plans` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into plans")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plans")
	}

CacheNoHooks:
	if !cached {
		planInsertCacheMut.Lock()
		planInsertCache[key] = cache
		planInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Plan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planUpdateCacheMut.RLock()
	cache, cached := planUpdateCache[key]
	planUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update plans, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plans` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planType, planMapping, append(wl, planPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update plans row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for plans")
	}

	if !cached {
		planUpdateCacheMut.Lock()
		planUpdateCache[key] = cache
		planUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for plans")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plans` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all plan")
	}
	return rowsAff, nil
}

var mySQLPlanUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Plan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plans provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planUpsertCacheMut.RLock()
	cache, cached := planUpsertCache[key]
	planUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert plans, could not build update column list")
		}

		ret := strmangle.SetComplement(planAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`plans`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plans` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planType, planMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for plans")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planType, planMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for plans")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plans")
	}

CacheNoHooks:
	if !cached {
		planUpsertCacheMut.Lock()
		planUpsertCache[key] = cache
		planUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Plan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no Plan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planPrimaryKeyMapping)
	sql := "DELETE FROM `plans` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for plans")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no planQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plans")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plans` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plans")
	}

	if len(planAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlan(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plans`.* FROM `plans` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in PlanSlice")
	}

	*o = slice

	return nil
}

// PlanExists checks if the Plan row exists.
func PlanExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plans` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if plans exists")
	}

	return exists, nil
}

// Exists checks if the Plan row exists.
func (o *Plan) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	PlanAllColumns            = planAllColumns
	PlanColumnsWithoutDefault = planColumnsWithoutDefault
	PlanColumnsWithDefault    = planColumnsWithDefault
	PlanPrimaryKeyColumns     = planPrimaryKeyColumns
	PlanGeneratedColumns      = planGeneratedColumns
)

// GetID get ID from model object
func (o *Plan) GetID() string {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s PlanSlice) GetIDs() []string {
	result := make([]string, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s PlanSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s PlanSlice) ToIDMap() map[string]*Plan {
	result := make(map[string]*Plan, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s PlanSlice) ToUniqueItems() PlanSlice {
	result := make(PlanSlice, 0, len(s))
	mapChk := make(map[string]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s PlanSlice) FindItemByID(id string) *Plan {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s PlanSlice) FindMissingItemIDs(expectedIDs []string) []string {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []string{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
func (o PlanSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			queries.NonZeroDefaultSet(planColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO `plans` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to insert all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by insertall for plans")
	}

	if len(planAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o PlanSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o[0])
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanUniqueColumns, o[0])
	if len(nzUniques) == 0 {
		return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	insert, _ := insertColumns.InsertColumnSet(
		planAllColumns,
		planColumnsWithDefault,
		planColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		planAllColumns,
		planPrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("generated: unable to upsert plans, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `plans`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `plans`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(planType, planMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to upsert for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by upsert for plans")
	}

	if len(planAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all Plan records from the slice.
// This function deletes data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all Plan records from the slice.
// This function updates data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	// NOTE (eric): len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all Plan records from the slice.
// This function inserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all Plan records from the slice.
// This function upserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadParentPlanPlanCandidateSetMetaDataByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanSlice) LoadParentPlanPlanCandidateSetMetaDataByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadParentPlanPlanCandidateSetMetaDataByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadParentPlanPlanCandidateSetMetaDataByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadParentPlanPlanCandidateSetMetaData(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedParentPlanPlanCandidateSetMetaData() PlanCandidateSetMetaDatumSlice {
	result := make(PlanCandidateSetMetaDatumSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.ParentPlanPlanCandidateSetMetaData == nil {
			continue
		}
		result = append(result, item.R.ParentPlanPlanCandidateSetMetaData...)
	}
	return result
}

// LoadPlanCollagesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanSlice) LoadPlanCollagesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanCollagesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadPlanCollagesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadPlanCollages(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedPlanCollages() PlanCollageSlice {
	result := make(PlanCollageSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanCollages == nil {
			continue
		}
		result = append(result, item.R.PlanCollages...)
	}
	return result
}

// LoadParentPlanPlanParentChildrenByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanSlice) LoadParentPlanPlanParentChildrenByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadParentPlanPlanParentChildrenByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadParentPlanPlanParentChildrenByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadParentPlanPlanParentChildren(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedParentPlanPlanParentChildren() PlanParentChildSlice {
	result := make(PlanParentChildSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.ParentPlanPlanParentChildren == nil {
			continue
		}
		result = append(result, item.R.ParentPlanPlanParentChildren...)
	}
	return result
}

// LoadChildPlanPlanParentChildrenByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanSlice) LoadChildPlanPlanParentChildrenByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadChildPlanPlanParentChildrenByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadChildPlanPlanParentChildrenByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadChildPlanPlanParentChildren(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedChildPlanPlanParentChildren() PlanParentChildSlice {
	result := make(PlanParentChildSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.ChildPlanPlanParentChildren == nil {
			continue
		}
		result = append(result, item.R.ChildPlanPlanParentChildren...)
	}
	return result
}

// LoadPlanPlacesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanSlice) LoadPlanPlacesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanPlacesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadPlanPlacesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadPlanPlaces(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedPlanPlaces() PlanPlaceSlice {
	result := make(PlanPlaceSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanPlaces == nil {
			continue
		}
		result = append(result, item.R.PlanPlaces...)
	}
	return result
}

// LoadUsersByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s PlanSlice) LoadUsersByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadUsersByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadUsersByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadUser(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedUsers() UserSlice {
	result := make(UserSlice, 0, len(s))
	mapCheckDup := make(map[*User]struct{})
	for _, item := range s {
		if item.R == nil || item.R.User == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.User]; ok {
			continue
		}
		result = append(result, item.R.User)
		mapCheckDup[item.R.User] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
