// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlanCandidateSet is an object representing the database table.
type PlanCandidateSet struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExpiresAt       time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	IsPlaceSearched bool      `boil:"is_place_searched" json:"is_place_searched" toml:"is_place_searched" yaml:"is_place_searched"`

	R *planCandidateSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planCandidateSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanCandidateSetColumns = struct {
	ID              string
	ExpiresAt       string
	CreatedAt       string
	UpdatedAt       string
	IsPlaceSearched string
}{
	ID:              "id",
	ExpiresAt:       "expires_at",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	IsPlaceSearched: "is_place_searched",
}

var PlanCandidateSetTableColumns = struct {
	ID              string
	ExpiresAt       string
	CreatedAt       string
	UpdatedAt       string
	IsPlaceSearched string
}{
	ID:              "plan_candidate_sets.id",
	ExpiresAt:       "plan_candidate_sets.expires_at",
	CreatedAt:       "plan_candidate_sets.created_at",
	UpdatedAt:       "plan_candidate_sets.updated_at",
	IsPlaceSearched: "plan_candidate_sets.is_place_searched",
}

// Generated where

var PlanCandidateSetWhere = struct {
	ID              whereHelperstring
	ExpiresAt       whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	IsPlaceSearched whereHelperbool
}{
	ID:              whereHelperstring{field: "`plan_candidate_sets`.`id`"},
	ExpiresAt:       whereHelpertime_Time{field: "`plan_candidate_sets`.`expires_at`"},
	CreatedAt:       whereHelpertime_Time{field: "`plan_candidate_sets`.`created_at`"},
	UpdatedAt:       whereHelpertime_Time{field: "`plan_candidate_sets`.`updated_at`"},
	IsPlaceSearched: whereHelperbool{field: "`plan_candidate_sets`.`is_place_searched`"},
}

// PlanCandidateSetRels is where relationship names are stored.
var PlanCandidateSetRels = struct {
	PlanCandidatePlaces                string
	PlanCandidateSetLikePlaces         string
	PlanCandidateSetMetaData           string
	PlanCandidateSetMetaDataCategories string
	PlanCandidates                     string
}{
	PlanCandidatePlaces:                "PlanCandidatePlaces",
	PlanCandidateSetLikePlaces:         "PlanCandidateSetLikePlaces",
	PlanCandidateSetMetaData:           "PlanCandidateSetMetaData",
	PlanCandidateSetMetaDataCategories: "PlanCandidateSetMetaDataCategories",
	PlanCandidates:                     "PlanCandidates",
}

// planCandidateSetR is where relationships are stored.
type planCandidateSetR struct {
	PlanCandidatePlaces                PlanCandidatePlaceSlice               `boil:"PlanCandidatePlaces" json:"PlanCandidatePlaces" toml:"PlanCandidatePlaces" yaml:"PlanCandidatePlaces"`
	PlanCandidateSetLikePlaces         PlanCandidateSetLikePlaceSlice        `boil:"PlanCandidateSetLikePlaces" json:"PlanCandidateSetLikePlaces" toml:"PlanCandidateSetLikePlaces" yaml:"PlanCandidateSetLikePlaces"`
	PlanCandidateSetMetaData           PlanCandidateSetMetaDatumSlice        `boil:"PlanCandidateSetMetaData" json:"PlanCandidateSetMetaData" toml:"PlanCandidateSetMetaData" yaml:"PlanCandidateSetMetaData"`
	PlanCandidateSetMetaDataCategories PlanCandidateSetMetaDataCategorySlice `boil:"PlanCandidateSetMetaDataCategories" json:"PlanCandidateSetMetaDataCategories" toml:"PlanCandidateSetMetaDataCategories" yaml:"PlanCandidateSetMetaDataCategories"`
	PlanCandidates                     PlanCandidateSlice                    `boil:"PlanCandidates" json:"PlanCandidates" toml:"PlanCandidates" yaml:"PlanCandidates"`
}

// NewStruct creates a new relationship struct
func (*planCandidateSetR) NewStruct() *planCandidateSetR {
	return &planCandidateSetR{}
}

func (r *planCandidateSetR) GetPlanCandidatePlaces() PlanCandidatePlaceSlice {
	if r == nil {
		return nil
	}
	return r.PlanCandidatePlaces
}

func (r *planCandidateSetR) GetPlanCandidateSetLikePlaces() PlanCandidateSetLikePlaceSlice {
	if r == nil {
		return nil
	}
	return r.PlanCandidateSetLikePlaces
}

func (r *planCandidateSetR) GetPlanCandidateSetMetaData() PlanCandidateSetMetaDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlanCandidateSetMetaData
}

func (r *planCandidateSetR) GetPlanCandidateSetMetaDataCategories() PlanCandidateSetMetaDataCategorySlice {
	if r == nil {
		return nil
	}
	return r.PlanCandidateSetMetaDataCategories
}

func (r *planCandidateSetR) GetPlanCandidates() PlanCandidateSlice {
	if r == nil {
		return nil
	}
	return r.PlanCandidates
}

// planCandidateSetL is where Load methods for each relationship are stored.
type planCandidateSetL struct{}

var (
	planCandidateSetAllColumns            = []string{"id", "expires_at", "created_at", "updated_at", "is_place_searched"}
	planCandidateSetColumnsWithoutDefault = []string{"id", "expires_at"}
	planCandidateSetColumnsWithDefault    = []string{"created_at", "updated_at", "is_place_searched"}
	planCandidateSetPrimaryKeyColumns     = []string{"id"}
	planCandidateSetGeneratedColumns      = []string{}
)

type (
	// PlanCandidateSetSlice is an alias for a slice of pointers to PlanCandidateSet.
	// This should almost always be used instead of []PlanCandidateSet.
	PlanCandidateSetSlice []*PlanCandidateSet
	// PlanCandidateSetHook is the signature for custom PlanCandidateSet hook methods
	PlanCandidateSetHook func(context.Context, boil.ContextExecutor, *PlanCandidateSet) error

	planCandidateSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planCandidateSetType                 = reflect.TypeOf(&PlanCandidateSet{})
	planCandidateSetMapping              = queries.MakeStructMapping(planCandidateSetType)
	planCandidateSetPrimaryKeyMapping, _ = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, planCandidateSetPrimaryKeyColumns)
	planCandidateSetInsertCacheMut       sync.RWMutex
	planCandidateSetInsertCache          = make(map[string]insertCache)
	planCandidateSetUpdateCacheMut       sync.RWMutex
	planCandidateSetUpdateCache          = make(map[string]updateCache)
	planCandidateSetUpsertCacheMut       sync.RWMutex
	planCandidateSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planCandidateSetAfterSelectMu sync.Mutex
var planCandidateSetAfterSelectHooks []PlanCandidateSetHook

var planCandidateSetBeforeInsertMu sync.Mutex
var planCandidateSetBeforeInsertHooks []PlanCandidateSetHook
var planCandidateSetAfterInsertMu sync.Mutex
var planCandidateSetAfterInsertHooks []PlanCandidateSetHook

var planCandidateSetBeforeUpdateMu sync.Mutex
var planCandidateSetBeforeUpdateHooks []PlanCandidateSetHook
var planCandidateSetAfterUpdateMu sync.Mutex
var planCandidateSetAfterUpdateHooks []PlanCandidateSetHook

var planCandidateSetBeforeDeleteMu sync.Mutex
var planCandidateSetBeforeDeleteHooks []PlanCandidateSetHook
var planCandidateSetAfterDeleteMu sync.Mutex
var planCandidateSetAfterDeleteHooks []PlanCandidateSetHook

var planCandidateSetBeforeUpsertMu sync.Mutex
var planCandidateSetBeforeUpsertHooks []PlanCandidateSetHook
var planCandidateSetAfterUpsertMu sync.Mutex
var planCandidateSetAfterUpsertHooks []PlanCandidateSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlanCandidateSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlanCandidateSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlanCandidateSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlanCandidateSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlanCandidateSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlanCandidateSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlanCandidateSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlanCandidateSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlanCandidateSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planCandidateSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanCandidateSetHook registers your hook function for all future operations.
func AddPlanCandidateSetHook(hookPoint boil.HookPoint, planCandidateSetHook PlanCandidateSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planCandidateSetAfterSelectMu.Lock()
		planCandidateSetAfterSelectHooks = append(planCandidateSetAfterSelectHooks, planCandidateSetHook)
		planCandidateSetAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planCandidateSetBeforeInsertMu.Lock()
		planCandidateSetBeforeInsertHooks = append(planCandidateSetBeforeInsertHooks, planCandidateSetHook)
		planCandidateSetBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planCandidateSetAfterInsertMu.Lock()
		planCandidateSetAfterInsertHooks = append(planCandidateSetAfterInsertHooks, planCandidateSetHook)
		planCandidateSetAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planCandidateSetBeforeUpdateMu.Lock()
		planCandidateSetBeforeUpdateHooks = append(planCandidateSetBeforeUpdateHooks, planCandidateSetHook)
		planCandidateSetBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planCandidateSetAfterUpdateMu.Lock()
		planCandidateSetAfterUpdateHooks = append(planCandidateSetAfterUpdateHooks, planCandidateSetHook)
		planCandidateSetAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planCandidateSetBeforeDeleteMu.Lock()
		planCandidateSetBeforeDeleteHooks = append(planCandidateSetBeforeDeleteHooks, planCandidateSetHook)
		planCandidateSetBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planCandidateSetAfterDeleteMu.Lock()
		planCandidateSetAfterDeleteHooks = append(planCandidateSetAfterDeleteHooks, planCandidateSetHook)
		planCandidateSetAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planCandidateSetBeforeUpsertMu.Lock()
		planCandidateSetBeforeUpsertHooks = append(planCandidateSetBeforeUpsertHooks, planCandidateSetHook)
		planCandidateSetBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planCandidateSetAfterUpsertMu.Lock()
		planCandidateSetAfterUpsertHooks = append(planCandidateSetAfterUpsertHooks, planCandidateSetHook)
		planCandidateSetAfterUpsertMu.Unlock()
	}
}

// One returns a single planCandidateSet record from the query.
func (q planCandidateSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlanCandidateSet, error) {
	o := &PlanCandidateSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for plan_candidate_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlanCandidateSet records from the query.
func (q planCandidateSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanCandidateSetSlice, error) {
	var o []*PlanCandidateSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to PlanCandidateSet slice")
	}

	if len(planCandidateSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlanCandidateSet records in the query.
func (q planCandidateSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count plan_candidate_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planCandidateSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if plan_candidate_sets exists")
	}

	return count > 0, nil
}

// PlanCandidatePlaces retrieves all the plan_candidate_place's PlanCandidatePlaces with an executor.
func (o *PlanCandidateSet) PlanCandidatePlaces(mods ...qm.QueryMod) planCandidatePlaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_candidate_places`.`plan_candidate_set_id`=?", o.ID),
	)

	return PlanCandidatePlaces(queryMods...)
}

// PlanCandidateSetLikePlaces retrieves all the plan_candidate_set_like_place's PlanCandidateSetLikePlaces with an executor.
func (o *PlanCandidateSet) PlanCandidateSetLikePlaces(mods ...qm.QueryMod) planCandidateSetLikePlaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_candidate_set_like_places`.`plan_candidate_set_id`=?", o.ID),
	)

	return PlanCandidateSetLikePlaces(queryMods...)
}

// PlanCandidateSetMetaData retrieves all the plan_candidate_set_meta_datum's PlanCandidateSetMetaData with an executor.
func (o *PlanCandidateSet) PlanCandidateSetMetaData(mods ...qm.QueryMod) planCandidateSetMetaDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_candidate_set_meta_data`.`plan_candidate_set_id`=?", o.ID),
	)

	return PlanCandidateSetMetaData(queryMods...)
}

// PlanCandidateSetMetaDataCategories retrieves all the plan_candidate_set_meta_data_category's PlanCandidateSetMetaDataCategories with an executor.
func (o *PlanCandidateSet) PlanCandidateSetMetaDataCategories(mods ...qm.QueryMod) planCandidateSetMetaDataCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_candidate_set_meta_data_categories`.`plan_candidate_set_id`=?", o.ID),
	)

	return PlanCandidateSetMetaDataCategories(queryMods...)
}

// PlanCandidates retrieves all the plan_candidate's PlanCandidates with an executor.
func (o *PlanCandidateSet) PlanCandidates(mods ...qm.QueryMod) planCandidateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`plan_candidates`.`plan_candidate_set_id`=?", o.ID),
	)

	return PlanCandidates(queryMods...)
}

// LoadPlanCandidatePlaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planCandidateSetL) LoadPlanCandidatePlaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSet interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSet
	var object *PlanCandidateSet

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSet.(*PlanCandidateSet)
		if !ok {
			object = new(PlanCandidateSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSet))
			}
		}
	} else {
		s, ok := maybePlanCandidateSet.(*[]*PlanCandidateSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_candidate_places`),
		qm.WhereIn(`plan_candidate_places.plan_candidate_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_candidate_places")
	}

	var resultSlice []*PlanCandidatePlace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_candidate_places")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_candidate_places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_places")
	}

	if len(planCandidatePlaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanCandidatePlaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCandidatePlaceR{}
			}
			foreign.R.PlanCandidateSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanCandidateSetID {
				local.R.PlanCandidatePlaces = append(local.R.PlanCandidatePlaces, foreign)
				if foreign.R == nil {
					foreign.R = &planCandidatePlaceR{}
				}
				foreign.R.PlanCandidateSet = local
				break
			}
		}
	}

	return nil
}

// LoadPlanCandidateSetLikePlaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planCandidateSetL) LoadPlanCandidateSetLikePlaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSet interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSet
	var object *PlanCandidateSet

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSet.(*PlanCandidateSet)
		if !ok {
			object = new(PlanCandidateSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSet))
			}
		}
	} else {
		s, ok := maybePlanCandidateSet.(*[]*PlanCandidateSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_candidate_set_like_places`),
		qm.WhereIn(`plan_candidate_set_like_places.plan_candidate_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_candidate_set_like_places")
	}

	var resultSlice []*PlanCandidateSetLikePlace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_candidate_set_like_places")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_candidate_set_like_places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_set_like_places")
	}

	if len(planCandidateSetLikePlaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanCandidateSetLikePlaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCandidateSetLikePlaceR{}
			}
			foreign.R.PlanCandidateSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanCandidateSetID {
				local.R.PlanCandidateSetLikePlaces = append(local.R.PlanCandidateSetLikePlaces, foreign)
				if foreign.R == nil {
					foreign.R = &planCandidateSetLikePlaceR{}
				}
				foreign.R.PlanCandidateSet = local
				break
			}
		}
	}

	return nil
}

// LoadPlanCandidateSetMetaData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planCandidateSetL) LoadPlanCandidateSetMetaData(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSet interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSet
	var object *PlanCandidateSet

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSet.(*PlanCandidateSet)
		if !ok {
			object = new(PlanCandidateSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSet))
			}
		}
	} else {
		s, ok := maybePlanCandidateSet.(*[]*PlanCandidateSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_candidate_set_meta_data`),
		qm.WhereIn(`plan_candidate_set_meta_data.plan_candidate_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_candidate_set_meta_data")
	}

	var resultSlice []*PlanCandidateSetMetaDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_candidate_set_meta_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_candidate_set_meta_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_set_meta_data")
	}

	if len(planCandidateSetMetaDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanCandidateSetMetaData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCandidateSetMetaDatumR{}
			}
			foreign.R.PlanCandidateSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanCandidateSetID {
				local.R.PlanCandidateSetMetaData = append(local.R.PlanCandidateSetMetaData, foreign)
				if foreign.R == nil {
					foreign.R = &planCandidateSetMetaDatumR{}
				}
				foreign.R.PlanCandidateSet = local
				break
			}
		}
	}

	return nil
}

// LoadPlanCandidateSetMetaDataCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planCandidateSetL) LoadPlanCandidateSetMetaDataCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSet interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSet
	var object *PlanCandidateSet

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSet.(*PlanCandidateSet)
		if !ok {
			object = new(PlanCandidateSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSet))
			}
		}
	} else {
		s, ok := maybePlanCandidateSet.(*[]*PlanCandidateSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_candidate_set_meta_data_categories`),
		qm.WhereIn(`plan_candidate_set_meta_data_categories.plan_candidate_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_candidate_set_meta_data_categories")
	}

	var resultSlice []*PlanCandidateSetMetaDataCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_candidate_set_meta_data_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_candidate_set_meta_data_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidate_set_meta_data_categories")
	}

	if len(planCandidateSetMetaDataCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanCandidateSetMetaDataCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCandidateSetMetaDataCategoryR{}
			}
			foreign.R.PlanCandidateSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanCandidateSetID {
				local.R.PlanCandidateSetMetaDataCategories = append(local.R.PlanCandidateSetMetaDataCategories, foreign)
				if foreign.R == nil {
					foreign.R = &planCandidateSetMetaDataCategoryR{}
				}
				foreign.R.PlanCandidateSet = local
				break
			}
		}
	}

	return nil
}

// LoadPlanCandidates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planCandidateSetL) LoadPlanCandidates(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlanCandidateSet interface{}, mods queries.Applicator) error {
	var slice []*PlanCandidateSet
	var object *PlanCandidateSet

	if singular {
		var ok bool
		object, ok = maybePlanCandidateSet.(*PlanCandidateSet)
		if !ok {
			object = new(PlanCandidateSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlanCandidateSet))
			}
		}
	} else {
		s, ok := maybePlanCandidateSet.(*[]*PlanCandidateSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlanCandidateSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlanCandidateSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planCandidateSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planCandidateSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plan_candidates`),
		qm.WhereIn(`plan_candidates.plan_candidate_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load plan_candidates")
	}

	var resultSlice []*PlanCandidate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice plan_candidates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on plan_candidates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plan_candidates")
	}

	if len(planCandidateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlanCandidates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &planCandidateR{}
			}
			foreign.R.PlanCandidateSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlanCandidateSetID {
				local.R.PlanCandidates = append(local.R.PlanCandidates, foreign)
				if foreign.R == nil {
					foreign.R = &planCandidateR{}
				}
				foreign.R.PlanCandidateSet = local
				break
			}
		}
	}

	return nil
}

// AddPlanCandidatePlaces adds the given related objects to the existing relationships
// of the plan_candidate_set, optionally inserting them as new records.
// Appends related to o.R.PlanCandidatePlaces.
// Sets related.R.PlanCandidateSet appropriately.
func (o *PlanCandidateSet) AddPlanCandidatePlaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidatePlace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanCandidateSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_candidate_places` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
				strmangle.WhereClause("`", "`", 0, planCandidatePlacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanCandidateSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planCandidateSetR{
			PlanCandidatePlaces: related,
		}
	} else {
		o.R.PlanCandidatePlaces = append(o.R.PlanCandidatePlaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCandidatePlaceR{
				PlanCandidateSet: o,
			}
		} else {
			rel.R.PlanCandidateSet = o
		}
	}
	return nil
}

// AddPlanCandidateSetLikePlaces adds the given related objects to the existing relationships
// of the plan_candidate_set, optionally inserting them as new records.
// Appends related to o.R.PlanCandidateSetLikePlaces.
// Sets related.R.PlanCandidateSet appropriately.
func (o *PlanCandidateSet) AddPlanCandidateSetLikePlaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidateSetLikePlace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanCandidateSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_candidate_set_like_places` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
				strmangle.WhereClause("`", "`", 0, planCandidateSetLikePlacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanCandidateSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planCandidateSetR{
			PlanCandidateSetLikePlaces: related,
		}
	} else {
		o.R.PlanCandidateSetLikePlaces = append(o.R.PlanCandidateSetLikePlaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCandidateSetLikePlaceR{
				PlanCandidateSet: o,
			}
		} else {
			rel.R.PlanCandidateSet = o
		}
	}
	return nil
}

// AddPlanCandidateSetMetaData adds the given related objects to the existing relationships
// of the plan_candidate_set, optionally inserting them as new records.
// Appends related to o.R.PlanCandidateSetMetaData.
// Sets related.R.PlanCandidateSet appropriately.
func (o *PlanCandidateSet) AddPlanCandidateSetMetaData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidateSetMetaDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanCandidateSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_candidate_set_meta_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
				strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanCandidateSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planCandidateSetR{
			PlanCandidateSetMetaData: related,
		}
	} else {
		o.R.PlanCandidateSetMetaData = append(o.R.PlanCandidateSetMetaData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCandidateSetMetaDatumR{
				PlanCandidateSet: o,
			}
		} else {
			rel.R.PlanCandidateSet = o
		}
	}
	return nil
}

// AddPlanCandidateSetMetaDataCategories adds the given related objects to the existing relationships
// of the plan_candidate_set, optionally inserting them as new records.
// Appends related to o.R.PlanCandidateSetMetaDataCategories.
// Sets related.R.PlanCandidateSet appropriately.
func (o *PlanCandidateSet) AddPlanCandidateSetMetaDataCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidateSetMetaDataCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanCandidateSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_candidate_set_meta_data_categories` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
				strmangle.WhereClause("`", "`", 0, planCandidateSetMetaDataCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanCandidateSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planCandidateSetR{
			PlanCandidateSetMetaDataCategories: related,
		}
	} else {
		o.R.PlanCandidateSetMetaDataCategories = append(o.R.PlanCandidateSetMetaDataCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCandidateSetMetaDataCategoryR{
				PlanCandidateSet: o,
			}
		} else {
			rel.R.PlanCandidateSet = o
		}
	}
	return nil
}

// AddPlanCandidates adds the given related objects to the existing relationships
// of the plan_candidate_set, optionally inserting them as new records.
// Appends related to o.R.PlanCandidates.
// Sets related.R.PlanCandidateSet appropriately.
func (o *PlanCandidateSet) AddPlanCandidates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlanCandidate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlanCandidateSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `plan_candidates` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"plan_candidate_set_id"}),
				strmangle.WhereClause("`", "`", 0, planCandidatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlanCandidateSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &planCandidateSetR{
			PlanCandidates: related,
		}
	} else {
		o.R.PlanCandidates = append(o.R.PlanCandidates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &planCandidateR{
				PlanCandidateSet: o,
			}
		} else {
			rel.R.PlanCandidateSet = o
		}
	}
	return nil
}

// PlanCandidateSets retrieves all the records using an executor.
func PlanCandidateSets(mods ...qm.QueryMod) planCandidateSetQuery {
	mods = append(mods, qm.From("`plan_candidate_sets`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plan_candidate_sets`.*"})
	}

	return planCandidateSetQuery{q}
}

// FindPlanCandidateSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlanCandidateSet(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PlanCandidateSet, error) {
	planCandidateSetObj := &PlanCandidateSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plan_candidate_sets` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planCandidateSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from plan_candidate_sets")
	}

	if err = planCandidateSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planCandidateSetObj, err
	}

	return planCandidateSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlanCandidateSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plan_candidate_sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planCandidateSetInsertCacheMut.RLock()
	cache, cached := planCandidateSetInsertCache[key]
	planCandidateSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planCandidateSetAllColumns,
			planCandidateSetColumnsWithDefault,
			planCandidateSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plan_candidate_sets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plan_candidate_sets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plan_candidate_sets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planCandidateSetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into plan_candidate_sets")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plan_candidate_sets")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetInsertCacheMut.Lock()
		planCandidateSetInsertCache[key] = cache
		planCandidateSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlanCandidateSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlanCandidateSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planCandidateSetUpdateCacheMut.RLock()
	cache, cached := planCandidateSetUpdateCache[key]
	planCandidateSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planCandidateSetAllColumns,
			planCandidateSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update plan_candidate_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plan_candidate_sets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planCandidateSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, append(wl, planCandidateSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update plan_candidate_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for plan_candidate_sets")
	}

	if !cached {
		planCandidateSetUpdateCacheMut.Lock()
		planCandidateSetUpdateCache[key] = cache
		planCandidateSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planCandidateSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for plan_candidate_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for plan_candidate_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanCandidateSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plan_candidate_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in planCandidateSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all planCandidateSet")
	}
	return rowsAff, nil
}

var mySQLPlanCandidateSetUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlanCandidateSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no plan_candidate_sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanCandidateSetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planCandidateSetUpsertCacheMut.RLock()
	cache, cached := planCandidateSetUpsertCache[key]
	planCandidateSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planCandidateSetAllColumns,
			planCandidateSetColumnsWithDefault,
			planCandidateSetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planCandidateSetAllColumns,
			planCandidateSetPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert plan_candidate_sets, could not build update column list")
		}

		ret := strmangle.SetComplement(planCandidateSetAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`plan_candidate_sets`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plan_candidate_sets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for plan_candidate_sets")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planCandidateSetType, planCandidateSetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for plan_candidate_sets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for plan_candidate_sets")
	}

CacheNoHooks:
	if !cached {
		planCandidateSetUpsertCacheMut.Lock()
		planCandidateSetUpsertCache[key] = cache
		planCandidateSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlanCandidateSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlanCandidateSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no PlanCandidateSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planCandidateSetPrimaryKeyMapping)
	sql := "DELETE FROM `plan_candidate_sets` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from plan_candidate_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for plan_candidate_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planCandidateSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no planCandidateSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from plan_candidate_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plan_candidate_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanCandidateSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planCandidateSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plan_candidate_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from planCandidateSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for plan_candidate_sets")
	}

	if len(planCandidateSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlanCandidateSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlanCandidateSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanCandidateSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanCandidateSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planCandidateSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plan_candidate_sets`.* FROM `plan_candidate_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planCandidateSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in PlanCandidateSetSlice")
	}

	*o = slice

	return nil
}

// PlanCandidateSetExists checks if the PlanCandidateSet row exists.
func PlanCandidateSetExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plan_candidate_sets` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if plan_candidate_sets exists")
	}

	return exists, nil
}

// Exists checks if the PlanCandidateSet row exists.
func (o *PlanCandidateSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanCandidateSetExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	PlanCandidateSetAllColumns            = planCandidateSetAllColumns
	PlanCandidateSetColumnsWithoutDefault = planCandidateSetColumnsWithoutDefault
	PlanCandidateSetColumnsWithDefault    = planCandidateSetColumnsWithDefault
	PlanCandidateSetPrimaryKeyColumns     = planCandidateSetPrimaryKeyColumns
	PlanCandidateSetGeneratedColumns      = planCandidateSetGeneratedColumns
)

// GetID get ID from model object
func (o *PlanCandidateSet) GetID() string {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s PlanCandidateSetSlice) GetIDs() []string {
	result := make([]string, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s PlanCandidateSetSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s PlanCandidateSetSlice) ToIDMap() map[string]*PlanCandidateSet {
	result := make(map[string]*PlanCandidateSet, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s PlanCandidateSetSlice) ToUniqueItems() PlanCandidateSetSlice {
	result := make(PlanCandidateSetSlice, 0, len(s))
	mapChk := make(map[string]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s PlanCandidateSetSlice) FindItemByID(id string) *PlanCandidateSet {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s PlanCandidateSetSlice) FindMissingItemIDs(expectedIDs []string) []string {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []string{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
func (o PlanCandidateSetSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			planCandidateSetAllColumns,
			planCandidateSetColumnsWithDefault,
			planCandidateSetColumnsWithoutDefault,
			queries.NonZeroDefaultSet(planCandidateSetColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO `plan_candidate_sets` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(planCandidateSetType, planCandidateSetMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to insert all from planCandidateSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by insertall for plan_candidate_sets")
	}

	if len(planCandidateSetAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o PlanCandidateSetSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(planCandidateSetColumnsWithDefault, o[0])
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanCandidateSetUniqueColumns, o[0])
	if len(nzUniques) == 0 {
		return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	insert, _ := insertColumns.InsertColumnSet(
		planCandidateSetAllColumns,
		planCandidateSetColumnsWithDefault,
		planCandidateSetColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		planCandidateSetAllColumns,
		planCandidateSetPrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("generated: unable to upsert plan_candidate_sets, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `plan_candidate_sets`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `plan_candidate_sets`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(planCandidateSetType, planCandidateSetMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to upsert for plan_candidate_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by upsert for plan_candidate_sets")
	}

	if len(planCandidateSetAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all PlanCandidateSet records from the slice.
// This function deletes data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanCandidateSetSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all PlanCandidateSet records from the slice.
// This function updates data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanCandidateSetSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	// NOTE (eric): len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all PlanCandidateSet records from the slice.
// This function inserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanCandidateSetSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanCandidateSetColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all PlanCandidateSet records from the slice.
// This function upserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanCandidateSetSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanCandidateSetColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadPlanCandidatePlacesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanCandidateSetSlice) LoadPlanCandidatePlacesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanCandidatePlacesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanCandidateSetSlice) LoadPlanCandidatePlacesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanCandidateSet](s, pageSize) {
		if err := chunk[0].L.LoadPlanCandidatePlaces(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanCandidateSetSlice) GetLoadedPlanCandidatePlaces() PlanCandidatePlaceSlice {
	result := make(PlanCandidatePlaceSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanCandidatePlaces == nil {
			continue
		}
		result = append(result, item.R.PlanCandidatePlaces...)
	}
	return result
}

// LoadPlanCandidateSetLikePlacesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanCandidateSetSlice) LoadPlanCandidateSetLikePlacesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanCandidateSetLikePlacesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanCandidateSetSlice) LoadPlanCandidateSetLikePlacesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanCandidateSet](s, pageSize) {
		if err := chunk[0].L.LoadPlanCandidateSetLikePlaces(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanCandidateSetSlice) GetLoadedPlanCandidateSetLikePlaces() PlanCandidateSetLikePlaceSlice {
	result := make(PlanCandidateSetLikePlaceSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanCandidateSetLikePlaces == nil {
			continue
		}
		result = append(result, item.R.PlanCandidateSetLikePlaces...)
	}
	return result
}

// LoadPlanCandidateSetMetaDataByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanCandidateSetSlice) LoadPlanCandidateSetMetaDataByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanCandidateSetMetaDataByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanCandidateSetSlice) LoadPlanCandidateSetMetaDataByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanCandidateSet](s, pageSize) {
		if err := chunk[0].L.LoadPlanCandidateSetMetaData(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanCandidateSetSlice) GetLoadedPlanCandidateSetMetaData() PlanCandidateSetMetaDatumSlice {
	result := make(PlanCandidateSetMetaDatumSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanCandidateSetMetaData == nil {
			continue
		}
		result = append(result, item.R.PlanCandidateSetMetaData...)
	}
	return result
}

// LoadPlanCandidateSetMetaDataCategoriesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanCandidateSetSlice) LoadPlanCandidateSetMetaDataCategoriesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanCandidateSetMetaDataCategoriesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanCandidateSetSlice) LoadPlanCandidateSetMetaDataCategoriesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanCandidateSet](s, pageSize) {
		if err := chunk[0].L.LoadPlanCandidateSetMetaDataCategories(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanCandidateSetSlice) GetLoadedPlanCandidateSetMetaDataCategories() PlanCandidateSetMetaDataCategorySlice {
	result := make(PlanCandidateSetMetaDataCategorySlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanCandidateSetMetaDataCategories == nil {
			continue
		}
		result = append(result, item.R.PlanCandidateSetMetaDataCategories...)
	}
	return result
}

// LoadPlanCandidatesByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlanCandidateSetSlice) LoadPlanCandidatesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlanCandidatesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanCandidateSetSlice) LoadPlanCandidatesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlanCandidateSet](s, pageSize) {
		if err := chunk[0].L.LoadPlanCandidates(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanCandidateSetSlice) GetLoadedPlanCandidates() PlanCandidateSlice {
	result := make(PlanCandidateSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlanCandidates == nil {
			continue
		}
		result = append(result, item.R.PlanCandidates...)
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
