// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlacePhotoReference is an object representing the database table.
type PlacePhotoReference struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlaceID   string    `boil:"place_id" json:"place_id" toml:"place_id" yaml:"place_id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *placePhotoReferenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L placePhotoReferenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlacePhotoReferenceColumns = struct {
	ID        string
	PlaceID   string
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	PlaceID:   "place_id",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var PlacePhotoReferenceTableColumns = struct {
	ID        string
	PlaceID   string
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "place_photo_references.id",
	PlaceID:   "place_photo_references.place_id",
	UserID:    "place_photo_references.user_id",
	CreatedAt: "place_photo_references.created_at",
	UpdatedAt: "place_photo_references.updated_at",
}

// Generated where

var PlacePhotoReferenceWhere = struct {
	ID        whereHelperstring
	PlaceID   whereHelperstring
	UserID    whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "`place_photo_references`.`id`"},
	PlaceID:   whereHelperstring{field: "`place_photo_references`.`place_id`"},
	UserID:    whereHelperstring{field: "`place_photo_references`.`user_id`"},
	CreatedAt: whereHelpernull_Time{field: "`place_photo_references`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`place_photo_references`.`updated_at`"},
}

// PlacePhotoReferenceRels is where relationship names are stored.
var PlacePhotoReferenceRels = struct {
	Place       string
	User        string
	PlacePhotos string
}{
	Place:       "Place",
	User:        "User",
	PlacePhotos: "PlacePhotos",
}

// placePhotoReferenceR is where relationships are stored.
type placePhotoReferenceR struct {
	Place       *Place          `boil:"Place" json:"Place" toml:"Place" yaml:"Place"`
	User        *User           `boil:"User" json:"User" toml:"User" yaml:"User"`
	PlacePhotos PlacePhotoSlice `boil:"PlacePhotos" json:"PlacePhotos" toml:"PlacePhotos" yaml:"PlacePhotos"`
}

// NewStruct creates a new relationship struct
func (*placePhotoReferenceR) NewStruct() *placePhotoReferenceR {
	return &placePhotoReferenceR{}
}

func (r *placePhotoReferenceR) GetPlace() *Place {
	if r == nil {
		return nil
	}
	return r.Place
}

func (r *placePhotoReferenceR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *placePhotoReferenceR) GetPlacePhotos() PlacePhotoSlice {
	if r == nil {
		return nil
	}
	return r.PlacePhotos
}

// placePhotoReferenceL is where Load methods for each relationship are stored.
type placePhotoReferenceL struct{}

var (
	placePhotoReferenceAllColumns            = []string{"id", "place_id", "user_id", "created_at", "updated_at"}
	placePhotoReferenceColumnsWithoutDefault = []string{"id", "place_id", "user_id"}
	placePhotoReferenceColumnsWithDefault    = []string{"created_at", "updated_at"}
	placePhotoReferencePrimaryKeyColumns     = []string{"id"}
	placePhotoReferenceGeneratedColumns      = []string{}
)

type (
	// PlacePhotoReferenceSlice is an alias for a slice of pointers to PlacePhotoReference.
	// This should almost always be used instead of []PlacePhotoReference.
	PlacePhotoReferenceSlice []*PlacePhotoReference
	// PlacePhotoReferenceHook is the signature for custom PlacePhotoReference hook methods
	PlacePhotoReferenceHook func(context.Context, boil.ContextExecutor, *PlacePhotoReference) error

	placePhotoReferenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	placePhotoReferenceType                 = reflect.TypeOf(&PlacePhotoReference{})
	placePhotoReferenceMapping              = queries.MakeStructMapping(placePhotoReferenceType)
	placePhotoReferencePrimaryKeyMapping, _ = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, placePhotoReferencePrimaryKeyColumns)
	placePhotoReferenceInsertCacheMut       sync.RWMutex
	placePhotoReferenceInsertCache          = make(map[string]insertCache)
	placePhotoReferenceUpdateCacheMut       sync.RWMutex
	placePhotoReferenceUpdateCache          = make(map[string]updateCache)
	placePhotoReferenceUpsertCacheMut       sync.RWMutex
	placePhotoReferenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var placePhotoReferenceAfterSelectMu sync.Mutex
var placePhotoReferenceAfterSelectHooks []PlacePhotoReferenceHook

var placePhotoReferenceBeforeInsertMu sync.Mutex
var placePhotoReferenceBeforeInsertHooks []PlacePhotoReferenceHook
var placePhotoReferenceAfterInsertMu sync.Mutex
var placePhotoReferenceAfterInsertHooks []PlacePhotoReferenceHook

var placePhotoReferenceBeforeUpdateMu sync.Mutex
var placePhotoReferenceBeforeUpdateHooks []PlacePhotoReferenceHook
var placePhotoReferenceAfterUpdateMu sync.Mutex
var placePhotoReferenceAfterUpdateHooks []PlacePhotoReferenceHook

var placePhotoReferenceBeforeDeleteMu sync.Mutex
var placePhotoReferenceBeforeDeleteHooks []PlacePhotoReferenceHook
var placePhotoReferenceAfterDeleteMu sync.Mutex
var placePhotoReferenceAfterDeleteHooks []PlacePhotoReferenceHook

var placePhotoReferenceBeforeUpsertMu sync.Mutex
var placePhotoReferenceBeforeUpsertHooks []PlacePhotoReferenceHook
var placePhotoReferenceAfterUpsertMu sync.Mutex
var placePhotoReferenceAfterUpsertHooks []PlacePhotoReferenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlacePhotoReference) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlacePhotoReference) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlacePhotoReference) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlacePhotoReference) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlacePhotoReference) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlacePhotoReference) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlacePhotoReference) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlacePhotoReference) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlacePhotoReference) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range placePhotoReferenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlacePhotoReferenceHook registers your hook function for all future operations.
func AddPlacePhotoReferenceHook(hookPoint boil.HookPoint, placePhotoReferenceHook PlacePhotoReferenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		placePhotoReferenceAfterSelectMu.Lock()
		placePhotoReferenceAfterSelectHooks = append(placePhotoReferenceAfterSelectHooks, placePhotoReferenceHook)
		placePhotoReferenceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		placePhotoReferenceBeforeInsertMu.Lock()
		placePhotoReferenceBeforeInsertHooks = append(placePhotoReferenceBeforeInsertHooks, placePhotoReferenceHook)
		placePhotoReferenceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		placePhotoReferenceAfterInsertMu.Lock()
		placePhotoReferenceAfterInsertHooks = append(placePhotoReferenceAfterInsertHooks, placePhotoReferenceHook)
		placePhotoReferenceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		placePhotoReferenceBeforeUpdateMu.Lock()
		placePhotoReferenceBeforeUpdateHooks = append(placePhotoReferenceBeforeUpdateHooks, placePhotoReferenceHook)
		placePhotoReferenceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		placePhotoReferenceAfterUpdateMu.Lock()
		placePhotoReferenceAfterUpdateHooks = append(placePhotoReferenceAfterUpdateHooks, placePhotoReferenceHook)
		placePhotoReferenceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		placePhotoReferenceBeforeDeleteMu.Lock()
		placePhotoReferenceBeforeDeleteHooks = append(placePhotoReferenceBeforeDeleteHooks, placePhotoReferenceHook)
		placePhotoReferenceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		placePhotoReferenceAfterDeleteMu.Lock()
		placePhotoReferenceAfterDeleteHooks = append(placePhotoReferenceAfterDeleteHooks, placePhotoReferenceHook)
		placePhotoReferenceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		placePhotoReferenceBeforeUpsertMu.Lock()
		placePhotoReferenceBeforeUpsertHooks = append(placePhotoReferenceBeforeUpsertHooks, placePhotoReferenceHook)
		placePhotoReferenceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		placePhotoReferenceAfterUpsertMu.Lock()
		placePhotoReferenceAfterUpsertHooks = append(placePhotoReferenceAfterUpsertHooks, placePhotoReferenceHook)
		placePhotoReferenceAfterUpsertMu.Unlock()
	}
}

// One returns a single placePhotoReference record from the query.
func (q placePhotoReferenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlacePhotoReference, error) {
	o := &PlacePhotoReference{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for place_photo_references")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlacePhotoReference records from the query.
func (q placePhotoReferenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlacePhotoReferenceSlice, error) {
	var o []*PlacePhotoReference

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to PlacePhotoReference slice")
	}

	if len(placePhotoReferenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlacePhotoReference records in the query.
func (q placePhotoReferenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count place_photo_references rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q placePhotoReferenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if place_photo_references exists")
	}

	return count > 0, nil
}

// Place pointed to by the foreign key.
func (o *PlacePhotoReference) Place(mods ...qm.QueryMod) placeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlaceID),
	}

	queryMods = append(queryMods, mods...)

	return Places(queryMods...)
}

// User pointed to by the foreign key.
func (o *PlacePhotoReference) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// PlacePhotos retrieves all the place_photo's PlacePhotos with an executor.
func (o *PlacePhotoReference) PlacePhotos(mods ...qm.QueryMod) placePhotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`place_photos`.`place_photo_reference_id`=?", o.ID),
	)

	return PlacePhotos(queryMods...)
}

// LoadPlace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (placePhotoReferenceL) LoadPlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlacePhotoReference interface{}, mods queries.Applicator) error {
	var slice []*PlacePhotoReference
	var object *PlacePhotoReference

	if singular {
		var ok bool
		object, ok = maybePlacePhotoReference.(*PlacePhotoReference)
		if !ok {
			object = new(PlacePhotoReference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlacePhotoReference))
			}
		}
	} else {
		s, ok := maybePlacePhotoReference.(*[]*PlacePhotoReference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlacePhotoReference))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &placePhotoReferenceR{}
		}
		args[object.PlaceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &placePhotoReferenceR{}
			}

			args[obj.PlaceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`places`),
		qm.WhereIn(`places.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Place")
	}

	var resultSlice []*Place
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Place")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for places")
	}

	if len(placeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Place = foreign
		if foreign.R == nil {
			foreign.R = &placeR{}
		}
		foreign.R.PlacePhotoReferences = append(foreign.R.PlacePhotoReferences, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlaceID == foreign.ID {
				local.R.Place = foreign
				if foreign.R == nil {
					foreign.R = &placeR{}
				}
				foreign.R.PlacePhotoReferences = append(foreign.R.PlacePhotoReferences, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (placePhotoReferenceL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlacePhotoReference interface{}, mods queries.Applicator) error {
	var slice []*PlacePhotoReference
	var object *PlacePhotoReference

	if singular {
		var ok bool
		object, ok = maybePlacePhotoReference.(*PlacePhotoReference)
		if !ok {
			object = new(PlacePhotoReference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlacePhotoReference))
			}
		}
	} else {
		s, ok := maybePlacePhotoReference.(*[]*PlacePhotoReference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlacePhotoReference))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &placePhotoReferenceR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &placePhotoReferenceR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PlacePhotoReferences = append(foreign.R.PlacePhotoReferences, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PlacePhotoReferences = append(foreign.R.PlacePhotoReferences, local)
				break
			}
		}
	}

	return nil
}

// LoadPlacePhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (placePhotoReferenceL) LoadPlacePhotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlacePhotoReference interface{}, mods queries.Applicator) error {
	var slice []*PlacePhotoReference
	var object *PlacePhotoReference

	if singular {
		var ok bool
		object, ok = maybePlacePhotoReference.(*PlacePhotoReference)
		if !ok {
			object = new(PlacePhotoReference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlacePhotoReference))
			}
		}
	} else {
		s, ok := maybePlacePhotoReference.(*[]*PlacePhotoReference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlacePhotoReference))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &placePhotoReferenceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &placePhotoReferenceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`place_photos`),
		qm.WhereIn(`place_photos.place_photo_reference_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load place_photos")
	}

	var resultSlice []*PlacePhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice place_photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on place_photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for place_photos")
	}

	if len(placePhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlacePhotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &placePhotoR{}
			}
			foreign.R.PlacePhotoReference = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PlacePhotoReferenceID) {
				local.R.PlacePhotos = append(local.R.PlacePhotos, foreign)
				if foreign.R == nil {
					foreign.R = &placePhotoR{}
				}
				foreign.R.PlacePhotoReference = local
				break
			}
		}
	}

	return nil
}

// SetPlace of the placePhotoReference to the related item.
// Sets o.R.Place to related.
// Adds o to related.R.PlacePhotoReferences.
func (o *PlacePhotoReference) SetPlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Place) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `place_photo_references` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"place_id"}),
		strmangle.WhereClause("`", "`", 0, placePhotoReferencePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlaceID = related.ID
	if o.R == nil {
		o.R = &placePhotoReferenceR{
			Place: related,
		}
	} else {
		o.R.Place = related
	}

	if related.R == nil {
		related.R = &placeR{
			PlacePhotoReferences: PlacePhotoReferenceSlice{o},
		}
	} else {
		related.R.PlacePhotoReferences = append(related.R.PlacePhotoReferences, o)
	}

	return nil
}

// SetUser of the placePhotoReference to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PlacePhotoReferences.
func (o *PlacePhotoReference) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `place_photo_references` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, placePhotoReferencePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &placePhotoReferenceR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PlacePhotoReferences: PlacePhotoReferenceSlice{o},
		}
	} else {
		related.R.PlacePhotoReferences = append(related.R.PlacePhotoReferences, o)
	}

	return nil
}

// AddPlacePhotos adds the given related objects to the existing relationships
// of the place_photo_reference, optionally inserting them as new records.
// Appends related to o.R.PlacePhotos.
// Sets related.R.PlacePhotoReference appropriately.
func (o *PlacePhotoReference) AddPlacePhotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlacePhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PlacePhotoReferenceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `place_photos` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"place_photo_reference_id"}),
				strmangle.WhereClause("`", "`", 0, placePhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PlacePhotoReferenceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &placePhotoReferenceR{
			PlacePhotos: related,
		}
	} else {
		o.R.PlacePhotos = append(o.R.PlacePhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &placePhotoR{
				PlacePhotoReference: o,
			}
		} else {
			rel.R.PlacePhotoReference = o
		}
	}
	return nil
}

// SetPlacePhotos removes all previously related items of the
// place_photo_reference replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PlacePhotoReference's PlacePhotos accordingly.
// Replaces o.R.PlacePhotos with related.
// Sets related.R.PlacePhotoReference's PlacePhotos accordingly.
func (o *PlacePhotoReference) SetPlacePhotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PlacePhoto) error {
	query := "update `place_photos` set `place_photo_reference_id` = null where `place_photo_reference_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PlacePhotos {
			queries.SetScanner(&rel.PlacePhotoReferenceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PlacePhotoReference = nil
		}
		o.R.PlacePhotos = nil
	}

	return o.AddPlacePhotos(ctx, exec, insert, related...)
}

// RemovePlacePhotos relationships from objects passed in.
// Removes related items from R.PlacePhotos (uses pointer comparison, removal does not keep order)
// Sets related.R.PlacePhotoReference.
func (o *PlacePhotoReference) RemovePlacePhotos(ctx context.Context, exec boil.ContextExecutor, related ...*PlacePhoto) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PlacePhotoReferenceID, nil)
		if rel.R != nil {
			rel.R.PlacePhotoReference = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("place_photo_reference_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PlacePhotos {
			if rel != ri {
				continue
			}

			ln := len(o.R.PlacePhotos)
			if ln > 1 && i < ln-1 {
				o.R.PlacePhotos[i] = o.R.PlacePhotos[ln-1]
			}
			o.R.PlacePhotos = o.R.PlacePhotos[:ln-1]
			break
		}
	}

	return nil
}

// PlacePhotoReferences retrieves all the records using an executor.
func PlacePhotoReferences(mods ...qm.QueryMod) placePhotoReferenceQuery {
	mods = append(mods, qm.From("`place_photo_references`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`place_photo_references`.*"})
	}

	return placePhotoReferenceQuery{q}
}

// FindPlacePhotoReference retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlacePhotoReference(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PlacePhotoReference, error) {
	placePhotoReferenceObj := &PlacePhotoReference{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `place_photo_references` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, placePhotoReferenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from place_photo_references")
	}

	if err = placePhotoReferenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return placePhotoReferenceObj, err
	}

	return placePhotoReferenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlacePhotoReference) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no place_photo_references provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(placePhotoReferenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	placePhotoReferenceInsertCacheMut.RLock()
	cache, cached := placePhotoReferenceInsertCache[key]
	placePhotoReferenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			placePhotoReferenceAllColumns,
			placePhotoReferenceColumnsWithDefault,
			placePhotoReferenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `place_photo_references` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `place_photo_references` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `place_photo_references` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, placePhotoReferencePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into place_photo_references")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for place_photo_references")
	}

CacheNoHooks:
	if !cached {
		placePhotoReferenceInsertCacheMut.Lock()
		placePhotoReferenceInsertCache[key] = cache
		placePhotoReferenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlacePhotoReference.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlacePhotoReference) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	placePhotoReferenceUpdateCacheMut.RLock()
	cache, cached := placePhotoReferenceUpdateCache[key]
	placePhotoReferenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			placePhotoReferenceAllColumns,
			placePhotoReferencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update place_photo_references, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `place_photo_references` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, placePhotoReferencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, append(wl, placePhotoReferencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update place_photo_references row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for place_photo_references")
	}

	if !cached {
		placePhotoReferenceUpdateCacheMut.Lock()
		placePhotoReferenceUpdateCache[key] = cache
		placePhotoReferenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q placePhotoReferenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for place_photo_references")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlacePhotoReferenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), placePhotoReferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `place_photo_references` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, placePhotoReferencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in placePhotoReference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all placePhotoReference")
	}
	return rowsAff, nil
}

var mySQLPlacePhotoReferenceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlacePhotoReference) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no place_photo_references provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(placePhotoReferenceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlacePhotoReferenceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	placePhotoReferenceUpsertCacheMut.RLock()
	cache, cached := placePhotoReferenceUpsertCache[key]
	placePhotoReferenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			placePhotoReferenceAllColumns,
			placePhotoReferenceColumnsWithDefault,
			placePhotoReferenceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			placePhotoReferenceAllColumns,
			placePhotoReferencePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert place_photo_references, could not build update column list")
		}

		ret := strmangle.SetComplement(placePhotoReferenceAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`place_photo_references`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `place_photo_references` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for place_photo_references")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for place_photo_references")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for place_photo_references")
	}

CacheNoHooks:
	if !cached {
		placePhotoReferenceUpsertCacheMut.Lock()
		placePhotoReferenceUpsertCache[key] = cache
		placePhotoReferenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlacePhotoReference record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlacePhotoReference) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no PlacePhotoReference provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), placePhotoReferencePrimaryKeyMapping)
	sql := "DELETE FROM `place_photo_references` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for place_photo_references")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q placePhotoReferenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no placePhotoReferenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for place_photo_references")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlacePhotoReferenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(placePhotoReferenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), placePhotoReferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `place_photo_references` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, placePhotoReferencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from placePhotoReference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for place_photo_references")
	}

	if len(placePhotoReferenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlacePhotoReference) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlacePhotoReference(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlacePhotoReferenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlacePhotoReferenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), placePhotoReferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `place_photo_references`.* FROM `place_photo_references` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, placePhotoReferencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in PlacePhotoReferenceSlice")
	}

	*o = slice

	return nil
}

// PlacePhotoReferenceExists checks if the PlacePhotoReference row exists.
func PlacePhotoReferenceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `place_photo_references` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if place_photo_references exists")
	}

	return exists, nil
}

// Exists checks if the PlacePhotoReference row exists.
func (o *PlacePhotoReference) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlacePhotoReferenceExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	PlacePhotoReferenceAllColumns            = placePhotoReferenceAllColumns
	PlacePhotoReferenceColumnsWithoutDefault = placePhotoReferenceColumnsWithoutDefault
	PlacePhotoReferenceColumnsWithDefault    = placePhotoReferenceColumnsWithDefault
	PlacePhotoReferencePrimaryKeyColumns     = placePhotoReferencePrimaryKeyColumns
	PlacePhotoReferenceGeneratedColumns      = placePhotoReferenceGeneratedColumns
)

// GetID get ID from model object
func (o *PlacePhotoReference) GetID() string {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s PlacePhotoReferenceSlice) GetIDs() []string {
	result := make([]string, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s PlacePhotoReferenceSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s PlacePhotoReferenceSlice) ToIDMap() map[string]*PlacePhotoReference {
	result := make(map[string]*PlacePhotoReference, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s PlacePhotoReferenceSlice) ToUniqueItems() PlacePhotoReferenceSlice {
	result := make(PlacePhotoReferenceSlice, 0, len(s))
	mapChk := make(map[string]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s PlacePhotoReferenceSlice) FindItemByID(id string) *PlacePhotoReference {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s PlacePhotoReferenceSlice) FindMissingItemIDs(expectedIDs []string) []string {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []string{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
func (o PlacePhotoReferenceSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			placePhotoReferenceAllColumns,
			placePhotoReferenceColumnsWithDefault,
			placePhotoReferenceColumnsWithoutDefault,
			queries.NonZeroDefaultSet(placePhotoReferenceColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO `place_photo_references` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to insert all from placePhotoReference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by insertall for place_photo_references")
	}

	if len(placePhotoReferenceAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o PlacePhotoReferenceSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(placePhotoReferenceColumnsWithDefault, o[0])
	nzUniques := queries.NonZeroDefaultSet(mySQLPlacePhotoReferenceUniqueColumns, o[0])
	if len(nzUniques) == 0 {
		return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	insert, _ := insertColumns.InsertColumnSet(
		placePhotoReferenceAllColumns,
		placePhotoReferenceColumnsWithDefault,
		placePhotoReferenceColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		placePhotoReferenceAllColumns,
		placePhotoReferencePrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("generated: unable to upsert place_photo_references, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `place_photo_references`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `place_photo_references`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(placePhotoReferenceType, placePhotoReferenceMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}

			queries.SetScanner(&row.UpdatedAt, currTime)
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to upsert for place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by upsert for place_photo_references")
	}

	if len(placePhotoReferenceAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all PlacePhotoReference records from the slice.
// This function deletes data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlacePhotoReferenceSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all PlacePhotoReference records from the slice.
// This function updates data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlacePhotoReferenceSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	// NOTE (eric): len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all PlacePhotoReference records from the slice.
// This function inserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlacePhotoReferenceSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlacePhotoReferenceColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all PlacePhotoReference records from the slice.
// This function upserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlacePhotoReferenceSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlacePhotoReferenceColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadPlacePhotosByPage performs eager loading of values by page. This is for a 1-M or N-M relationship.
func (s PlacePhotoReferenceSlice) LoadPlacePhotosByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlacePhotosByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlacePhotoReferenceSlice) LoadPlacePhotosByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlacePhotoReference](s, pageSize) {
		if err := chunk[0].L.LoadPlacePhotos(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlacePhotoReferenceSlice) GetLoadedPlacePhotos() PlacePhotoSlice {
	result := make(PlacePhotoSlice, 0, len(s)*2)
	for _, item := range s {
		if item.R == nil || item.R.PlacePhotos == nil {
			continue
		}
		result = append(result, item.R.PlacePhotos...)
	}
	return result
}

// LoadPlacesByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s PlacePhotoReferenceSlice) LoadPlacesByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadPlacesByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlacePhotoReferenceSlice) LoadPlacesByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlacePhotoReference](s, pageSize) {
		if err := chunk[0].L.LoadPlace(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlacePhotoReferenceSlice) GetLoadedPlaces() PlaceSlice {
	result := make(PlaceSlice, 0, len(s))
	mapCheckDup := make(map[*Place]struct{})
	for _, item := range s {
		if item.R == nil || item.R.Place == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.Place]; ok {
			continue
		}
		result = append(result, item.R.Place)
		mapCheckDup[item.R.Place] = struct{}{}
	}
	return result
}

// LoadUsersByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s PlacePhotoReferenceSlice) LoadUsersByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadUsersByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlacePhotoReferenceSlice) LoadUsersByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*PlacePhotoReference](s, pageSize) {
		if err := chunk[0].L.LoadUser(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlacePhotoReferenceSlice) GetLoadedUsers() UserSlice {
	result := make(UserSlice, 0, len(s))
	mapCheckDup := make(map[*User]struct{})
	for _, item := range s {
		if item.R == nil || item.R.User == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.User]; ok {
			continue
		}
		result = append(result, item.R.User)
		mapCheckDup[item.R.User] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
