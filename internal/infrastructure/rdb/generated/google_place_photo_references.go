// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package generated

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GooglePlacePhotoReference is an object representing the database table.
type GooglePlacePhotoReference struct {
	PhotoReference string    `boil:"photo_reference" json:"photo_reference" toml:"photo_reference" yaml:"photo_reference"`
	GooglePlaceID  string    `boil:"google_place_id" json:"google_place_id" toml:"google_place_id" yaml:"google_place_id"`
	Width          int       `boil:"width" json:"width" toml:"width" yaml:"width"`
	Height         int       `boil:"height" json:"height" toml:"height" yaml:"height"`
	CreatedAt      null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *googlePlacePhotoReferenceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googlePlacePhotoReferenceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GooglePlacePhotoReferenceColumns = struct {
	PhotoReference string
	GooglePlaceID  string
	Width          string
	Height         string
	CreatedAt      string
	UpdatedAt      string
}{
	PhotoReference: "photo_reference",
	GooglePlaceID:  "google_place_id",
	Width:          "width",
	Height:         "height",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var GooglePlacePhotoReferenceTableColumns = struct {
	PhotoReference string
	GooglePlaceID  string
	Width          string
	Height         string
	CreatedAt      string
	UpdatedAt      string
}{
	PhotoReference: "google_place_photo_references.photo_reference",
	GooglePlaceID:  "google_place_photo_references.google_place_id",
	Width:          "google_place_photo_references.width",
	Height:         "google_place_photo_references.height",
	CreatedAt:      "google_place_photo_references.created_at",
	UpdatedAt:      "google_place_photo_references.updated_at",
}

// Generated where

var GooglePlacePhotoReferenceWhere = struct {
	PhotoReference whereHelperstring
	GooglePlaceID  whereHelperstring
	Width          whereHelperint
	Height         whereHelperint
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
}{
	PhotoReference: whereHelperstring{field: "`google_place_photo_references`.`photo_reference`"},
	GooglePlaceID:  whereHelperstring{field: "`google_place_photo_references`.`google_place_id`"},
	Width:          whereHelperint{field: "`google_place_photo_references`.`width`"},
	Height:         whereHelperint{field: "`google_place_photo_references`.`height`"},
	CreatedAt:      whereHelpernull_Time{field: "`google_place_photo_references`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`google_place_photo_references`.`updated_at`"},
}

// GooglePlacePhotoReferenceRels is where relationship names are stored.
var GooglePlacePhotoReferenceRels = struct {
	GooglePlace                                string
	PhotoReferenceGooglePlacePhotoAttributions string
	PhotoReferenceGooglePlacePhotos            string
}{
	GooglePlace: "GooglePlace",
	PhotoReferenceGooglePlacePhotoAttributions: "PhotoReferenceGooglePlacePhotoAttributions",
	PhotoReferenceGooglePlacePhotos:            "PhotoReferenceGooglePlacePhotos",
}

// googlePlacePhotoReferenceR is where relationships are stored.
type googlePlacePhotoReferenceR struct {
	GooglePlace                                *GooglePlace                     `boil:"GooglePlace" json:"GooglePlace" toml:"GooglePlace" yaml:"GooglePlace"`
	PhotoReferenceGooglePlacePhotoAttributions GooglePlacePhotoAttributionSlice `boil:"PhotoReferenceGooglePlacePhotoAttributions" json:"PhotoReferenceGooglePlacePhotoAttributions" toml:"PhotoReferenceGooglePlacePhotoAttributions" yaml:"PhotoReferenceGooglePlacePhotoAttributions"`
	PhotoReferenceGooglePlacePhotos            GooglePlacePhotoSlice            `boil:"PhotoReferenceGooglePlacePhotos" json:"PhotoReferenceGooglePlacePhotos" toml:"PhotoReferenceGooglePlacePhotos" yaml:"PhotoReferenceGooglePlacePhotos"`
}

// NewStruct creates a new relationship struct
func (*googlePlacePhotoReferenceR) NewStruct() *googlePlacePhotoReferenceR {
	return &googlePlacePhotoReferenceR{}
}

func (r *googlePlacePhotoReferenceR) GetGooglePlace() *GooglePlace {
	if r == nil {
		return nil
	}
	return r.GooglePlace
}

func (r *googlePlacePhotoReferenceR) GetPhotoReferenceGooglePlacePhotoAttributions() GooglePlacePhotoAttributionSlice {
	if r == nil {
		return nil
	}
	return r.PhotoReferenceGooglePlacePhotoAttributions
}

func (r *googlePlacePhotoReferenceR) GetPhotoReferenceGooglePlacePhotos() GooglePlacePhotoSlice {
	if r == nil {
		return nil
	}
	return r.PhotoReferenceGooglePlacePhotos
}

// googlePlacePhotoReferenceL is where Load methods for each relationship are stored.
type googlePlacePhotoReferenceL struct{}

var (
	googlePlacePhotoReferenceAllColumns            = []string{"photo_reference", "google_place_id", "width", "height", "created_at", "updated_at"}
	googlePlacePhotoReferenceColumnsWithoutDefault = []string{"photo_reference", "google_place_id", "width", "height"}
	googlePlacePhotoReferenceColumnsWithDefault    = []string{"created_at", "updated_at"}
	googlePlacePhotoReferencePrimaryKeyColumns     = []string{"photo_reference"}
	googlePlacePhotoReferenceGeneratedColumns      = []string{}
)

type (
	// GooglePlacePhotoReferenceSlice is an alias for a slice of pointers to GooglePlacePhotoReference.
	// This should almost always be used instead of []GooglePlacePhotoReference.
	GooglePlacePhotoReferenceSlice []*GooglePlacePhotoReference
	// GooglePlacePhotoReferenceHook is the signature for custom GooglePlacePhotoReference hook methods
	GooglePlacePhotoReferenceHook func(context.Context, boil.ContextExecutor, *GooglePlacePhotoReference) error

	googlePlacePhotoReferenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googlePlacePhotoReferenceType                 = reflect.TypeOf(&GooglePlacePhotoReference{})
	googlePlacePhotoReferenceMapping              = queries.MakeStructMapping(googlePlacePhotoReferenceType)
	googlePlacePhotoReferencePrimaryKeyMapping, _ = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, googlePlacePhotoReferencePrimaryKeyColumns)
	googlePlacePhotoReferenceInsertCacheMut       sync.RWMutex
	googlePlacePhotoReferenceInsertCache          = make(map[string]insertCache)
	googlePlacePhotoReferenceUpdateCacheMut       sync.RWMutex
	googlePlacePhotoReferenceUpdateCache          = make(map[string]updateCache)
	googlePlacePhotoReferenceUpsertCacheMut       sync.RWMutex
	googlePlacePhotoReferenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var googlePlacePhotoReferenceAfterSelectHooks []GooglePlacePhotoReferenceHook

var googlePlacePhotoReferenceBeforeInsertHooks []GooglePlacePhotoReferenceHook
var googlePlacePhotoReferenceAfterInsertHooks []GooglePlacePhotoReferenceHook

var googlePlacePhotoReferenceBeforeUpdateHooks []GooglePlacePhotoReferenceHook
var googlePlacePhotoReferenceAfterUpdateHooks []GooglePlacePhotoReferenceHook

var googlePlacePhotoReferenceBeforeDeleteHooks []GooglePlacePhotoReferenceHook
var googlePlacePhotoReferenceAfterDeleteHooks []GooglePlacePhotoReferenceHook

var googlePlacePhotoReferenceBeforeUpsertHooks []GooglePlacePhotoReferenceHook
var googlePlacePhotoReferenceAfterUpsertHooks []GooglePlacePhotoReferenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GooglePlacePhotoReference) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GooglePlacePhotoReference) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GooglePlacePhotoReference) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GooglePlacePhotoReference) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GooglePlacePhotoReference) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GooglePlacePhotoReference) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GooglePlacePhotoReference) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GooglePlacePhotoReference) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GooglePlacePhotoReference) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range googlePlacePhotoReferenceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGooglePlacePhotoReferenceHook registers your hook function for all future operations.
func AddGooglePlacePhotoReferenceHook(hookPoint boil.HookPoint, googlePlacePhotoReferenceHook GooglePlacePhotoReferenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		googlePlacePhotoReferenceAfterSelectHooks = append(googlePlacePhotoReferenceAfterSelectHooks, googlePlacePhotoReferenceHook)
	case boil.BeforeInsertHook:
		googlePlacePhotoReferenceBeforeInsertHooks = append(googlePlacePhotoReferenceBeforeInsertHooks, googlePlacePhotoReferenceHook)
	case boil.AfterInsertHook:
		googlePlacePhotoReferenceAfterInsertHooks = append(googlePlacePhotoReferenceAfterInsertHooks, googlePlacePhotoReferenceHook)
	case boil.BeforeUpdateHook:
		googlePlacePhotoReferenceBeforeUpdateHooks = append(googlePlacePhotoReferenceBeforeUpdateHooks, googlePlacePhotoReferenceHook)
	case boil.AfterUpdateHook:
		googlePlacePhotoReferenceAfterUpdateHooks = append(googlePlacePhotoReferenceAfterUpdateHooks, googlePlacePhotoReferenceHook)
	case boil.BeforeDeleteHook:
		googlePlacePhotoReferenceBeforeDeleteHooks = append(googlePlacePhotoReferenceBeforeDeleteHooks, googlePlacePhotoReferenceHook)
	case boil.AfterDeleteHook:
		googlePlacePhotoReferenceAfterDeleteHooks = append(googlePlacePhotoReferenceAfterDeleteHooks, googlePlacePhotoReferenceHook)
	case boil.BeforeUpsertHook:
		googlePlacePhotoReferenceBeforeUpsertHooks = append(googlePlacePhotoReferenceBeforeUpsertHooks, googlePlacePhotoReferenceHook)
	case boil.AfterUpsertHook:
		googlePlacePhotoReferenceAfterUpsertHooks = append(googlePlacePhotoReferenceAfterUpsertHooks, googlePlacePhotoReferenceHook)
	}
}

// One returns a single googlePlacePhotoReference record from the query.
func (q googlePlacePhotoReferenceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GooglePlacePhotoReference, error) {
	o := &GooglePlacePhotoReference{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: failed to execute a one query for google_place_photo_references")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GooglePlacePhotoReference records from the query.
func (q googlePlacePhotoReferenceQuery) All(ctx context.Context, exec boil.ContextExecutor) (GooglePlacePhotoReferenceSlice, error) {
	var o []*GooglePlacePhotoReference

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "generated: failed to assign all query results to GooglePlacePhotoReference slice")
	}

	if len(googlePlacePhotoReferenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GooglePlacePhotoReference records in the query.
func (q googlePlacePhotoReferenceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to count google_place_photo_references rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googlePlacePhotoReferenceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "generated: failed to check if google_place_photo_references exists")
	}

	return count > 0, nil
}

// GooglePlace pointed to by the foreign key.
func (o *GooglePlacePhotoReference) GooglePlace(mods ...qm.QueryMod) googlePlaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`google_place_id` = ?", o.GooglePlaceID),
	}

	queryMods = append(queryMods, mods...)

	return GooglePlaces(queryMods...)
}

// PhotoReferenceGooglePlacePhotoAttributions retrieves all the google_place_photo_attribution's GooglePlacePhotoAttributions with an executor via photo_reference column.
func (o *GooglePlacePhotoReference) PhotoReferenceGooglePlacePhotoAttributions(mods ...qm.QueryMod) googlePlacePhotoAttributionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_photo_attributions`.`photo_reference`=?", o.PhotoReference),
	)

	return GooglePlacePhotoAttributions(queryMods...)
}

// PhotoReferenceGooglePlacePhotos retrieves all the google_place_photo's GooglePlacePhotos with an executor via photo_reference column.
func (o *GooglePlacePhotoReference) PhotoReferenceGooglePlacePhotos(mods ...qm.QueryMod) googlePlacePhotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`google_place_photos`.`photo_reference`=?", o.PhotoReference),
	)

	return GooglePlacePhotos(queryMods...)
}

// LoadGooglePlace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (googlePlacePhotoReferenceL) LoadGooglePlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlacePhotoReference interface{}, mods queries.Applicator) error {
	var slice []*GooglePlacePhotoReference
	var object *GooglePlacePhotoReference

	if singular {
		var ok bool
		object, ok = maybeGooglePlacePhotoReference.(*GooglePlacePhotoReference)
		if !ok {
			object = new(GooglePlacePhotoReference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlacePhotoReference))
			}
		}
	} else {
		s, ok := maybeGooglePlacePhotoReference.(*[]*GooglePlacePhotoReference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlacePhotoReference))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &googlePlacePhotoReferenceR{}
		}
		args = append(args, object.GooglePlaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlacePhotoReferenceR{}
			}

			for _, a := range args {
				if a == obj.GooglePlaceID {
					continue Outer
				}
			}

			args = append(args, obj.GooglePlaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`google_places`),
		qm.WhereIn(`google_places.google_place_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GooglePlace")
	}

	var resultSlice []*GooglePlace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GooglePlace")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for google_places")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_places")
	}

	if len(googlePlaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GooglePlace = foreign
		if foreign.R == nil {
			foreign.R = &googlePlaceR{}
		}
		foreign.R.GooglePlacePhotoReferences = append(foreign.R.GooglePlacePhotoReferences, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GooglePlaceID == foreign.GooglePlaceID {
				local.R.GooglePlace = foreign
				if foreign.R == nil {
					foreign.R = &googlePlaceR{}
				}
				foreign.R.GooglePlacePhotoReferences = append(foreign.R.GooglePlacePhotoReferences, local)
				break
			}
		}
	}

	return nil
}

// LoadPhotoReferenceGooglePlacePhotoAttributions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlacePhotoReferenceL) LoadPhotoReferenceGooglePlacePhotoAttributions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlacePhotoReference interface{}, mods queries.Applicator) error {
	var slice []*GooglePlacePhotoReference
	var object *GooglePlacePhotoReference

	if singular {
		var ok bool
		object, ok = maybeGooglePlacePhotoReference.(*GooglePlacePhotoReference)
		if !ok {
			object = new(GooglePlacePhotoReference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlacePhotoReference))
			}
		}
	} else {
		s, ok := maybeGooglePlacePhotoReference.(*[]*GooglePlacePhotoReference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlacePhotoReference))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &googlePlacePhotoReferenceR{}
		}
		args = append(args, object.PhotoReference)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlacePhotoReferenceR{}
			}

			for _, a := range args {
				if a == obj.PhotoReference {
					continue Outer
				}
			}

			args = append(args, obj.PhotoReference)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`google_place_photo_attributions`),
		qm.WhereIn(`google_place_photo_attributions.photo_reference in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_photo_attributions")
	}

	var resultSlice []*GooglePlacePhotoAttribution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_photo_attributions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_photo_attributions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_photo_attributions")
	}

	if len(googlePlacePhotoAttributionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PhotoReferenceGooglePlacePhotoAttributions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlacePhotoAttributionR{}
			}
			foreign.R.PhotoReferenceGooglePlacePhotoReference = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PhotoReference == foreign.PhotoReference {
				local.R.PhotoReferenceGooglePlacePhotoAttributions = append(local.R.PhotoReferenceGooglePlacePhotoAttributions, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlacePhotoAttributionR{}
				}
				foreign.R.PhotoReferenceGooglePlacePhotoReference = local
				break
			}
		}
	}

	return nil
}

// LoadPhotoReferenceGooglePlacePhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (googlePlacePhotoReferenceL) LoadPhotoReferenceGooglePlacePhotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGooglePlacePhotoReference interface{}, mods queries.Applicator) error {
	var slice []*GooglePlacePhotoReference
	var object *GooglePlacePhotoReference

	if singular {
		var ok bool
		object, ok = maybeGooglePlacePhotoReference.(*GooglePlacePhotoReference)
		if !ok {
			object = new(GooglePlacePhotoReference)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGooglePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGooglePlacePhotoReference))
			}
		}
	} else {
		s, ok := maybeGooglePlacePhotoReference.(*[]*GooglePlacePhotoReference)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGooglePlacePhotoReference)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGooglePlacePhotoReference))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &googlePlacePhotoReferenceR{}
		}
		args = append(args, object.PhotoReference)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &googlePlacePhotoReferenceR{}
			}

			for _, a := range args {
				if a == obj.PhotoReference {
					continue Outer
				}
			}

			args = append(args, obj.PhotoReference)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`google_place_photos`),
		qm.WhereIn(`google_place_photos.photo_reference in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load google_place_photos")
	}

	var resultSlice []*GooglePlacePhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice google_place_photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on google_place_photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for google_place_photos")
	}

	if len(googlePlacePhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PhotoReferenceGooglePlacePhotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &googlePlacePhotoR{}
			}
			foreign.R.PhotoReferenceGooglePlacePhotoReference = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PhotoReference == foreign.PhotoReference {
				local.R.PhotoReferenceGooglePlacePhotos = append(local.R.PhotoReferenceGooglePlacePhotos, foreign)
				if foreign.R == nil {
					foreign.R = &googlePlacePhotoR{}
				}
				foreign.R.PhotoReferenceGooglePlacePhotoReference = local
				break
			}
		}
	}

	return nil
}

// SetGooglePlace of the googlePlacePhotoReference to the related item.
// Sets o.R.GooglePlace to related.
// Adds o to related.R.GooglePlacePhotoReferences.
func (o *GooglePlacePhotoReference) SetGooglePlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GooglePlace) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `google_place_photo_references` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"google_place_id"}),
		strmangle.WhereClause("`", "`", 0, googlePlacePhotoReferencePrimaryKeyColumns),
	)
	values := []interface{}{related.GooglePlaceID, o.PhotoReference}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GooglePlaceID = related.GooglePlaceID
	if o.R == nil {
		o.R = &googlePlacePhotoReferenceR{
			GooglePlace: related,
		}
	} else {
		o.R.GooglePlace = related
	}

	if related.R == nil {
		related.R = &googlePlaceR{
			GooglePlacePhotoReferences: GooglePlacePhotoReferenceSlice{o},
		}
	} else {
		related.R.GooglePlacePhotoReferences = append(related.R.GooglePlacePhotoReferences, o)
	}

	return nil
}

// AddPhotoReferenceGooglePlacePhotoAttributions adds the given related objects to the existing relationships
// of the google_place_photo_reference, optionally inserting them as new records.
// Appends related to o.R.PhotoReferenceGooglePlacePhotoAttributions.
// Sets related.R.PhotoReferenceGooglePlacePhotoReference appropriately.
func (o *GooglePlacePhotoReference) AddPhotoReferenceGooglePlacePhotoAttributions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlacePhotoAttribution) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhotoReference = o.PhotoReference
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_photo_attributions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"photo_reference"}),
				strmangle.WhereClause("`", "`", 0, googlePlacePhotoAttributionPrimaryKeyColumns),
			)
			values := []interface{}{o.PhotoReference, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhotoReference = o.PhotoReference
		}
	}

	if o.R == nil {
		o.R = &googlePlacePhotoReferenceR{
			PhotoReferenceGooglePlacePhotoAttributions: related,
		}
	} else {
		o.R.PhotoReferenceGooglePlacePhotoAttributions = append(o.R.PhotoReferenceGooglePlacePhotoAttributions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlacePhotoAttributionR{
				PhotoReferenceGooglePlacePhotoReference: o,
			}
		} else {
			rel.R.PhotoReferenceGooglePlacePhotoReference = o
		}
	}
	return nil
}

// AddPhotoReferenceGooglePlacePhotos adds the given related objects to the existing relationships
// of the google_place_photo_reference, optionally inserting them as new records.
// Appends related to o.R.PhotoReferenceGooglePlacePhotos.
// Sets related.R.PhotoReferenceGooglePlacePhotoReference appropriately.
func (o *GooglePlacePhotoReference) AddPhotoReferenceGooglePlacePhotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GooglePlacePhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhotoReference = o.PhotoReference
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `google_place_photos` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"photo_reference"}),
				strmangle.WhereClause("`", "`", 0, googlePlacePhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.PhotoReference, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhotoReference = o.PhotoReference
		}
	}

	if o.R == nil {
		o.R = &googlePlacePhotoReferenceR{
			PhotoReferenceGooglePlacePhotos: related,
		}
	} else {
		o.R.PhotoReferenceGooglePlacePhotos = append(o.R.PhotoReferenceGooglePlacePhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &googlePlacePhotoR{
				PhotoReferenceGooglePlacePhotoReference: o,
			}
		} else {
			rel.R.PhotoReferenceGooglePlacePhotoReference = o
		}
	}
	return nil
}

// GooglePlacePhotoReferences retrieves all the records using an executor.
func GooglePlacePhotoReferences(mods ...qm.QueryMod) googlePlacePhotoReferenceQuery {
	mods = append(mods, qm.From("`google_place_photo_references`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`google_place_photo_references`.*"})
	}

	return googlePlacePhotoReferenceQuery{q}
}

// FindGooglePlacePhotoReference retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGooglePlacePhotoReference(ctx context.Context, exec boil.ContextExecutor, photoReference string, selectCols ...string) (*GooglePlacePhotoReference, error) {
	googlePlacePhotoReferenceObj := &GooglePlacePhotoReference{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `google_place_photo_references` where `photo_reference`=?", sel,
	)

	q := queries.Raw(query, photoReference)

	err := q.Bind(ctx, exec, googlePlacePhotoReferenceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "generated: unable to select from google_place_photo_references")
	}

	if err = googlePlacePhotoReferenceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return googlePlacePhotoReferenceObj, err
	}

	return googlePlacePhotoReferenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GooglePlacePhotoReference) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no google_place_photo_references provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlacePhotoReferenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googlePlacePhotoReferenceInsertCacheMut.RLock()
	cache, cached := googlePlacePhotoReferenceInsertCache[key]
	googlePlacePhotoReferenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googlePlacePhotoReferenceAllColumns,
			googlePlacePhotoReferenceColumnsWithDefault,
			googlePlacePhotoReferenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `google_place_photo_references` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `google_place_photo_references` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `google_place_photo_references` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, googlePlacePhotoReferencePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to insert into google_place_photo_references")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PhotoReference,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for google_place_photo_references")
	}

CacheNoHooks:
	if !cached {
		googlePlacePhotoReferenceInsertCacheMut.Lock()
		googlePlacePhotoReferenceInsertCache[key] = cache
		googlePlacePhotoReferenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GooglePlacePhotoReference.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GooglePlacePhotoReference) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	googlePlacePhotoReferenceUpdateCacheMut.RLock()
	cache, cached := googlePlacePhotoReferenceUpdateCache[key]
	googlePlacePhotoReferenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googlePlacePhotoReferenceAllColumns,
			googlePlacePhotoReferencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("generated: unable to update google_place_photo_references, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `google_place_photo_references` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, googlePlacePhotoReferencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, append(wl, googlePlacePhotoReferencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update google_place_photo_references row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by update for google_place_photo_references")
	}

	if !cached {
		googlePlacePhotoReferenceUpdateCacheMut.Lock()
		googlePlacePhotoReferenceUpdateCache[key] = cache
		googlePlacePhotoReferenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q googlePlacePhotoReferenceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all for google_place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected for google_place_photo_references")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GooglePlacePhotoReferenceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("generated: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlacePhotoReferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `google_place_photo_references` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlacePhotoReferencePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to update all in googlePlacePhotoReference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to retrieve rows affected all in update all googlePlacePhotoReference")
	}
	return rowsAff, nil
}

var mySQLGooglePlacePhotoReferenceUniqueColumns = []string{
	"photo_reference",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GooglePlacePhotoReference) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("generated: no google_place_photo_references provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(googlePlacePhotoReferenceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGooglePlacePhotoReferenceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googlePlacePhotoReferenceUpsertCacheMut.RLock()
	cache, cached := googlePlacePhotoReferenceUpsertCache[key]
	googlePlacePhotoReferenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			googlePlacePhotoReferenceAllColumns,
			googlePlacePhotoReferenceColumnsWithDefault,
			googlePlacePhotoReferenceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			googlePlacePhotoReferenceAllColumns,
			googlePlacePhotoReferencePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("generated: unable to upsert google_place_photo_references, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`google_place_photo_references`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `google_place_photo_references` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "generated: unable to upsert for google_place_photo_references")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(googlePlacePhotoReferenceType, googlePlacePhotoReferenceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "generated: unable to retrieve unique values for google_place_photo_references")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "generated: unable to populate default values for google_place_photo_references")
	}

CacheNoHooks:
	if !cached {
		googlePlacePhotoReferenceUpsertCacheMut.Lock()
		googlePlacePhotoReferenceUpsertCache[key] = cache
		googlePlacePhotoReferenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GooglePlacePhotoReference record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GooglePlacePhotoReference) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("generated: no GooglePlacePhotoReference provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googlePlacePhotoReferencePrimaryKeyMapping)
	sql := "DELETE FROM `google_place_photo_references` WHERE `photo_reference`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete from google_place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by delete for google_place_photo_references")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googlePlacePhotoReferenceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("generated: no googlePlacePhotoReferenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from google_place_photo_references")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for google_place_photo_references")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GooglePlacePhotoReferenceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(googlePlacePhotoReferenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlacePhotoReferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `google_place_photo_references` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlacePhotoReferencePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "generated: unable to delete all from googlePlacePhotoReference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "generated: failed to get rows affected by deleteall for google_place_photo_references")
	}

	if len(googlePlacePhotoReferenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GooglePlacePhotoReference) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGooglePlacePhotoReference(ctx, exec, o.PhotoReference)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GooglePlacePhotoReferenceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GooglePlacePhotoReferenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googlePlacePhotoReferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `google_place_photo_references`.* FROM `google_place_photo_references` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, googlePlacePhotoReferencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "generated: unable to reload all in GooglePlacePhotoReferenceSlice")
	}

	*o = slice

	return nil
}

// GooglePlacePhotoReferenceExists checks if the GooglePlacePhotoReference row exists.
func GooglePlacePhotoReferenceExists(ctx context.Context, exec boil.ContextExecutor, photoReference string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `google_place_photo_references` where `photo_reference`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, photoReference)
	}
	row := exec.QueryRowContext(ctx, sql, photoReference)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "generated: unable to check if google_place_photo_references exists")
	}

	return exists, nil
}

// Exists checks if the GooglePlacePhotoReference row exists.
func (o *GooglePlacePhotoReference) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GooglePlacePhotoReferenceExists(ctx, exec, o.PhotoReference)
}
