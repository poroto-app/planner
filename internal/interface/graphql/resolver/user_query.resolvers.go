package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"go.uber.org/zap"
	"poroto.app/poroto/planner/internal/domain/array"
	"poroto.app/poroto/planner/internal/domain/models"
	"poroto.app/poroto/planner/internal/domain/services/user"
	"poroto.app/poroto/planner/internal/interface/graphql/factory"
	"poroto.app/poroto/planner/internal/interface/graphql/model"
)

// FirebaseUser is the resolver for the firebaseUser field.
func (r *queryResolver) FirebaseUser(ctx context.Context, input *model.FirebaseUserInput) (*model.User, error) {
	u, err := r.UserService.FindOrCreateFirebaseUser(ctx, input.FirebaseUserID, input.FirebaseAuthToken)
	if err != nil {
		r.Logger.Error("error while fetching firebase user", zap.Error(err))
		return nil, fmt.Errorf("internal error")
	}

	return factory.UserFromDomainModel(u), nil
}

// LikePlaces is the resolver for the likePlaces field.
func (r *queryResolver) LikePlaces(ctx context.Context, input *model.LikePlacesInput) ([]*model.Place, error) {
	placesLikedByUser, err := r.UserService.FindLikePlaces(ctx, user.FindLikedPlacesInput{
		UserId:            input.UserID,
		FirebaseAuthToken: input.FirebaseAuthToken,
	})
	if err != nil {
		r.Logger.Error("error while fetching liked places", zap.Error(err))
		return nil, fmt.Errorf("internal error")
	}

	graphqlPlaces := array.Map(*placesLikedByUser, func(place models.Place) *model.Place {
		return factory.PlaceFromDomainModel(&place)
	})

	return graphqlPlaces, nil
}
