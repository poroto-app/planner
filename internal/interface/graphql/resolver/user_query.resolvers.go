package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"log"

	"poroto.app/poroto/planner/internal/domain/services/user"
	"poroto.app/poroto/planner/internal/interface/graphql/factory"
	"poroto.app/poroto/planner/internal/interface/graphql/model"
)

// FirebaseUser is the resolver for the firebaseUser field.
func (r *queryResolver) FirebaseUser(ctx context.Context, input *model.FirebaseUserInput) (*model.User, error) {
	service, err := user.NewService(ctx, r.DB)
	if err != nil {
		log.Printf("error while initializing user service: %v\n", err)
		return nil, fmt.Errorf("internal error")
	}

	u, err := service.FindOrCreateFirebaseUser(ctx, input.FirebaseUserID, input.FirebaseAuthToken)
	if err != nil {
		log.Printf("error while finding or creating firebase user: %v\n", err)
		return nil, fmt.Errorf("internal error")
	}

	return factory.UserFromDomainModel(u), nil
}
