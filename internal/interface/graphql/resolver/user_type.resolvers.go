package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"go.uber.org/zap"
	"poroto.app/poroto/planner/internal/interface/graphql/factory"

	"poroto.app/poroto/planner/internal/interface/graphql/generated"
	"poroto.app/poroto/planner/internal/interface/graphql/model"
)

// Plans is the resolver for the plans field.
func (r *userResolver) Plans(ctx context.Context, obj *model.User) ([]*model.Plan, error) {
	r.Logger.Info("User#Plans", zap.String("userId", obj.ID))

	author, err := r.UserService.FindByUserId(ctx, obj.ID)
	if err != nil {
		r.Logger.Error("error while fetching user by id", zap.Error(err))
		return nil, fmt.Errorf("internal server error")
	}

	if author == nil {
		return nil, nil
	}

	plans, err := r.PlanService.PlansByUser(ctx, obj.ID)
	if err != nil {
		r.Logger.Error("error while fetching plans by user", zap.Error(err))
		return nil, fmt.Errorf("internal server error")
	}

	return factory.PlansFromDomainModel(plans, nil), nil
}

// LikedPlaces is the resolver for the likedPlaces field.
func (r *userResolver) LikedPlaces(ctx context.Context, obj *model.User) ([]*model.Place, error) {
	panic(fmt.Errorf("not implemented: LikedPlaces - likedPlaces"))
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
