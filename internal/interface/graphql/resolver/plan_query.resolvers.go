package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"log"

	"poroto.app/poroto/planner/internal/domain/models"
	"poroto.app/poroto/planner/internal/domain/services/plan"
	"poroto.app/poroto/planner/internal/domain/services/user"
	"poroto.app/poroto/planner/internal/interface/graphql/factory"
	"poroto.app/poroto/planner/internal/interface/graphql/model"
)

// Plan is the resolver for the plan field.
func (r *queryResolver) Plan(ctx context.Context, id string) (*model.Plan, error) {
	planService, err := plan.NewService(ctx, r.DB)
	if err != nil {
		return nil, fmt.Errorf("error while initizalizing places api: %v", err)
	}

	p, err := planService.FetchPlan(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("error while fetching plan: %v", err)
	}

	if p == nil {
		return nil, nil
	}

	graphqlPlan, err := factory.PlanFromDomainModel(*p, nil)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("internal server error")
	}

	return graphqlPlan, nil
}

// Plans is the resolver for the plans field.
func (r *queryResolver) Plans(ctx context.Context, input *model.PlansInput) (*model.PlansOutput, error) {
	service, err := plan.NewService(ctx, r.DB)
	if err != nil {
		log.Println("error while initializing places api: ", err)
		return nil, fmt.Errorf("internal server error")
	}

	plans, _, err := service.FetchPlans(ctx, input.PageToken)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("could not fetch plans")
	}

	return &model.PlansOutput{
		Plans:         factory.PlansFromDomainModel(plans, nil),
		NextPageToken: nil, // TODO: implement me!
	}, nil
}

// PlansByLocation is the resolver for the plansByLocation field.
func (r *queryResolver) PlansByLocation(ctx context.Context, input model.PlansByLocationInput) (*model.PlansByLocationOutput, error) {
	planService, err := plan.NewService(ctx, r.DB)
	if err != nil {
		log.Printf("error while initializing plan service: %v", err)
		return nil, fmt.Errorf("internal server error")
	}

	plans, nextPageToken, err := planService.FetchPlansByLocation(
		ctx,
		models.GeoLocation{
			Latitude:  input.Latitude,
			Longitude: input.Longitude,
		},
		input.Limit,
		input.PageKey,
	)
	if err != nil {
		log.Printf("error while fetching plans by location: %v", err)
		return nil, fmt.Errorf("internal server error")
	}

	return &model.PlansByLocationOutput{
		Plans:   factory.PlansFromDomainModel(plans, nil),
		PageKey: nextPageToken,
	}, nil
}

// PlansByUser is the resolver for the plansByUser field.
func (r *queryResolver) PlansByUser(ctx context.Context, input model.PlansByUserInput) (*model.PlansByUserOutput, error) {
	planService, err := plan.NewService(ctx, r.DB)
	if err != nil {
		log.Println("error while initializing plan service: ", err)
		return nil, fmt.Errorf("internal server error")
	}

	userService, err := user.NewService(ctx, r.DB)
	if err != nil {
		log.Println("error while initializing user service: ", err)
		return nil, fmt.Errorf("internal server error")
	}

	author, err := userService.FindByUserId(ctx, input.UserID)
	if err != nil {
		log.Println("error while fetching author by id: ", err)
		return nil, fmt.Errorf("internal server error")
	}

	if author == nil {
		return nil, nil
	}

	plans, err := planService.PlansByUser(ctx, input.UserID)
	if err != nil {
		log.Println("error while fetching plans by author: ", err)
		return nil, fmt.Errorf("internal server error")
	}

	return &model.PlansByUserOutput{
		Plans:  factory.PlansFromDomainModel(plans, nil),
		Author: factory.UserFromDomainModel(author),
	}, nil
}
