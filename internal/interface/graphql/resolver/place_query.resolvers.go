package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"go.uber.org/zap"
	"poroto.app/poroto/planner/internal/domain/array"
	"poroto.app/poroto/planner/internal/domain/models"
	"poroto.app/poroto/planner/internal/domain/services/place"
	"poroto.app/poroto/planner/internal/domain/utils"
	"poroto.app/poroto/planner/internal/interface/graphql/factory"
	"poroto.app/poroto/planner/internal/interface/graphql/model"
)

// PlacesNearPlan is the resolver for the placesNearPlan field.
func (r *queryResolver) PlacesNearPlan(ctx context.Context, input model.PlacesNearPlanInput) (*model.PlacesNearPlanOutput, error) {
	r.Logger.Info(
		"PlacesNearPlan",
		zap.String("planId", input.PlanID),
		zap.Int("limit", utils.FromPointerOrZero(input.Limit)),
	)

	places, err := r.PlaceService.FetchPlacesNearPlan(ctx, place.PlacesNearPlanInput{
		PlanID: input.PlanID,
		Limit:  utils.FromPointerOrZero(input.Limit),
	})
	if err != nil {
		r.Logger.Error("error while fetching places near plan", zap.Error(err))
		return nil, fmt.Errorf("internal server err")
	}

	graphqlPlaces := array.Map(*places, func(place models.Place) *model.Place {
		return factory.PlaceFromDomainModel(&place)
	})

	return &model.PlacesNearPlanOutput{
		Places: graphqlPlaces,
	}, nil
}
